diff -urN lilo-22.7.2/activate.c lilo-22.7.2-STEP/activate.c
--- lilo-22.7.2/activate.c	2004-06-16 05:37:37.000000000 +1200
+++ lilo-22.7.2-STEP/activate.c	2006-07-12 16:21:55.988022000 +1200
@@ -41,7 +41,7 @@
 
     if (argc != 2 && argc != 3) {
 	fprintf(stderr,"usage: %s device [ partition ]\n",argv[0]);
-	fprintf(stderr,"  i.e. %s /dev/hda 2\n",argv[0]);
+	fprintf(stderr,"  i.e. %s /System/Devices/hda 2\n",argv[0]);
 	exit(1);
     }
     if ((fd = open(argv[1],argc == 2 ? O_RDONLY : O_WRONLY)) < 0)
diff -urN lilo-22.7.2/boot.c lilo-22.7.2-STEP/boot.c
--- lilo-22.7.2/boot.c	2005-10-04 10:41:44.000000000 +1300
+++ lilo-22.7.2-STEP/boot.c	2006-07-12 16:21:56.132031000 +1200
@@ -123,7 +123,7 @@
 # if 0
 							"  If your BIOS supports memory moves above 16M,\n"
 				"   then you may specify \"large-memory\" in the configuration file\n"
-				"   (/etc/lilo.conf)."
+				"   (/System/Settings/lilo.conf)."
 # else
 							"  It will be loaded in the highest memory as\n"
 				"   though the configuration file specified \"large-memory\" and it will\n"
@@ -211,9 +211,9 @@
 /* 
  *  Derive the name of the MBR from the partition name
  *  e.g.
- *   /dev/scsi/host2/bus0/target1/lun0/part2	=> disc
- *   /dev/sd/c0b0t0u0p7				=> c0b0t0u0
- *   /dev/sda11					=> sda
+ *   /System/Devices/scsi/host2/bus0/target1/lun0/part2	=> disc
+ *   /System/Devices/sd/c0b0t0u0p7				=> c0b0t0u0
+ *   /System/Devices/sda11					=> sda
  *
  * If table==0, do no check for primary partition; if table==1, check
  * that we started from a primary (1-4) partition.
@@ -230,7 +230,7 @@
     
     npart = stralloc(boot);
     part = strrchr(npart, '/');
-    if (!part++) die ("No '/' in partition/device name.");
+    if (!part++) die ("No '/' in partition/System/Devicesice name.");
     
     i = strlen(part);
     endptr = part + i - 1;
@@ -250,11 +250,11 @@
     else if (*endptr=='p' && isdigit(endptr[-1])) {
         *endptr = 0;  /* truncate the pNN part */
     }
-   /* test for old /dev/hda3 or /dev/sda11 */
+   /* test for old /System/Devices/hda3 or /System/Devices/sda11 */
     else if (endptr[-1]=='d' && endptr[-3]=='/' &&
     		(endptr[-2]=='h' || endptr[-2]=='s')
 #if 0
-		&& strstr(npart, "/dev/")
+		&& strstr(npart, "/System/Devices/")
 #endif
 	    ) {
         endptr[1] = 0;  /* truncate the NN part */
diff -urN lilo-22.7.2/bootsect.S lilo-22.7.2-STEP/bootsect.S
--- lilo-22.7.2/bootsect.S	2005-11-24 06:44:01.000000000 +1300
+++ lilo-22.7.2-STEP/bootsect.S	2006-07-12 16:22:00.076277500 +1200
@@ -251,7 +251,7 @@
 
 ! After that we check which root-device to use. If the device is
 ! defined (!= 0), nothing is done and the given device is used.
-! Otherwise, one of /dev/fd0H2880 (2,32) or /dev/PS0 (2,28) or /dev/at0 (2,8),
+! Otherwise, one of /System/Devices/fd0H2880 (2,32) or /System/Devices/PS0 (2,28) or /System/Devices/at0 (2,8),
 ! depending on the number of sectors we pretend to know we have.
 
 #if 0
@@ -261,16 +261,16 @@
 	jne	root_defined
 ;;	seg cs
 	mov	bx,sectors
-	mov	ax,#0x0208		! /dev/ps0 - 1.2Mb
+	mov	ax,#0x0208		! /System/Devices/ps0 - 1.2Mb
 	cmp	bx,#15
 	je	root_defined
-	mov	al,#0x1c		! /dev/PS0 - 1.44Mb
+	mov	al,#0x1c		! /System/Devices/PS0 - 1.44Mb
 	cmp	bx,#18
 	je	root_defined
-	mov	al,#0x20		! /dev/fd0H2880 - 2.88Mb
+	mov	al,#0x20		! /System/Devices/fd0H2880 - 2.88Mb
 	cmp	bx,#36
 	je	root_defined
-	mov	al,#0			! /dev/fd0 - autodetect
+	mov	al,#0			! /System/Devices/fd0 - autodetect
 root_defined:
 ;;	seg cs
 	mov	root_dev,ax
diff -urN lilo-22.7.2/bsect.c lilo-22.7.2-STEP/bsect.c
--- lilo-22.7.2/bsect.c	2006-07-06 04:02:14.000000000 +1200
+++ lilo-22.7.2-STEP/bsect.c	2006-07-12 16:21:56.484053000 +1200
@@ -844,7 +844,7 @@
     }
     if (!fetch() && (bios_map &
 #if VERSION_MINOR>=50
-    			bios_boot &	/* if 'boot=/dev/fd0', force write */
+    			bios_boot &	/* if 'boot=/System/Devices/fd0', force write */
 #endif
     				0x80)) {
 	bsect.par_1.prompt |= FLAG_BD_OKAY;
diff -urN lilo-22.7.2/cfg.c lilo-22.7.2-STEP/cfg.c
--- lilo-22.7.2/cfg.c	2005-11-24 12:03:19.000000000 +1300
+++ lilo-22.7.2-STEP/cfg.c	2006-07-12 16:21:56.688065750 +1200
@@ -622,7 +622,7 @@
     time_t conf;
     int fd;
     
-    strcpy(name, file_name);	/* copy name of config file '/etc/lilo.conf' */
+    strcpy(name, file_name);	/* copy name of config file '/System/Settings/lilo.conf' */
     strcat(name, PW_FILE_SUFFIX);
     pw_file_name = stralloc(name);
 #if 1
diff -urN lilo-22.7.2/CHANGES lilo-22.7.2-STEP/CHANGES
--- lilo-22.7.2/CHANGES	2006-07-06 03:58:05.000000000 +1200
+++ lilo-22.7.2-STEP/CHANGES	2006-07-12 16:21:54.835950000 +1200
@@ -105,7 +105,7 @@
   ---------
     - Update diagnostic 2.2.4 to 2.3; check EDD fn 4Eh subfunctions.
       (diagnose/test4.c)
-    - Update 'mkrescue' (2.5) to get root filesystem from /etc/fstab.
+    - Update 'mkrescue' (2.5) to get root filesystem from /System/Settings/fstab.
     - Update 'mkrescue --iso --size HD' to create a bootable El Torito
       format using hard disk emulation.  (mkrescue 3.0)
     - Add --image option to mkrescue.  (mkrescue 3.0)
@@ -122,7 +122,7 @@
     - allow 'timeout' & 'delay' to be specified in 's', 'm', or 'h'.
       (lilo.c, common.c)
     - change #include <asm/unistd.h> to <linux/unistd.h> (partition.c)
-    - alter 'new_serial' to seed from time & /dev/urandom  (device.c)
+    - alter 'new_serial' to seed from time & /System/Devices/urandom  (device.c)
     - address compilation issues with 2.6 kernels (2.6.6) and glibc
       versions 2.0 and 2.1++ (2.3.3).  (config.h, partition.h,
       partition.c)
@@ -187,7 +187,7 @@
     - Add "static-BIOS-codes" to bypass VolumeID booting.  (bsect.c,
 	device.c)
     - Add test for setup > MAX_SETUPSECS.    (boot.c)
-    - Open '/proc/partitions' before 'chroot' with -r flag  (lilo.c)
+    - Open '/System/Processes/partitions' before 'chroot' with -r flag  (lilo.c)
 
 
 Changes from version 22.5.7 to 22.5.7.2 (20-Aug-2003) John Coffman
@@ -325,7 +325,7 @@
   --------------
     - Compilation fix for lilo.c  (printf macro, again)
     - Updates to handle reiser4.  (geometry.c)
-    - Smart device caching if "/proc/partitions" is present. (device.c)
+    - Smart device caching if "/System/Processes/partitions" is present. (device.c)
     - '-M' switch creates a backup file subject to '-s' & '-S' (partition.c)
     - Fix "raid-extra-boot=" for devices outside of the raid set (bsect.c)
 
@@ -464,7 +464,7 @@
     - Add EVMS patches from Kevin Corry <corryk@us.ibm.com> 
       Enterprise Volume Management Project <evms-devel@lists.sf.net>
     - get UNSAFE to work on hard disks, too (geometry.c) with 
-      "disk=/dev/hdXX  bios=0x8X  inaccessible"
+      "disk=/System/Devices/hdXX  bios=0x8X  inaccessible"
     - allow BIOS_MAX_HEADS to be 256; 255 is the REAL max, but there
       are some oddball BIOS's which allow 256
 
@@ -522,7 +522,7 @@
     - Implement UNIFY (copy 2nd stage loader, bitmap, and/or message
       file into the map file).
     - Implement BUILTIN - first and second stage loaders, chain loaders,
-      and mbr loader is built into the /sbin/lilo executable.  No more
+      and mbr loader is built into the /System/AdminTools/lilo executable.  No more
       file incompatibilities.
     - Fill in bitmap file Location, Color, and Timer parameters from
       a header in the bitmap file; config file overrides; add utilities
@@ -1043,7 +1043,7 @@
   Map installer
   -------------
 
-    - DISK sections may now also define non-disk devices, e.g. /dev/ram
+    - DISK sections may now also define non-disk devices, e.g. /System/Devices/ram
     - increased debug level for the "Caching device ..." message
     - changed the chain loader format to allow sizes > 512 Bytes
     - chain loader now supports arbitrary drive mappings (option MAP-DRIVE)
@@ -1067,7 +1067,7 @@
     - didn't complain if image label was equal to alias
     - removed some ancient dead code
     - new option KEYTABLE to specify non-standard keyboard mappings
-    - PS/2 ESDI disk (/dev/eda and /dev/edb) support (by Andrew Kroll)
+    - PS/2 ESDI disk (/System/Devices/eda and /System/Devices/edb) support (by Andrew Kroll)
     - geometry.c:last_dev now only probes for the first two IDE disks
     - because chain.b is used for everything anyway, specifying the chain
       loader when booting from a driver other than the first one is no longer
@@ -1196,7 +1196,7 @@
     - changed LILO version numbers to always be of the form <number> instead
       of 0.<number>
     - README now also contains the version number
-    - make install  now strips /sbin/lilo instead of trying to strip /sbin
+    - make install  now strips /System/AdminTools/lilo instead of trying to strip /System/AdminTools
     - various bug fixes in QuickInst
     - added file VERSION containing the current version number and new
       make target  version  to rename ../lilo to ../lilo-<version>
@@ -1242,12 +1242,12 @@
 
     - user.tex is now compatible with LaTeX 2e (\textfont0 problem)
     - tech.tex now avoids \SetFigFont (LaTeX 2e again)
-    - /sbin/lilo is now optimized and stripped when installing
+    - /System/AdminTools/lilo is now optimized and stripped when installing
     - ASCIIfied "Booting basics" section
     - removed all references to the old directory structure
     - added description of LOCK in config file
     - updated FD TMC-1680 warning
-    - added reminder to re-run /sbin/lilo when modifying partition tables
+    - added reminder to re-run /System/AdminTools/lilo when modifying partition tables
     - updated list of kernel options
     - added detailed description of >2 disks and >1024 cylinders
     - added description of putting /boot on a DOS partition
@@ -1276,13 +1276,13 @@
 
     - fixed -R arguments handling bug
     - fixed -P argument handling bug
-    - fixed yet another recursion problem with /dev/fd -> /proc/self/fd
+    - fixed yet another recursion problem with /System/Devices/fd -> /System/Processes/self/fd
     - added option -D and configuration variable DEFAULT to specify the
-      default image without changing the oder of entries in /etc/lilo.conf
+      default image without changing the oder of entries in /System/Settings/lilo.conf
     - added configuration variable LOCK to make the specified command line the
       default for the following boots too
     - added disk geometry configuration in the general configuration file.
-      /etc/disktab is now considered obsolete.
+      /System/Settings/disktab is now considered obsolete.
     - added option -w and configuration variable NOWARN to disable some
       warnings
     - added warning when putting the boot sector on a non-boot disk
@@ -1295,8 +1295,8 @@
     - added support for variable-size setup segments as supported by kernels
       >= 1.1.43
     - restructured verbosity levels
-    - allowed escaping of backslashes in quoted strings (/etc/lilo.conf)
-    - /sbin/lilo -q -v  now displays all settings
+    - allowed escaping of backslashes in quoted strings (/System/Settings/lilo.conf)
+    - /System/AdminTools/lilo -q -v  now displays all settings
 
   Documentation and installation
   ------------------------------
@@ -1308,11 +1308,11 @@
     - lots of minor corrections and clarifications
     - added a copyright notice and adapted several comments
     - QuickInst: updated default kernel names
-    - QuickInst: now runs  /sbin/lilo -t  before trying to install
+    - QuickInst: now runs  /System/AdminTools/lilo -t  before trying to install
     - doc/Makefile: removed extra "Label(s) may have changed" output
     - disktab: changed header comment and added second example line
-    - /etc/disktab is no longer automatically created by  make install
-    - linking /etc/lilo/install -> /sbin/lilo is no longer suggested
+    - /System/Settings/disktab is no longer automatically created by  make install
+    - linking /System/Settings/lilo/install -> /System/AdminTools/lilo is no longer suggested
     - removed mkbindist. I don't think anybody used it anyway.
 
 
@@ -1325,7 +1325,7 @@
     - added a few missing closedirs to device.c:scan_dir
     - added detection of directory loops to device.c:scan_dir and
       geometry.c:last_dev
-    - fixed handling of dangling links in /dev
+    - fixed handling of dangling links in /System/Devices
     - new option -u [ device ] to restore boot sector. Unsafe mode with -U
     - fixed/improved usage message
 
@@ -1334,7 +1334,7 @@
 
     - QuickInst: did not write "other" sections to configuration file
     - QuickInst.new: improved handling of disks without active partitions
-    - QuickInst.new now knows about /etc/disktab (relict from Shoelace,
+    - QuickInst.new now knows about /System/Settings/disktab (relict from Shoelace,
       still in some distributions)
     - QuickInst.new now uses *_d.b chain loaders when configuring non-Linux
       systems on the second disk
@@ -1403,8 +1403,8 @@
   -------------
 
     - fixed stat/fstat when creating temporary devices.
-    - subdirectories of /dev are now recursively searched for disk devices
-      in addition to /dev
+    - subdirectories of /System/Devices are now recursively searched for disk devices
+      in addition to /System/Devices
     - devices are now counted by highest device number, not by name.
     - some minor fixes.
 
@@ -1438,7 +1438,7 @@
       option in OTHER.
     - fixed partition table checking.
     - new option -V to display the version number.
-    - INSTALL = /etc/lilo/boot.b  is now the default if INSTALL is
+    - INSTALL = /System/Settings/lilo/boot.b  is now the default if INSTALL is
       omitted.
     - new compile-time configuration option NOINSTDEF to restore the old
       semantics of INSTALL.
@@ -1481,7 +1481,7 @@
     - added automatic backup of the partition table when fixing it.
     - new configuration variables "readonly" and "read-write" to change
       read-only mounting of root.
-    - made partition offset field in /etc/lilo/disktab optional.
+    - made partition offset field in /System/Settings/lilo/disktab optional.
     - added tentative support for XT-type hard disks.
     - improved some error messages.
     - some minor fixes.
@@ -1490,7 +1490,7 @@
   ------------------------------
 
     - changed many "echo"s in QuickInst to "cat"s.
-    - suggesting using a symbolic link to lilo for /etc/lilo/install.
+    - suggesting using a symbolic link to lilo for /System/Settings/lilo/install.
     - removed the configuration option NOAUTO.
     - split the documentation in a user's guide and the technical
       overview.
@@ -1549,7 +1549,7 @@
     - added a test for broken regexp in sed, grep and egrep to
       QuickInst. Other minor improvements.
     - now uses build-time configuration variables in Makefile or
-      /etc/lilo/config.defines
+      /System/Settings/lilo/config.defines
     - copied section "LILO start messages" from doc.tex to README
     - removed the description of a floppy test installation from
       README. (doc.tex never contained that part.)
@@ -1584,7 +1584,7 @@
     - added detection of missing HDIO_REQ support.
     - added sanity checking for disk parameters.
     - fixed BIOS code computation for SCSI disks.
-    - command-line settings can now override /etc/lilo/config
+    - command-line settings can now override /System/Settings/lilo/config
     - defaults for ROOT, VGA, RAMDISK, PASSWORD and OPTIONAL can be set
       in the options section.
     - new option PROMPT to unconditionally enter the boot prompt.
@@ -1605,7 +1605,7 @@
     - wrote a README for the doc directory.
     - added descriptions of the configuration parameters passed in
       the boot sector and of the kernel's command-line interface.
-    - Makefile now explicitly uses /bin/sh
+    - Makefile now explicitly uses /System/Tools/sh
     - changed echo \c to echo -n in the Makefile
     - added ability to print the name of the active partition to
       activate.
@@ -1626,8 +1626,8 @@
   Map installer
   -------------
 
-    - new configuration based on /etc/lilo/config
-    - can get SCSI geometry without using /etc/lilo/disktab (doesn't
+    - new configuration based on /System/Settings/lilo/config
+    - can get SCSI geometry without using /System/Settings/lilo/disktab (doesn't
       work with 0.98pl6)
     - removed support for BIOS codes (name:code)
     - removed support for setting the swap device.
@@ -1718,7 +1718,7 @@
     - extended coverage of SCSI disks.
     - make install  now backs up chain.b and boot.b of any older LILO
       installation. (To say: your system remains bootable even if you
-      forget to run /etc/lilo/install after the update or if this fails
+      forget to run /System/Settings/lilo/install after the update or if this fails
       for some reason.)
     - moved the changes section from README into CHANGES.
     - a set of pre-compiled executables of lilo, boot.b, chain.b and
@@ -1767,7 +1767,7 @@
     - major rewrite.
     - files that contain "holes" are now handled properly.
     - added map compaction.
-    - devices are now created on the fly only if they can't be found in /dev.
+    - devices are now created on the fly only if they can't be found in /System/Devices.
     - improved sanity checking.
     - can now boot other operating systems.
     - can now boot unstripped kernel executables.
diff -urN lilo-22.7.2/checkit lilo-22.7.2-STEP/checkit
--- lilo-22.7.2/checkit	2005-10-07 11:27:37.000000000 +1300
+++ lilo-22.7.2-STEP/checkit	2006-07-12 16:21:55.195972500 +1200
@@ -1,4 +1,4 @@
-#! /bin/sh
+#! /System/Tools/sh
 #
 #  check:
 #	Test for correct versions of utilities
diff -urN lilo-22.7.2/config.h lilo-22.7.2-STEP/config.h
--- lilo-22.7.2/config.h	2005-09-04 11:56:24.000000000 +1200
+++ lilo-22.7.2-STEP/config.h	2006-07-15 00:28:19.006834750 +1200
@@ -19,11 +19,11 @@
 # warning "glibc version 2.1 or later is recommended"
 #endif /* !__MSDOS__ */
 
-#define TMP_DEV     "/tmp/dev.%d" /* temporary devices are created here */
+#define TMP_DEV     "/System/TemporaryFiles/Devices.%d" /* temporary devices are created here */
 #define MAX_TMP_DEV 50 /* highest temp. device number */
 
 #ifdef LCF_OLD_DIRSTR
-#define LILO_DIR    "/etc/lilo" /* base directory for LILO files */
+#define LILO_DIR    "/System/Settings/lilo" /* base directory for LILO files */
 #define BACKUP_DIR  LILO_DIR /* boot sector and partition table backups */
 #define DFL_CONFIG  LILO_DIR "/config" /* default configuration file */
 #define DFL_DISKTAB LILO_DIR "/disktab" /* LILO's disk parameter table */
@@ -33,8 +33,8 @@
 #define DFL_CHAIN   LILO_DIR "/chain.b" /* default chain loader */
 #define DFL_MBR	    LILO_DIR "/mbr.b"	/* default MBR */
 #else
-#define CFG_DIR	    "/etc"		/* location of configuration files */
-#define BOOT_DIR    "/boot"		/* location of boot files */
+#define CFG_DIR	    "/System/Settings"		/* location of configuration files */
+#define BOOT_DIR    "/System/Boot"		/* location of boot files */
 #define BACKUP_DIR  BOOT_DIR /* boot sector and partition table backups */
 #define DFL_CONFIG  CFG_DIR "/lilo.conf"/* default configuration file */
 #define DFL_DISKTAB CFG_DIR "/disktab"	/* LILO's disk parameter table */
@@ -46,7 +46,7 @@
 #define DFL_KEYTAB  BOOT_DIR "/us.ktl"	/* default keytable */
 #endif
 
-#define DEV_DIR	    "/dev" /* devices directory */
+#define DEV_DIR	    "/System/Devices" /* devices directory */
 
 #else /* MSDOS */
 #define CFG_DIR	    "C:\\ETC"		/* location of configuration files */
diff -urN lilo-22.7.2/device.c lilo-22.7.2-STEP/device.c
--- lilo-22.7.2/device.c	2005-10-08 06:52:16.000000000 +1300
+++ lilo-22.7.2-STEP/device.c	2006-07-12 16:21:57.032087250 +1200
@@ -156,7 +156,7 @@
     struct stat st;
    
     if (!yesno) {
-	if (stat("/dev/.devfsd", &st) < 0)  yesno=1;
+	if (stat("/System/Devices/.devfsd", &st) < 0)  yesno=1;
 	else yesno=2;
     }
    
@@ -201,7 +201,7 @@
 	if (dev->delete) {
 	    for (count = 0; count <= MAX_TMP_DEV; count++) {
 #ifdef LCF_USE_TMPDIR
-		if (!strncmp(TMP_DEV,"/tmp/",5) && getenv("TMPDIR")) {
+		if (!strncmp(TMP_DEV,"/System/TemporaryFiles/",5) && getenv("TMPDIR")) {
 		    strcpy(name,getenv("TMPDIR"));
 		    sprintf(name+strlen(name),TMP_DEV+4,count);
 		}
@@ -260,7 +260,7 @@
 	dev = MKDEV(major,(i<<4));
 #if 0
 	if (is_devfs()) {
-	    sprintf(tem,"/dev/scsi/host%d/bus0/target0/lun0/", i);
+	    sprintf(tem,"/System/Devices/scsi/host%d/bus0/target0/lun0/", i);
 	    strcat(strcpy(format,tem),"disc");
 	    cache_add(format, dev);
 	    strcat(strcpy(format,tem),"part%d");
@@ -295,7 +295,7 @@
     bus = i&1;
     host = i&(-2);
     if (is_devfs()) {
-	sprintf(tem2,"/dev/ide/host%d/bus%d/target%d/lun0/", host, bus, target);
+	sprintf(tem2,"/System/Devices/ide/host%d/bus%d/target%d/lun0/", host, bus, target);
 	strcat(strcpy(format,tem2), "part%d");
 	disc = strcat(tem2, "disc");
     }
@@ -324,54 +324,54 @@
 #endif
 
     if (is_devfs()) {
-	cache_add("/dev/floppy/0", 0x0200);
-	cache_add("/dev/floppy/1", 0x0201);
+	cache_add("/System/Devices/floppy/0", 0x0200);
+	cache_add("/System/Devices/floppy/1", 0x0201);
     }
     else {
-	cache_add("/dev/fd0", 0x0200);
-	cache_add("/dev/fd1", 0x0201);
+	cache_add("/System/Devices/fd0", 0x0200);
+	cache_add("/System/Devices/fd1", 0x0201);
     }
     
 #if 1
-    cache_ide("/dev/hdt", MAJOR_IDE10);
-    cache_ide("/dev/hds", MAJOR_IDE10);
-    cache_ide("/dev/hdr", MAJOR_IDE9);
-    cache_ide("/dev/hdq", MAJOR_IDE9);
-
-    cache_ide("/dev/hdp", MAJOR_IDE8);
-    cache_ide("/dev/hdo", MAJOR_IDE8);
-    cache_ide("/dev/hdn", MAJOR_IDE7);
-    cache_ide("/dev/hdm", MAJOR_IDE7);
+    cache_ide("/System/Devices/hdt", MAJOR_IDE10);
+    cache_ide("/System/Devices/hds", MAJOR_IDE10);
+    cache_ide("/System/Devices/hdr", MAJOR_IDE9);
+    cache_ide("/System/Devices/hdq", MAJOR_IDE9);
+
+    cache_ide("/System/Devices/hdp", MAJOR_IDE8);
+    cache_ide("/System/Devices/hdo", MAJOR_IDE8);
+    cache_ide("/System/Devices/hdn", MAJOR_IDE7);
+    cache_ide("/System/Devices/hdm", MAJOR_IDE7);
     
-    cache_ide("/dev/hdl", MAJOR_IDE6);
-    cache_ide("/dev/hdk", MAJOR_IDE6);
+    cache_ide("/System/Devices/hdl", MAJOR_IDE6);
+    cache_ide("/System/Devices/hdk", MAJOR_IDE6);
 #ifdef MAJOR_IDE5
-    cache_ide("/dev/hdj", MAJOR_IDE5);
-    cache_ide("/dev/hdi", MAJOR_IDE5);
+    cache_ide("/System/Devices/hdj", MAJOR_IDE5);
+    cache_ide("/System/Devices/hdi", MAJOR_IDE5);
 #endif
 #endif
     
     for (i = MAX; i >= 0; i--) {
-	sprintf(tmp, is_devfs() ? "/dev/md/%d" : "/dev/md%d", i);
+	sprintf(tmp, is_devfs() ? "/System/Devices/md/%d" : "/System/Devices/md%d", i);
 	cache_add(tmp, MKDEV(MAJOR_MD,i));
     }
 
-    if (!is_devfs()) cache_scsi("/dev/sda", MAJOR_SD);
+    if (!is_devfs()) cache_scsi("/System/Devices/sda", MAJOR_SD);
     
-    cache_ide("/dev/hdh", MAJOR_IDE4);
-    cache_ide("/dev/hdg", MAJOR_IDE4);
-    cache_ide("/dev/hdf", MAJOR_IDE3);
-    cache_ide("/dev/hde", MAJOR_IDE3);
+    cache_ide("/System/Devices/hdh", MAJOR_IDE4);
+    cache_ide("/System/Devices/hdg", MAJOR_IDE4);
+    cache_ide("/System/Devices/hdf", MAJOR_IDE3);
+    cache_ide("/System/Devices/hde", MAJOR_IDE3);
 
     for (i = 0; i <= 7; i++) {
-	sprintf(tmp, is_devfs() ? "/dev/loop/%d" : "/dev/loop%d", i);
+	sprintf(tmp, is_devfs() ? "/System/Devices/loop/%d" : "/System/Devices/loop%d", i);
 	cache_add(tmp,0x700+i);
     }
 
-    cache_ide("/dev/hdd", MAJOR_IDE2);
-    cache_ide("/dev/hdc", MAJOR_IDE2);
-    cache_ide("/dev/hdb", MAJOR_HD);
-    cache_ide("/dev/hda", MAJOR_HD);
+    cache_ide("/System/Devices/hdd", MAJOR_IDE2);
+    cache_ide("/System/Devices/hdc", MAJOR_IDE2);
+    cache_ide("/System/Devices/hdb", MAJOR_HD);
+    cache_ide("/System/Devices/hda", MAJOR_HD);
     
     verbose = vsave;
 }
@@ -430,7 +430,7 @@
 	    sprintf(temp_name, "%s/%s.%04X", backup_file, filename, device);
 	    backup_file = temp_name;
 	}
-    /* test for /dev/null */
+    /* test for /System/Devices/null */
 	else if (S_ISCHR(st.st_mode) && st.st_rdev==0x0103) return 0;
 	else if (!S_ISREG(st.st_mode))
 	    die("make_backup: %s not a directory or regular file", backup_file);
@@ -542,7 +542,7 @@
     if (!inited) {
 	struct stat st;
 	int fd, random;
-#define RANDOM "/dev/urandom"	
+#define RANDOM "/System/Devices/urandom"	
 
 	inited = time(NULL);
 	if ( stat(RANDOM, &st)==0 && S_ISCHR(st.st_mode)
@@ -746,7 +746,7 @@
 enum {INVALID=1, DUPLICATE=2, REGENERATE=3, NTCAUTION=4};
 
 struct VolumeMgmt {
-    char *name;		/* the name of the disk; e.g.  "/dev/hda" */
+    char *name;		/* the name of the disk; e.g.  "/System/Devices/hda" */
     unsigned int device;	/* the device number (major, minor) */
     int sort;		/* the device number used for sorting */
     int flag;		/* various flag bits */
@@ -899,10 +899,10 @@
 	name = next;
 	while (*name && !isspace(*name)) name++;
 	*name = 0;
-	if (strncmp("/dev/", next, 5) != 0) name = next-5;
+	if (strncmp("/System/Devices/", next, 5) != 0) name = next-5;
 	else name = next;
 	if (*name=='/') name++;
-	strncpy(name, "/dev/", 5);
+	strncpy(name, "/System/Devices/", 5);
 	if (verbose>=5) {
 	    printf("pf_hard_disk_scan: (%d,%d) %s\n", major, minor, name);
 	}
@@ -913,15 +913,15 @@
 	if (stat(name, &st) < 0) {
 	    dev_open(&Dev, device, O_BYPASS);
 	    if (!warned) {
-		warn("'" PARTITIONS "' does not match '/dev' directory structure.\n"
+		warn("'" PARTITIONS "' does not match '/System/Devices' directory structure.\n"
 				"    Name change: '%s' -> '%s'%s"
 				,	name, Dev.name,
 				slashes(name) > 3 && slashes(Dev.name) < 3 ? "\n"
 				"    The kernel was compiled with DEVFS_FS, but 'devfs=mount' was omitted\n"
-				"        as a kernel command-line boot parameter; hence, the '/dev' directory\n"
+				"        as a kernel command-line boot parameter; hence, the '/System/Devices' directory\n"
 				"        structure does not reflect DEVFS_FS device names."
 			:	slashes(name) < 3 && slashes(Dev.name) > 3 ? "\n"
-				"    The kernel was compiled without DEVFS, but the '/dev' directory structure\n"
+				"    The kernel was compiled without DEVFS, but the '/System/Devices' directory structure\n"
 				"        implements the DEVFS filesystem."
 			:
 				""
@@ -933,7 +933,7 @@
 	    }
 	    name = Dev.name;
 	    if (Dev.delete) {
-	        warn("'/dev' directory structure is incomplete; device (%d, %d) is missing.",
+	        warn("'/System/Devices' directory structure is incomplete; device (%d, %d) is missing.",
 	    			major, minor);
 	    	cache_add(name, device);
 	    }
@@ -979,8 +979,8 @@
 		if (ndevs>=MAX_DEVICES) {
 		    die("More than %d hard disks are listed in '" PARTITIONS "'.\n"
 			"    Disks beyond the %dth must be marked:\n"
-			"        disk=/dev/XXXX  inaccessible\n"
-			"    in the configuration file (/etc/lilo.conf).\n"
+			"        disk=/System/Devices/XXXX  inaccessible\n"
+			"    in the configuration file (/System/Settings/lilo.conf).\n"
 			, MAX_DEVICES, MAX_DEVICES);
 		}
 		else
@@ -1339,7 +1339,7 @@
 
     if (bios > ndevs)
 	warn("BIOS device code 0x%02X is used (>0x%02X).  It indicates more disks\n"
-			"  than those represented in '/proc/partitions' having actual partitions.\n"
+			"  than those represented in '/System/Processes/partitions' having actual partitions.\n"
 			"  Booting results may be unpredictable.", bios+0x80, ndevs+0x80-1);
 
 
diff -urN lilo-22.7.2/device.h lilo-22.7.2-STEP/device.h
--- lilo-22.7.2/device.h	2005-09-25 14:12:35.000000000 +1200
+++ lilo-22.7.2-STEP/device.h	2006-07-12 16:21:55.571996000 +1200
@@ -26,7 +26,7 @@
 
 int dev_open(DEVICE *dev,int number,int flags);
 
-/* Searches /dev for a block device with the specified number. If no device
+/* Searches /System/Devices for a block device with the specified number. If no device
    can be found, a temporary device is created. The device is opened with
    the specified access mode and the file descriptor is returned. If flags
    are -1, the device is not opened. */
@@ -68,7 +68,7 @@
 
 
 int pf_hard_disk_scan(void);
-/* scan /proc/partitions for devices & partitions */
+/* scan /System/Processes/partitions for devices & partitions */
 
 int yesno(char *prompt, int expect);
 /* prompt the user for a yes/no response */
diff -urN lilo-22.7.2/diagnose/Makefile lilo-22.7.2-STEP/diagnose/Makefile
--- lilo-22.7.2/diagnose/Makefile	2005-09-24 05:24:33.000000000 +1200
+++ lilo-22.7.2-STEP/diagnose/Makefile	2006-07-12 16:22:05.048588250 +1200
@@ -11,8 +11,8 @@
 AOPT = -0 -a -w
 FD = msdos.b
 FDSIZE = 1440
-MFILE=/tmp/liloboot
-LOOP=/dev/loop5
+MFILE=/System/TemporaryFiles/liloboot
+LOOP=/System/Devices/loop5
 
 .SUFFIXES:	.com .S
 
@@ -28,7 +28,7 @@
 all:	check test4d.com test4.com bootdiagnostic.b.gz test5.com
 
 check:	
-	@if [ -x /usr/bin/bcc -o -x /usr/local/bin/bcc ]; then echo Okay; \
+	@if [ -x /System/Tools/bcc -o -x /usr/local/System/Tools/bcc ]; then echo Okay; \
 	else echo; echo "You don't seem to have the 'bcc' compiler from the 'dev86' package."; \
 		echo; exit 1; fi
 
@@ -37,17 +37,17 @@
 	@echo Insert a blank, formatted, floppy into drive 0
 	@echo "Press <Enter> to continue, <^C> to abort ..."
 	@read
-	gzip -d <bootdiagnostic.b.gz | dd of=/dev/fd0 bs=1024
+	gzip -d <bootdiagnostic.b.gz | dd of=/System/Devices/fd0 bs=1024
 
 bootdiagnostic.b.gz:	sector.b test4.com test4d.com
 	rm -rf $(MFILE) bootdiagnostic.b
 	mkdir $(MFILE)
-	dd if=/dev/zero of=bootdiagnostic.b bs=1024 count=$(FDSIZE)
+	dd if=/System/Devices/zero of=bootdiagnostic.b bs=1024 count=$(FDSIZE)
 	mkfs.msdos bootdiagnostic.b
 	dd if=sector.b bs=2 count=1 of=floppy.b
 	dd if=bootdiagnostic.b bs=2 skip=1 count=30 >>floppy.b
 	dd if=sector.b bs=2 skip=31 count=225 >>floppy.b
-#	umount $(MFILE) 2>/dev/null
+#	umount $(MFILE) 2>/System/Devices/null
 	mount -t msdos -o loop=$(LOOP) bootdiagnostic.b $(MFILE)
 	dd if=floppy.b of=$(LOOP) bs=512
 	chown 0.0 *.com
diff -urN lilo-22.7.2/diagnose/README.diagnostic lilo-22.7.2-STEP/diagnose/README.diagnostic
--- lilo-22.7.2/diagnose/README.diagnostic	2002-05-04 13:53:22.000000000 +1200
+++ lilo-22.7.2-STEP/diagnose/README.diagnostic	2006-07-12 16:22:05.044588000 +1200
@@ -9,7 +9,7 @@
 following commands:
 
 	gunzip bootdiagnostic.b.gz
-	dd if=bootdiagnostic.b of=/dev/fd0
+	dd if=bootdiagnostic.b of=/System/Devices/fd0
 
 The entire 1.44M floppy disk will be written.  This is an msdos filesystem
 diskette with the files:
diff -urN lilo-22.7.2/doc/Makefile lilo-22.7.2-STEP/doc/Makefile
--- lilo-22.7.2/doc/Makefile	2005-10-07 07:49:44.000000000 +1300
+++ lilo-22.7.2-STEP/doc/Makefile	2006-07-12 16:22:05.704629250 +1200
@@ -1,7 +1,7 @@
 LATEX=latex
 RLATEX=./rlatex
 FIG2DEV=fig2dev
-SHELL=/bin/sh
+SHELL=/System/Tools/sh
 
 IMAGES=bootloader.tex map.tex image.tex parameter.tex other.tex
 
diff -urN lilo-22.7.2/doc/README lilo-22.7.2-STEP/doc/README
--- lilo-22.7.2/doc/README	1997-06-19 01:47:54.000000000 +1200
+++ lilo-22.7.2-STEP/doc/README	2006-07-12 16:22:05.700629000 +1200
@@ -45,7 +45,7 @@
 converting the DVI file to PostScript as an intermediate step, use this
 command
 
-dvips -r1 -f1 user | gs -q -sDEVICE=deskjet -sOutputFile=/dev/lp1 -
+dvips -r1 -f1 user | gs -q -sDEVICE=deskjet -sOutputFile=/System/Devices/lp1 -
 
 gs -h  lists all configured drivers.)
 
diff -urN lilo-22.7.2/doc/rlatex lilo-22.7.2-STEP/doc/rlatex
--- lilo-22.7.2/doc/rlatex	1997-04-30 18:36:34.000000000 +1200
+++ lilo-22.7.2-STEP/doc/rlatex	2006-07-12 16:22:08.120780250 +1200
@@ -1,20 +1,20 @@
-#!/bin/sh
+#!/System/Tools/sh
 while true; do
     pid=$$
     export pid
-    rm -f /tmp/rlok$pid
+    rm -f /System/TemporaryFiles/rlok$pid
     (
         if latex $*; then
-	    touch /tmp/rlok$pid
+	    touch /System/TemporaryFiles/rlok$pid
 	fi
-    ) | tee /tmp/rlso$pid
-    if [ ! -f /tmp/rlok$pid ]; then
-	rm -f /tmp/rlso$pid
+    ) | tee /System/TemporaryFiles/rlso$pid
+    if [ ! -f /System/TemporaryFiles/rlok$pid ]; then
+	rm -f /System/TemporaryFiles/rlso$pid
 	exit 1
     fi
-    if grep '^LaTeX Warning: Label(s) may' /tmp/rlso$pid >/dev/null; then :
+    if grep '^LaTeX Warning: Label(s) may' /System/TemporaryFiles/rlso$pid >/System/Devices/null; then :
     else
-	rm -f /tmp/rlso$pid
+	rm -f /System/TemporaryFiles/rlso$pid
 	exit 0
     fi
     echo "Re-running LaTeX"
diff -urN lilo-22.7.2/doc/t2a.pl lilo-22.7.2-STEP/doc/t2a.pl
--- lilo-22.7.2/doc/t2a.pl	1997-06-21 04:21:51.000000000 +1200
+++ lilo-22.7.2-STEP/doc/t2a.pl	2006-07-12 16:22:09.236850000 +1200
@@ -1,4 +1,4 @@
-#!/usr/bin/perl
+#!/System/Tools/perl
 #
 # Copyright 1994-1996 Werner Almesberger.
 # All rights reserved.
diff -urN lilo-22.7.2/doc/user.tex lilo-22.7.2-STEP/doc/user.tex
--- lilo-22.7.2/doc/user.tex	2005-02-10 12:09:39.000000000 +1300
+++ lilo-22.7.2-STEP/doc/user.tex	2006-07-12 16:22:08.064776750 +1200
@@ -283,13 +283,13 @@
     correspond to what you think it should do.
   \item Make sure you have an emergency boot disk, that you know how to
     use it, and that it is always kept up to date.
-  \item Run \path{/sbin/lilo} \emphasize{whenever} the kernel or any part
+  \item Run \path{/System/AdminTools/lilo} \emphasize{whenever} the kernel or any part
     of \LILO, including its configuration file, has changed. When in doubt,
-    run it. You can't run \path{/sbin/lilo} too many times.
+    run it. You can't run \path{/System/AdminTools/lilo} too many times.
   \item If performing a destructive upgrade and/or erasing your Linux
     partitions, de-install \LILO\ \emphasize{before} that if using it as the
     MBR.
-  \item Don't trust setup scripts. Always verify the \path{/etc/lilo.conf}
+  \item Don't trust setup scripts. Always verify the \path{/System/Settings/lilo.conf}
     they create before booting.
   \item If using a big disk, be prepared for inconveniences: you may have
     to use the \craw{linear} option.
@@ -305,19 +305,19 @@
   \item[The map installer] is the program you run under Linux to put all
     files belonging to \LILO\ at the appropriate places and to record
     information about the location of data needed at boot time. This program
-    normally resides in \path{/sbin/lilo}. It has to be run to refresh that
+    normally resides in \path{/System/AdminTools/lilo}. It has to be run to refresh that
     information whenever any part of the system that \LILO\ knows about
     changes, e.g. after installing a new kernel.
   \item[Various files] contain data \LILO\ needs at boot time, e.g. the
     boot loader. Those files normally reside in \path{/boot}. The most
     important files are the boot loader (see below) and the map file
-    (\path{/boot/map}), where the map installer records the location of
+    (\path{/System/Boot/map}), where the map installer records the location of
     the kernel(s).\footnote{\LILO\ does not know how to read a file system.
     Instead, the map installer asks the kernel for the physical location of
     files (e.g. the kernel image(s)) and records that information. This
     allows \LILO\ to work with most file systems that are supported by
     Linux.} Another important file is the configuration file, which is
-    normally called \path{/etc/lilo.conf}
+    normally called \path{/System/Settings/lilo.conf}
   \item[The boot loader] is the part of \LILO\ that is loaded by the BIOS
     and that loads kernels or the boot sectors of other operating systems.
     It also provides a simple command-line interface to interactively
@@ -333,7 +333,7 @@
     as the boot sector, the \path{/boot} directory, and the kernels.
   \item[The boot sector] contains the first part of \LILO's boot loader. It
     loads the much larger second-stage loader. Both loaders are typically
-    stored in the file \path{/boot/boot.b}
+    stored in the file \path{/System/Boot/boot.b}
   \item[The kernel] is loaded and started by the boot loader. Kernels
     typically reside in the root directory or in \path{/boot}.
 \end{description}
@@ -384,7 +384,7 @@
 %;    +---------------------------+
 %:\end{verbatim}
 
-The entire disk appears as one device (e.g. \path{/dev/fd0}) on Linux.
+The entire disk appears as one device (e.g. \path{/System/Devices/fd0}) on Linux.
 
 The MS-DOS boot sector has the following structure:
 
@@ -445,12 +445,12 @@
 $$
 \begin{tabular}{|l|l|l|}
   \hline
-  \multicolumn{3}{|l|}{Partition table\hbox to 2in{\hfil\tt /dev/hda~}} \\
+  \multicolumn{3}{|l|}{Partition table\hbox to 2in{\hfil\tt /System/Devices/hda~}} \\
   \cline{2-3}
-  & \multicolumn{2}{l|}{Partition 1\hfill {\tt /dev/hda1}} \\
+  & \multicolumn{2}{l|}{Partition 1\hfill {\tt /System/Devices/hda1}} \\
   & \multicolumn{2}{l|}{} \\
   \cline{2-3}
-  & \multicolumn{2}{l|}{Partition 2\hfill {\tt /dev/hda2}} \\
+  & \multicolumn{2}{l|}{Partition 2\hfill {\tt /System/Devices/hda2}} \\
   & \multicolumn{2}{l|}{} \\
   \hline
 \end{tabular}
@@ -458,42 +458,42 @@
 %%endskip
 %:\begin{verbatim}
 %;+--------------------------------------------+
-%;| Partition table                  /dev/hda  |
+%;| Partition table                  /System/Devices/hda  |
 %;| +------------------------------------------|
-%;| | Partition 1                    /dev/hda1 |
+%;| | Partition 1                    /System/Devices/hda1 |
 %;| |                                          |
 %;| |------------------------------------------|
-%;| | Partition 2                    /dev/hda2 |
+%;| | Partition 2                    /System/Devices/hda2 |
 %;| |                                          |
 %;+--------------------------------------------+
 %:\end{verbatim}
 
-The entire disk can be accessed as \path{/dev/hda}, \path{/dev/hdb},
-\path{/dev/sda}, etc. The primary partitions are \path{/dev/hda1 $\ldots$
-/dev/hda4}.
+The entire disk can be accessed as \path{/System/Devices/hda}, \path{/System/Devices/hdb},
+\path{/System/Devices/sda}, etc. The primary partitions are \path{/System/Devices/hda1 $\ldots$
+/System/Devices/hda4}.
 
 %%beginskip
 $$
 \begin{tabular}{|l|l|l|}
   \hline
-  \multicolumn{3}{|l|}{Partition table\hbox to 2in{\hfil\tt /dev/hda~}} \\
+  \multicolumn{3}{|l|}{Partition table\hbox to 2in{\hfil\tt /System/Devices/hda~}} \\
   \cline{2-3}
-  & \multicolumn{2}{l|}{Partition 1\hfill {\tt /dev/hda1}} \\
+  & \multicolumn{2}{l|}{Partition 1\hfill {\tt /System/Devices/hda1}} \\
   & \multicolumn{2}{l|}{} \\
   \cline{2-3}
-  & \multicolumn{2}{l|}{Partition 2\hfill {\tt /dev/hda2}} \\
+  & \multicolumn{2}{l|}{Partition 2\hfill {\tt /System/Devices/hda2}} \\
   & \multicolumn{2}{l|}{} \\
   \cline{2-3}
-  & \multicolumn{2}{l|}{Extended partition\hfill {\tt /dev/hda3}} \\
+  & \multicolumn{2}{l|}{Extended partition\hfill {\tt /System/Devices/hda3}} \\
   \cline{3-3}
   & & Extended partition table \\
   \cline{3-3}
-  & & Partition 3\hfill {\tt /dev/hda5}\\
+  & & Partition 3\hfill {\tt /System/Devices/hda5}\\
   & & \\
   \cline{3-3}
   & & Extended partition table \\
   \cline{3-3}
-& & Partition 4\hfill {\tt /dev/hda6}\\
+& & Partition 4\hfill {\tt /System/Devices/hda6}\\
   & & \\
   \hline
 \end{tabular}
@@ -501,31 +501,31 @@
 %%endskip
 %:\begin{verbatim}
 %;+--------------------------------------------+
-%;| Partition table                  /dev/hda  |
+%;| Partition table                  /System/Devices/hda  |
 %;| +------------------------------------------|
-%;| | Partition 1                    /dev/hda1 |
+%;| | Partition 1                    /System/Devices/hda1 |
 %;| |                                          |
 %;| |------------------------------------------|
-%;| | Partition 2                    /dev/hda2 |
+%;| | Partition 2                    /System/Devices/hda2 |
 %;| |                                          |
 %;| |------------------------------------------|
-%;| | Extended partition             /dev/hda3 |
+%;| | Extended partition             /System/Devices/hda3 |
 %;| | +----------------------------------------|
 %;| | | Extended partition table               |
 %;| | |----------------------------------------|
-%;| | | Partition 3                  /dev/hda5 |
+%;| | | Partition 3                  /System/Devices/hda5 |
 %;| | |                                        |
 %;| | |----------------------------------------|
 %;| | | Extended partition table               |
 %;| | |----------------------------------------|
-%;| | | Partition 4                  /dev/hda6 |
+%;| | | Partition 4                  /System/Devices/hda6 |
 %;| | |                                        |
 %;+--------------------------------------------+
 %:\end{verbatim}
 
 This hard disk has two primary partitions and an extended partition
 that contains two logical partitions. They are accessed as
-\path{/dev/hda5 $\ldots$}
+\path{/System/Devices/hda5 $\ldots$}
 
 Note that the partition tables of logical partitions are not accessible
 as the first blocks of some devices, while the main partition table,
@@ -572,12 +572,12 @@
 Therefore, the \LILO\ boot sector can be stored at the following locations:
 
 \begin{itemize}
-  \item boot sector of a Linux floppy disk. (\path{/dev/fd0}, $\ldots$)
-  \item MBR of the first hard disk. (\path{/dev/hda}, \path{/dev/sda}, $\ldots$)
+  \item boot sector of a Linux floppy disk. (\path{/System/Devices/fd0}, $\ldots$)
+  \item MBR of the first hard disk. (\path{/System/Devices/hda}, \path{/System/Devices/sda}, $\ldots$)
   \item boot sector of a primary Linux file system partition on the first hard
-    disk. (\path{/dev/hda1}, $\ldots$)
+    disk. (\path{/System/Devices/hda1}, $\ldots$)
   \item partition boot sector of an extended partition on the first hard disk.
-    (\path{/dev/hda1}, $\ldots$)\footnote{Most FDISK-type programs don't
+    (\path{/System/Devices/hda1}, $\ldots$)\footnote{Most FDISK-type programs don't
       believe in booting from an extended partition and refuse to
       activate it. \LILO\ is accompanied by a simple program
       (\name{activate}) that doesn't have this restriction. Linux \name{fdisk}
@@ -765,10 +765,10 @@
 \begin{itemize}
   \item boot Linux.
   \item make a backup copy of your MBR on a floppy disk, e.g. \\
-    \verb"dd if=/dev/hda of=/fd/MBR bs=512 count=1"
+    \verb"dd if=/System/Devices/hda of=/fd/MBR bs=512 count=1"
   \item install \LILO\ with the boot sector on the Linux partition.
   \item install \name{BOOTACTV} as the MBR, e.g. \\
-    \verb"dd if=bootactv.bin of=/dev/hda bs=446 count=1"
+    \verb"dd if=bootactv.bin of=/System/Devices/hda bs=446 count=1"
   \item reboot.
 \end{itemize}
 
@@ -776,7 +776,7 @@
 \begin{itemize}
   \item boot Linux.
   \item restore the old MBR, e.g. \\
-    \verb"dd if=/MBR of=/dev/hda bs=446 count=1" \\
+    \verb"dd if=/MBR of=/System/Devices/hda bs=446 count=1" \\
     or \verb"FDISK /MBR" under MS-DOS.
 \end{itemize}
 
@@ -788,8 +788,8 @@
 
 Example:
 \begin{verbatim}
-# dd if=/dev/hda of=/dev/hda3 bs=512 count=1
-# dd if=bootactv.bin of=/dev/hda3 bs=446 count=1
+# dd if=/System/Devices/hda of=/System/Devices/hda3 bs=512 count=1
+# dd if=bootactv.bin of=/System/Devices/hda3 bs=446 count=1
 \end{verbatim}
 
 \emphasize{WARNING:} Whenever the disk is re-partitioned, the merged boot
@@ -825,7 +825,7 @@
 \begin{itemize}
   \item boot Linux.
   \item make a backup copy of your MBR on a floppy disk, e.g. \\
-    \verb"dd if=/dev/hda of=/fd/MBR bs=512 count=1"
+    \verb"dd if=/System/Devices/hda of=/fd/MBR bs=512 count=1"
   \item install \LILO\ with its boot sector as the MBR.
   \item reboot.
 \end{itemize}
@@ -834,7 +834,7 @@
 \begin{itemize}
   \item boot Linux.
   \item restore the old MBR, e.g. \\
-    \verb"dd if=/fd/MBR of=/dev/hda bs=446 count=1"
+    \verb"dd if=/fd/MBR of=/System/Devices/hda bs=446 count=1"
 \end{itemize}
 
 If you've installed \LILO\ as the master boot record, you have to
@@ -865,7 +865,7 @@
     configuration switcher, like BOOT.SYS.\footnote{
       \name{LOADLIN} is available for anonymous FTP from \\
       \path{ftp://tsx-11.mit.edu/pub/linux/dos\_utils/lodlin\meta{n}.tar.gz} \\
-      \path{ftp://sunsite.unc.edu/pub/Linux/system/boot/dualboot/lodlin\meta{n}%
+      \path{ftp://sunsite.unc.edu/pub/Linux/system/System/Boot/dualboot/lodlin\meta{n}%
 .tgz} \\
       \name{BOOT.SYS} is available for anonymous FTP from \\
       \path{ftp://ftp.funet.fi/pub/Linux/tools/boot142.zip}}
@@ -875,7 +875,7 @@
       \LILO\ can be found in \\
       \path{ftp://tsx-11.mit.edu/pub/linux/packages/lilo/lilo-\meta{n}.tar.gz}
 	\\
-      \path{ftp://sunsite.unc.edu/pub/Linux/system/boot/lilo/lilo-%
+      \path{ftp://sunsite.unc.edu/pub/Linux/system/System/Boot/lilo/lilo-%
 \meta{n}.tar.gz} \\
       \path{ftp://lrcftp.epfl.ch/pub/linux/local/lilo/lilo-\meta{n}.tar.gz}}
   \item[``BOOTACTV''] permits interactive selection of the partition from
@@ -900,27 +900,27 @@
 into an existing system remains. The following sections describe various
 possible cases. See also section \ref{broken}.
 
-The configuration file \path{/etc/lilo.conf} for the examples
+The configuration file \path{/System/Settings/lilo.conf} for the examples
 could look like this:
 
 \begin{verbatim}
-boot = /dev/hda2
+boot = /System/Devices/hda2
 compact
 image = /vmlinuz
 image = /vmlinuz.old
-other = /dev/hda1
-  table = /dev/hda
+other = /System/Devices/hda1
+  table = /System/Devices/hda
   label = msdos
 \end{verbatim}
 
 It installs a Linux kernel image (\path{/vmlinuz}),
 an alternate Linux kernel image (\path{/vmlinuz.old}) and
-a chain loader to boot MS-DOS from \path{/dev/hda1}. The option \craw{compact}
+a chain loader to boot MS-DOS from \path{/System/Devices/hda1}. The option \craw{compact}
 on the second line instructs the map installer to optimize loading.
 
 In all examples, the names of the IDE-type hard disk devices
-(\path{/dev/hda$\ldots$}) are used. Everything applies to other disk types
-(e.g. SCSI disks; \path{/dev/sda$\ldots$}) too.
+(\path{/System/Devices/hda$\ldots$}) are used. Everything applies to other disk types
+(e.g. SCSI disks; \path{/System/Devices/sda$\ldots$}) too.
 
 
 \subsubsection{BIOS restrictions}
@@ -977,8 +977,8 @@
 
 \LILO\ depends on the BIOS to load the following items:
 \begin{itemize}
-  \item \path{/boot/boot.b}
-  \item \path{/boot/map} (created when running \path{/sbin/lilo})
+  \item \path{/System/Boot/boot.b}
+  \item \path{/System/Boot/map} (created when running \path{/System/AdminTools/lilo})
   \item all kernels
   \item the boot sectors of all other operating systems it boots
   \item the startup message, if one has been defined
@@ -1007,22 +1007,22 @@
 $$
   \begin{tabular}{r|c|c|}
     \cline{2-3}
-    & \multicolumn{2}{|l|}{MBR\hbox to 1.3in{\hfill\tt /dev/hda~}} \\
+    & \multicolumn{2}{|l|}{MBR\hbox to 1.3in{\hfill\tt /System/Devices/hda~}} \\
     \cline{3-3}
-    & & MS-DOS\hfill\tt /dev/hda1 \\
+    & & MS-DOS\hfill\tt /System/Devices/hda1 \\
     \cline{3-3}
-    $\rightarrow$ & & Linux {\tt /}\hfill\tt /dev/hda2 \\
+    $\rightarrow$ & & Linux {\tt /}\hfill\tt /System/Devices/hda2 \\
     \cline{2-3}
   \end{tabular}
 $$
 %%endskip
 %:\begin{verbatim}
 %;    +--------------------------+
-%;    | MBR            /dev/hda  |
+%;    | MBR            /System/Devices/hda  |
 %;    | +------------------------|
-%;    | | MS-DOS       /dev/hda1 |
+%;    | | MS-DOS       /System/Devices/hda1 |
 %;    | |------------------------|
-%;--> | | Linux /      /dev/hda2 |
+%;--> | | Linux /      /System/Devices/hda2 |
 %;    +--------------------------+
 %:\end{verbatim}
 
@@ -1042,35 +1042,35 @@
 $$
   \begin{tabular}{r|c|c|c|}
     \cline{2-4}
-    & \multicolumn{3}{|l|}{MBR\hbox to 1.3in{\hfill\tt /dev/hda~}} \\
+    & \multicolumn{3}{|l|}{MBR\hbox to 1.3in{\hfill\tt /System/Devices/hda~}} \\
     \cline{3-4}
-    & & \multicolumn{2}{|l|}{MS-DOS\hfill\tt /dev/hda1} \\
+    & & \multicolumn{2}{|l|}{MS-DOS\hfill\tt /System/Devices/hda1} \\
     \cline{3-4}
-    $\rightarrow$ & & \multicolumn{2}{|l|}{Extended\hfill\tt /dev/hda2} \\
+    $\rightarrow$ & & \multicolumn{2}{|l|}{Extended\hfill\tt /System/Devices/hda2} \\
     \cline{4-4}
-    & & & Linux\hfill\tt /dev/hda5 \\
+    & & & Linux\hfill\tt /System/Devices/hda5 \\
     \cline{4-4}
-    & & & $\ldots$\hfill\tt /dev/hda6 \\
+    & & & $\ldots$\hfill\tt /System/Devices/hda6 \\
     \cline{2-4}
   \end{tabular}
 $$
 %%endskip
 %:\begin{verbatim}
 %;    +--------------------------+
-%;    | MBR            /dev/hda  |
+%;    | MBR            /System/Devices/hda  |
 %;    | +------------------------|
-%;    | | MS-DOS       /dev/hda1 |
+%;    | | MS-DOS       /System/Devices/hda1 |
 %;    | |------------------------|
-%;--> | | Extended     /dev/hda2 |
+%;--> | | Extended     /System/Devices/hda2 |
 %;    | | +----------------------|
-%;    | | | Linux      /dev/hda5 |
+%;    | | | Linux      /System/Devices/hda5 |
 %;    | | |----------------------|
-%;    | | | ...        /dev/hda6 |
+%;    | | | ...        /System/Devices/hda6 |
 %;    +--------------------------+
 %:\end{verbatim}
 
 Because many disk partitioning programs refuse to make an extended
-partition (in our example \path{/dev/hda2}) active, you might have to
+partition (in our example \path{/System/Devices/hda2}) active, you might have to
 use \name{activate}, which comes with the \LILO\ distribution.
 
 OS/2 BootManager should be able to boot \LILO\ boot sectors from logical
@@ -1085,8 +1085,8 @@
 disk and the second disk is used later in the boot process.
 
 Only the location of the boot sector matters -- everything
-else (\path{/boot/boot.b},
-\path{/boot/map}, the root file system, a swap partition, other
+else (\path{/System/Boot/boot.b},
+\path{/System/Boot/map}, the root file system, a swap partition, other
 Linux file systems, etc.) can be located anywhere on the second disk,
 provided that the constraints described in section \ref{broken} are met.
 
@@ -1107,18 +1107,18 @@
       \multicolumn{1}{r}{\qquad}
       & \multicolumn{2}{c}{\bf Second disk} \\
     \cline{2-4}\cline{6-7}
-    & \multicolumn{3}{|l|}{MBR\hbox to 1.3in{\hfill\tt /dev/hda~}} &
-      & \multicolumn{2}{|l|}{MBR\hbox to 1.3in{\hfill\tt /dev/hdb~}} \\
+    & \multicolumn{3}{|l|}{MBR\hbox to 1.3in{\hfill\tt /System/Devices/hda~}} &
+      & \multicolumn{2}{|l|}{MBR\hbox to 1.3in{\hfill\tt /System/Devices/hdb~}} \\
     \cline{3-4}\cline{7-7}
-    & & \multicolumn{2}{|l|}{MS-DOS\hfill\tt /dev/hda1} &
-      & & Linux\hfill\tt /dev/hdb1 \\
+    & & \multicolumn{2}{|l|}{MS-DOS\hfill\tt /System/Devices/hda1} &
+      & & Linux\hfill\tt /System/Devices/hdb1 \\
     \cline{3-4}\cline{7-7}
-    $\rightarrow$ & & \multicolumn{2}{|l|}{Extended\hfill\tt /dev/hda2} &
-      & & $\ldots$\hfill\tt /dev/hdb2 \\
+    $\rightarrow$ & & \multicolumn{2}{|l|}{Extended\hfill\tt /System/Devices/hda2} &
+      & & $\ldots$\hfill\tt /System/Devices/hdb2 \\
     \cline{4-4}
-    & & & $\ldots$\hfill\tt /dev/hda5 & & & \\
+    & & & $\ldots$\hfill\tt /System/Devices/hda5 & & & \\
     \cline{4-4}
-    & & & $\ldots$\hfill\tt /dev/hda6 & & & \\
+    & & & $\ldots$\hfill\tt /System/Devices/hda6 & & & \\
     \cline{2-4}\cline{6-7}
   \end{tabular}
 $$
@@ -1126,15 +1126,15 @@
 %:\begin{verbatim}
 %4             FIRST DISK                     SECOND DISK
 %4    +--------------------------+    +--------------------------+
-%4    | MBR            /dev/hda  |    | MBR            /dev/hdb  |
+%4    | MBR            /System/Devices/hda  |    | MBR            /System/Devices/hdb  |
 %4    | +------------------------|    | +------------------------|
-%4    | | MS-DOS       /dev/hda1 |    | | Linux        /dev/hdb1 |
+%4    | | MS-DOS       /System/Devices/hda1 |    | | Linux        /System/Devices/hdb1 |
 %4    | |------------------------|    | |------------------------|
-%4--> | | Extended     /dev/hda2 |    | | ...          /dev/hdb2 |
+%4--> | | Extended     /System/Devices/hda2 |    | | ...          /System/Devices/hdb2 |
 %4    | | +----------------------|    | |                        |
-%4    | | | ...        /dev/hda5 |    | |                        |
+%4    | | | ...        /System/Devices/hda5 |    | |                        |
 %4    | | |----------------------|    | |                        |
-%4    | | | ...        /dev/hda6 |    | |                        |
+%4    | | | ...        /System/Devices/hda6 |    | |                        |
 %4    +--------------------------+    +--------------------------+
 %:\end{verbatim}
 
@@ -1163,14 +1163,14 @@
       & \multicolumn{2}{c}{\bf Second disk} \\
     \cline{2-3}\cline{5-6}
     $\rightarrow$ & \multicolumn{2}{|l|}{MBR\hbox to 1.3in{
-      \hfill\tt /dev/hda~}} &
-      & \multicolumn{2}{|l|}{MBR\hbox to 1.3in{\hfill\tt /dev/hdb~}} \\
+      \hfill\tt /System/Devices/hda~}} &
+      & \multicolumn{2}{|l|}{MBR\hbox to 1.3in{\hfill\tt /System/Devices/hdb~}} \\
     \cline{3-3}\cline{6-6}
-    & & MS-DOS\hfill\tt /dev/hda1 &
-      & & Linux\hfill\tt /dev/hdb1 \\
+    & & MS-DOS\hfill\tt /System/Devices/hda1 &
+      & & Linux\hfill\tt /System/Devices/hdb1 \\
     \cline{3-3}\cline{6-6}
-    & & $\ldots$\hfill\tt /dev/hda2 &
-      & & $\ldots$\hfill\tt /dev/hdb2 \\
+    & & $\ldots$\hfill\tt /System/Devices/hda2 &
+      & & $\ldots$\hfill\tt /System/Devices/hdb2 \\
     \cline{2-3}\cline{5-6}
   \end{tabular}
 $$
@@ -1178,11 +1178,11 @@
 %:\begin{verbatim}
 %4             FIRST DISK                     SECOND DISK
 %4    +--------------------------+    +--------------------------+
-%4--> | MBR            /dev/hda  |    | MBR            /dev/hdb  |
+%4--> | MBR            /System/Devices/hda  |    | MBR            /System/Devices/hdb  |
 %4    | +------------------------|    | +------------------------|
-%4    | | MS-DOS       /dev/hda1 |    | | Linux        /dev/hdb1 |
+%4    | | MS-DOS       /System/Devices/hda1 |    | | Linux        /System/Devices/hdb1 |
 %4    | |------------------------|    | |------------------------|
-%4    | | ...          /dev/hda2 |    | | ...          /dev/hdb2 |
+%4    | | ...          /System/Devices/hda2 |    | | ...          /System/Devices/hdb2 |
 %4    +--------------------------+    +--------------------------+
 %:\end{verbatim}
 
@@ -1190,8 +1190,8 @@
 \LILO\ is able to boot your other operating system(s) before relying on
 this approach.
 
-The line \verb"boot = /dev/hda2" in \path{/etc/lilo.conf} would have to be
-changed to \verb"boot = /dev/hda" in this example.
+The line \verb"boot = /System/Devices/hda2" in \path{/System/Settings/lilo.conf} would have to be
+changed to \verb"boot = /System/Devices/hda" in this example.
 
 
 \subsubsection{More than two disks}
@@ -1224,11 +1224,11 @@
 a directory (e.g. \path{/dos/linux}) is created, all files from
 \path{/boot} are moved to that directory, \path{/boot} is replaced by
 a symbolic link to it, the kernels are also moved to the new directory,
-their new location is recorded in \path{/etc/lilo.conf}, and finally
-\path{/sbin/lilo} is run.
+their new location is recorded in \path{/System/Settings/lilo.conf}, and finally
+\path{/System/AdminTools/lilo} is run.
 
 From then on, new kernels must always be copied into that directory on
-the DOS partition before running \path{/sbin/lilo}, e.g. when recompiling
+the DOS partition before running \path{/System/AdminTools/lilo}, e.g. when recompiling
 a kernel, the standard procedure changes from
 
 \begin{verbatim}
@@ -1240,15 +1240,15 @@
 \begin{verbatim}
 # make zImage
 # mv /dos/linux/vmlinuz /dos/linux/vmlinuz.old
-# mv arch/i386/boot/zImage /dos/linux/vmlinuz
-# /sbin/lilo
+# mv arch/i386/System/Boot/zImage /dos/linux/vmlinuz
+# /System/AdminTools/lilo
 \end{verbatim}
 
 \emphasize{WARNING:} De-fragmenting such a DOS partition is likely to
 make Linux or even the whole system unbootable. Therefore, the DOS
 partition should either not be de-fragmented, or a Linux boot disk
 should be prepared (and tested) to bring up Linux and to run
-\path{/sbin/lilo} after the de-fragmentation.\footnote{Setting the
+\path{/System/AdminTools/lilo} after the de-fragmentation.\footnote{Setting the
 ``system'' attribute from DOS on the critical files (e.g. everything
 in \path{C:$\backslash$LINUX}) may help to protect them from being
 rearranged. However, the boot floppy should still be ready, just in case.}
@@ -1327,17 +1327,17 @@
 This is a list of device numbers of some frequently used devices: \\
 \begin{tabular}{lllllll}
 \qquad
-& {\tt /dev/fd0} & 200\qquad & \tt /dev/hda1 & 301\qquad & /dev/sda1 & 801 \\
-& {\tt /dev/fd1} & 201 & \tt /dev/hda2 & 302 & /dev/sda2 & 802 \\
+& {\tt /System/Devices/fd0} & 200\qquad & \tt /System/Devices/hda1 & 301\qquad & /System/Devices/sda1 & 801 \\
+& {\tt /System/Devices/fd1} & 201 & \tt /System/Devices/hda2 & 302 & /System/Devices/sda2 & 802 \\
 & \multicolumn{2}{c}{$\cdots$} & \multicolumn{2}{c}{$\cdots$} &
 \multicolumn{2}{c}{$\cdots$} \\
-& & & \tt /dev/hdb1 & 341 & /dev/sdb1 & 811 \\
-& & & \tt /dev/hdb2 & 342 & /dev/sdb2 & 812 \\
+& & & \tt /System/Devices/hdb1 & 341 & /System/Devices/sdb1 & 811 \\
+& & & \tt /System/Devices/hdb2 & 342 & /System/Devices/sdb2 & 812 \\
 & \multicolumn{2}{c}{} & \multicolumn{2}{c}{$\cdots$} &
 \multicolumn{2}{c}{$\cdots$} \\
 \end{tabular}}
 %%endskip
-or the full path name of the device, e.g. \verb"/dev/hda3".%
+or the full path name of the device, e.g. \verb"/System/Devices/hda3".%
 \footnote{The device names are hard-coded in the kernel. Therefore, only
 the ``standard'' names are supported and some less common devices may not
 be recognized. In those cases, only numbers can be used.}
@@ -1362,8 +1362,8 @@
 \raw{noinitrd}. \raw{init} specifies the name of the \name{init} program
 to execute. Therefore, if single mode cannot be entered because \name{init}
 is mis-configured, one may still be able to reach a shell using
-\verb"init=/bin/sh". \raw{noinitrd} disables automatic loading of the initial
-RAM disk. Instead, its content is then available on \path{/dev/initrd}.
+\verb"init=/System/Tools/sh". \raw{noinitrd} disables automatic loading of the initial
+RAM disk. Instead, its content is then available on \path{/System/Devices/initrd}.
 
 \raw{vga=\meta{mode}} alters the VGA mode set at startup. The values
 \raw{normal}, \raw{extended}, \raw{ask} or a decimal number are
@@ -1402,7 +1402,7 @@
 automatically converted to upper case.
 
 Note that environment variables passed to \name{init} are typically
-available in system initialization scripts (e.g. \path{/etc/rc.local}),
+available in system initialization scripts (e.g. \path{/System/Settings/rc.local}),
 but they're not visible from ordinary login sessions, because the \name{login}
 program removes them from the user's environment.
 
@@ -1440,7 +1440,7 @@
 
 \LILO\ always passes the string \raw{BOOT\_IMAGE=\meta{name}} to the
 kernel, where \meta{name} is the name by which the kernel is identified
-(e.g. the label). This variable can be used in \path{/etc/rc} to select
+(e.g. the label). This variable can be used in \path{/System/Settings/rc} to select
 a different behaviour, depending on the kernel.
 
 When booting automatically, i.e. without human intervention, the word
@@ -1527,15 +1527,15 @@
 \newpage
 \section{Map installer}
 
-The map installer program \path{/sbin/lilo} updates the boot sector
+The map installer program \path{/System/AdminTools/lilo} updates the boot sector
 and creates the map file. If the map installer detects an error, it terminates
 immediately and does not touch the boot sector and the map file.
 
 Whenever the map installer updates a boot sector, the original boot
 sector is copied
-to \path{/boot/boot.\meta{number}}, where \meta{number} is the
+to \path{/System/Boot/boot.\meta{number}}, where \meta{number} is the
 hexadecimal device number. If such a file already exists, no backup
-copy is made. Similarly, a file \raw{/boot/part.\meta{number}} is
+copy is made. Similarly, a file \raw{/System/Boot/part.\meta{number}} is
 created if \LILO\ modifies the partition table. (See page \pageref{fix-table}.)
 
 
@@ -1556,7 +1556,7 @@
 are shown.
 
 \begin{command}
-  /sbin/lilo
+  /System/AdminTools/lilo
     \unit{\[ -C \meta{config\_file} \]}
     \unit{-q}
     \unit{\[ -m \meta{map\_file} \]}
@@ -1567,7 +1567,7 @@
   \item[\raw{-C \meta{config\_file}}]~\\
     Specifies the configuration file that is used by the map
     installer (see section \ref{config}). If \raw{-C} is omitted,
-    \path{/etc/lilo.conf} is used.
+    \path{/System/Settings/lilo.conf} is used.
   \item[\raw{-m \meta{map\_file}}]~\\
     Specifies an alternate map file. \seealso
   \item[\raw{-q}]~ \\
@@ -1581,10 +1581,10 @@
 \label{creupd}
 
 A new map is created for the images described in the configuration file
-\path{/etc/lilo.conf} and they are registered in the boot sector.
+\path{/System/Settings/lilo.conf} and they are registered in the boot sector.
 
 \begin{command}
-  /sbin/lilo
+  /System/AdminTools/lilo
     \unit{\[ -C \meta{config\_file} \]}
     \unit{\[ -b \meta{boot\_device} \]}
     \unit{\[ -c \]}
@@ -1633,7 +1633,7 @@
     failure with a recovery disk. The \raw{-r} option is implied if
     the environment variable \raw{ROOT} is set.\footnote{E.g. if your root
       partition is mounted on \path{/mnt}, you can update the map by simply
-      running \raw{ROOT=/mnt /mnt/sbin/lilo}}
+      running \raw{ROOT=/mnt /mnt/System/AdminTools/lilo}}
     The current directory is changed to the new root directory, so using
     relative paths may not work.
   \item[\raw{-s \meta{save\_file}}]~\\
@@ -1657,7 +1657,7 @@
 Changes \LILO's default command line. See also section \ref{bootsel}.
 
 \begin{command}
-  /sbin/lilo
+  /System/AdminTools/lilo
     \unit{\[ -C \meta{config\_file} \]}
     \unit{\[ -m \meta{map\_file} \]}
     \unit{-R \[ \meta{word} $\ldots$ \]}
@@ -1679,9 +1679,9 @@
 %%beginskip
 \tt
 %%endskip
-\#!/bin/sh \\
+\#!/System/Tools/sh \\
 cd / \\
-/sbin/lilo -R "\$*" \&\& reboot}
+/System/AdminTools/lilo -R "\$*" \&\& reboot}
     If the command line isn't valid, the map installer issues an error
     message and returns a non-zero exit code.
 \end{description}
@@ -1692,7 +1692,7 @@
 Determines the path of the kernel.
 
 \begin{command}
-  /sbin/lilo
+  /System/AdminTools/lilo
     \unit{\[ -C \meta{config\_file} \]}
     \unit{-I \meta{name}}
     \unit{\[ \meta{options} \]}
@@ -1721,7 +1721,7 @@
 section \ref{deinst}.
 
 \begin{command}
-  /sbin/lilo
+  /System/AdminTools/lilo
     \unit{\[ -C \meta{config\_file} \]}
     \unit{\[ -s \meta{save\_file} \]}
     \unit{-u \| -U}
@@ -1748,7 +1748,7 @@
 \subsubsection{Print version number}
 
 \begin{command}
-  /sbin/lilo -V
+  /System/AdminTools/lilo -V
 \end{command}
 
 \begin{description}
@@ -1787,7 +1787,7 @@
 \subsection{Configuration}
 \label{config}
 
-The configuration information is stored in the file \path{/etc/lilo.conf}
+The configuration information is stored in the file \path{/System/Settings/lilo.conf}
 and consists of variable assignments.
 
 
@@ -1844,7 +1844,7 @@
 \subsubsection{Global options}
 \label{cfgglo}
 
-\path{/etc/lilo.conf} begins with a possibly empty global options section.
+\path{/System/Settings/lilo.conf} begins with a possibly empty global options section.
 Many global options can also be set from the command line, but storing
 permanent options in the configuration file is more convenient.
 
@@ -1852,8 +1852,8 @@
 
 \begin{description}
   \item[\craw{backup=}\meta{backup\_file}] Copy the original boot sector to
-    \meta{backup\_file} (which may also be a device, e.g. \path{/dev/null})
-    instead of \path{/boot/boot.\meta{number}}
+    \meta{backup\_file} (which may also be a device, e.g. \path{/System/Devices/null})
+    instead of \path{/System/Boot/boot.\meta{number}}
   \item[\craw{boot=}\meta{boot\_device}] Sets the name of the device (e.g.
     a hard disk partition) that contains
     the boot sector. If \craw{boot} is omitted, the boot sector is read from
@@ -1903,7 +1903,7 @@
     to put the boot sector even on partitions that appear to be unsuitable for
     that.
   \item[\craw{install=}\meta{boot\_sector}] Install the specified file as the
-    new boot sector. If \craw{install} is omitted, \path{/boot/boot.b} is used
+    new boot sector. If \craw{install} is omitted, \path{/System/Boot/boot.b} is used
     as the default.
   \item[\craw{keytable=}\meta{table\_file}] Re-map the keyboard as specified
     in this file. See section \ref{keytab} for details.
@@ -1922,12 +1922,12 @@
     may not be portable if \craw{linear} is used,
     because the BIOS service to
     determine the disk geometry does not work reliably for floppy disks.
-    When using \craw{linear} with large disks, \path{/sbin/lilo} may
+    When using \craw{linear} with large disks, \path{/System/AdminTools/lilo} may
     generate references to inaccessible disk areas (see section \ref{broken}),
     because 3D sector addresses are not known before boot time.
     \craw{linear} may conflict with \craw{compact}, see section \ref{othpro}.
   \item[\craw{map=}\meta{map\_file}] Specifies the location of the map file.
-    If \craw{map} is omitted, a file \path{/boot/map} is used.
+    If \craw{map} is omitted, a file \path{/System/Boot/map} is used.
   \item[\craw{message=}\meta{message\_file}] Specifies a file containing a
     message that is displayed before the boot prompt. No message is displayed
     while waiting for a modifier key (\key{Shift}, etc.) after printing
@@ -1954,7 +1954,7 @@
     port number is specified.
     \begin{description}
       \item[\meta{port}] the number of the serial port, zero-based. 0
-	corresponds to \path{COM1} alias \path{/dev/ttyS0}, etc. All four
+	corresponds to \path{COM1} alias \path{/System/Devices/ttyS0}, etc. All four
 	ports can be used (if present).
       \item[\meta{bps}] the baud rate of the serial port. The following
 	baud rates are supported: 110, 300, 1200, 2400, 4800, 9600, 19200, and
@@ -2074,7 +2074,7 @@
   label = linux
   alias = 1
   restricted
-other = /dev/hda1
+other = /System/Devices/hda1
   label = dos
   alias = 2
 \end{verbatim}
@@ -2151,10 +2151,10 @@
 \begin{verbatim}
 image = /vmlinuz
   label = lin-hd
-  root = /dev/hda2
+  root = /System/Devices/hda2
 image = /vmlinuz
   label = lin-fd
-  root = /dev/fd0
+  root = /System/Devices/fd0
 \end{verbatim}
 
 
@@ -2203,7 +2203,7 @@
 
 Example:
 \begin{verbatim}
-image = /dev/fd0
+image = /System/Devices/fd0
   range = 1+512
 \end{verbatim}
 
@@ -2240,7 +2240,7 @@
     booting systems which find their partitions by examining the
     partition table. See section \ref{ptch} for details.
   \item[\craw{loader=}\meta{chain\_loader}] Specifies the chain loader that
-    should be used. If it is omitted, \path{/boot/chain.b} is used.
+    should be used. If it is omitted, \path{/System/Boot/chain.b} is used.
   \item[\craw{map-drive=}\meta{bios\_device\_code}] Instructs \path{chain.b}
     to installs a resident driver that re-maps the floppy
     or hard disk drives. This way, one can boot any operating system from a
@@ -2264,7 +2264,7 @@
     system if this variable is omitted. (Some operating systems have other
     means to determine from which partition they have been booted. E.g. MS-DOS
     usually stores the geometry of the boot disk or partition in its boot
-    sector.) Note that \path{/sbin/lilo} must be re-run if a partition table
+    sector.) Note that \path{/System/AdminTools/lilo} must be re-run if a partition table
     mapped referenced with \craw{table} is modified.
   \item[\craw{unsafe}] Do not access the boot sector at map creation time. This
     disables some sanity checks, including a partition table check. If the boot
@@ -2277,15 +2277,15 @@
 
 Examples:
 \begin{verbatim}
-other = /dev/hda2
+other = /System/Devices/hda2
   label = dos
-  table = /dev/hda
+  table = /System/Devices/hda
 \end{verbatim}
 
 \begin{verbatim}
-other = /dev/hdb2
+other = /System/Devices/hdb2
   label = os2
-  loader = /boot/os2_d.b
+  loader = /System/Boot/os2_d.b
   map-drive = 0x80
     to = 0x81
   map-drive = 0x81
@@ -2394,25 +2394,25 @@
 
 Examples:
 \begin{verbatim}
-disk = /dev/sda
+disk = /System/Devices/sda
   bios = 0x80
   sectors = 32
   heads = 64
   cylinders = 632
-  partition = /dev/sda1
+  partition = /System/Devices/sda1
     start = 2048
-  partition = /dev/sda2
+  partition = /System/Devices/sda2
     start = 204800
-  partition = /dev/sda3
+  partition = /System/Devices/sda3
     start = 500000
-  partition = /dev/sda4
+  partition = /System/Devices/sda4
     start = 900000
 \end{verbatim}
 
 \begin{verbatim}
-disk = /dev/sda
+disk = /System/Devices/sda
   bios = 0x80
-disk = /dev/hda
+disk = /System/Devices/hda
   bios = 0x81
 \end{verbatim}
 
@@ -2460,12 +2460,12 @@
 Example:
 
 \begin{verbatim}
-other = /dev/sda4
+other = /System/Devices/sda4
   label = sco
   change
-    partition = /dev/sda4
+    partition = /System/Devices/sda4
       activate
-    partition = /dev/sda3
+    partition = /System/Devices/sda3
       deactivate
 \end{verbatim}
 
@@ -2522,12 +2522,12 @@
 Example:
 
 \begin{verbatim}
-other = /dev/sda3
+other = /System/Devices/sda3
   label = dos
   change
-    partition = /dev/sda2
+    partition = /System/Devices/sda2
       set = dos16_big_normal
-    partition = /dev/sda3
+    partition = /System/Devices/sda3
       activate
       set = DOS16_big_normal
 \end{verbatim}
@@ -2596,13 +2596,13 @@
 
 \name{keytab-lilo.pl} writes the resulting translation table as a binary
 string to standard output. Such tables can be stored anywhere with any name,
-but the suggested naming convention is \path{/boot/\meta{kbd}.ktl}
+but the suggested naming convention is \path{/System/Boot/\meta{kbd}.ktl}
 (``\underline{K}eyboard \underline{T}able for \underline{L}ilo''), where
 \meta{kbd} is the name of the keyboard layout.
 
 Example:
 \begin{verbatim}
-keytab-lilo.pl de >/boot/de.ktl
+keytab-lilo.pl de >/System/Boot/de.ktl
 \end{verbatim}
 
 
@@ -2614,7 +2614,7 @@
 
 Example:
 \begin{verbatim}
-keytable = /boot/de.klt
+keytable = /System/Boot/de.klt
 \end{verbatim}
 
 
@@ -2634,7 +2634,7 @@
 \path{/usr/include/linux} and the kernel usually has to be configured by
 running \raw{make config} before \LILO\ can be compiled.
 
-\path{/bin/sh} has to be a real Bourne shell. \name{bash} is sufficiently
+\path{/System/Tools/sh} has to be a real Bourne shell. \name{bash} is sufficiently
 compatible, but some \name{ksh} clones may cause problems.
 
 A file named \path{INCOMPAT} is included in the distribution. It describes
@@ -2722,7 +2722,7 @@
     Chain loader to load \name{OS/2} from the second hard disk.
     \raw{make install} puts this file into \path{/boot}
   \item[\path{lilo/lilo}]~\\
-    \LILO\ (map) installer. \raw{make install} puts this file into \path{/sbin}
+    \LILO\ (map) installer. \raw{make install} puts this file into \path{/System/AdminTools}
   \item[\path{lilo/activate}]~\\
     Simple boot partition setter.
   \item[\path{lilo/dparam.com}]~\\
@@ -2741,8 +2741,8 @@
   \item configure the \path{Makefile} (see section \ref{cfgmf})
   \item run\quad\raw{make}\quad to compile and assemble all parts.
   \item run\quad\raw{make install}\quad to copy all \LILO\ files to
-     the directories where they're installed. \path{/sbin} should now
-     contain the file \path{lilo},  \path{/usr/sbin} should contain
+     the directories where they're installed. \path{/System/AdminTools} should now
+     contain the file \path{lilo},  \path{/System/AdminTools} should contain
      \path{keytab-lilo.pl}, and
      \path{/boot} should contain \path{boot.b}, \path{chain.b}, and
      \path{os2\_d.b}.
@@ -2756,9 +2756,9 @@
 
 \begin{itemize}
   \item insert a blank (but low-level formatted) floppy disk into
-    \path{/dev/fd0}.
+    \path{/System/Devices/fd0}.
   \item run \raw{echo image=\meta{kernel\_image}}\verb" |"\\
-    \raw{/sbin/lilo -C - -b /dev/fd0 -v -v -v} \\
+    \raw{/System/AdminTools/lilo -C - -b /System/Devices/fd0 -v -v -v} \\
     If you've already installed \LILO\ on your system, you might not want
     to overwrite your old map file.
     Use the \raw{-m} option to specify an alternate map file name.
@@ -2767,7 +2767,7 @@
 \end{itemize}
 
 Now, you have to decide, which boot concept you want to use. Let's assume
-you have a Linux partition on \path{/dev/hda2} and you want to install your
+you have a Linux partition on \path{/System/Devices/hda2} and you want to install your
 \LILO\ boot sector there. The DOS-MBR loads the \LILO\ boot sector.
 
 \begin{itemize}
@@ -2778,8 +2778,8 @@
     (e.g. it's the MBR or if it contains a boot loader you might want to use
     if you encounter problems with \LILO), you should mount your boot disk
     and make a backup copy of your boot sector to a file on that floppy,
-    e.g. \verb"dd if=/dev/hda of=/fd/boot_sector bs=512 count=1"
-  \item create the configuration file \path{/etc/lilo.conf}, e.g. \\
+    e.g. \verb"dd if=/System/Devices/hda of=/fd/boot_sector bs=512 count=1"
+  \item create the configuration file \path{/System/Settings/lilo.conf}, e.g. \\
 \meta{global settings} \\
 \meta{image specification} \\
 \verb"  "\meta{per-image options} \\
@@ -2788,10 +2788,10 @@
     unexpected behaviour when using the \raw{-r} option.
   \item now, you can check what \LILO\ would do if you were about to install
     it on your hard disk: \\
-\verb"/sbin/lilo -v -v -v -t"
+\verb"/System/AdminTools/lilo -v -v -v -t"
   \item if you need some additional boot utility (i.e. \name{BOOTACTV}), you
     should install that now
-  \item run \path{/sbin/lilo} to install \LILO\ on your hard disk
+  \item run \path{/System/AdminTools/lilo} to install \LILO\ on your hard disk
   \item if you have to change the active partition, use \name{fdisk} or
     \name{activate} to do that
   \item reboot
@@ -2803,7 +2803,7 @@
 
 Certain build-time parameters can be configured.
 They can either be edited in the top-level \path{Makefile} or they can be
-stored in a file \path{/etc/lilo.defines}. Settings in the \path{Makefile}
+stored in a file \path{/System/Settings/lilo.defines}. Settings in the \path{Makefile}
 are ignored if that file exists.
 
 The following items can be configured:
@@ -2849,7 +2849,7 @@
   \item[\raw{USE\_TMPDIR}] Use the directory indicated in the \raw{TMPDIR}
     environment variable when creating temporary device files. If \raw{TMPDIR}
     is not set or if \LILO\ is compiled without \raw{USE\_TMPDIR}, temporary
-    device files are created in \path{/tmp}.\footnote{Note that, while honoring
+    device files are created in \path{/System/TemporaryFiles}.\footnote{Note that, while honoring
     \raw{TMPDIR} is the ``right'' thing to do, the fact that \LILO\ has to
     create temporary device files at all may indicate that the operating
     environment is not completely set up, so \raw{TMPDIR} may point to an
@@ -2865,7 +2865,7 @@
     default.
 \end{description}
 
-\path{/etc/lilo.defines} should be used if one wishes to make
+\path{/System/Settings/lilo.defines} should be used if one wishes to make
 permanent configuration changes. The usual installation procedures don't
 touch that file. Example:
 
@@ -2892,24 +2892,24 @@
 \begin{itemize}
   \item a file system has to be created on the file system
   \item the kernel and \path{boot.b} have to be copied to the floppy disk
-  \item \path{/sbin/lilo} has to be run to create the map file
+  \item \path{/System/AdminTools/lilo} has to be run to create the map file
 \end{itemize}
 
 This can be as easy as
 \begin{verbatim}
-/sbin/mke2fs /dev/fd0
+/System/AdminTools/mke2fs /System/Devices/fd0
 [ -d /fd ] || mkdir /fd
-mount /dev/fd0 /fd
-cp /boot/boot.b /fd
+mount /System/Devices/fd0 /fd
+cp /System/Boot/boot.b /fd
 cp /zImage /fd
 echo image=/fd/zImage label=linux |
-  /sbin/lilo -C - -b /dev/fd0 -i /fd/boot.b -c -m /fd/map
+  /System/AdminTools/lilo -C - -b /System/Devices/fd0 -i /fd/boot.b -c -m /fd/map
 umount /fd
 \end{verbatim}
 
-The command line of \path{/sbin/lilo} is a little tricky. \raw{-C -} takes
+The command line of \path{/System/AdminTools/lilo} is a little tricky. \raw{-C -} takes
 the configuration from standard input (naturally, one could also write the
-configuration into a file), \raw{-b /dev/fd0} specifies that the boot sector
+configuration into a file), \raw{-b /System/Devices/fd0} specifies that the boot sector
 is written to the floppy disk, \raw{-i /fd/boot.b} takes the first and second
 stage loaders from the floppy, \raw{-c} speeds up the load process, and
 \raw{-m /fd/map} puts the map file on the floppy too.
@@ -2918,7 +2918,7 @@
 \subsection{Updates}
 
 \LILO\ is affected by updates of kernels, the whole system and (trivially)
-of \LILO\ itself. Typically, only \path{/sbin/lilo} has to be run after
+of \LILO\ itself. Typically, only \path{/System/AdminTools/lilo} has to be run after
 any of those updates and everything will be well again (at least as far
 as \LILO\ is concerned).
 
@@ -2943,7 +2943,7 @@
 
 Because the locations of \path{boot.b}, \path{chain.b}, etc. have changed
 and because the map file format may be different too, you have to update
-the boot sector and the map file. Run \path{/sbin/lilo} to do this.
+the boot sector and the map file. Run \path{/System/AdminTools/lilo} to do this.
 
 
 \subsubsection{Kernel update}
@@ -2953,10 +2953,10 @@
 overwritten, the map has to be re-built.\footnote{It is advisable to
 keep a second, stable, kernel image that can be booted if you forget
 to update the map after a change to your usual kernel image.} Run
-\path{/sbin/lilo} to do this.
+\path{/System/AdminTools/lilo} to do this.
 
 The kernel has a make target ``zlilo'' that copies the kernel
-to \path{/vmlinuz} and runs \path{/sbin/lilo}.
+to \path{/vmlinuz} and runs \path{/System/AdminTools/lilo}.
 
 
 \subsubsection{System upgrade}
@@ -2968,19 +2968,19 @@
 kernels are removed or added, it may be necessary to update the configuration
 file.
 
-If \LILO\ is updated by this system upgrade, \path{/sbin/lilo} should be
+If \LILO\ is updated by this system upgrade, \path{/System/AdminTools/lilo} should be
 run before booting the upgraded system. It is generally a good idea not to
 rely on the upgrade procedure to perform this essential step automatically.
 
 However, system upgrades which involve removal and re-creation of entire
 partitions (e.g. \path{/}, \path{/usr}, etc.) are different. First, they
 should be avoided, because they bear a high risk of losing other critical
-files, e.g. the \path{/etc/XF86Config} you've spent the last week fiddling
+files, e.g. the \path{/System/Settings/XF86Config} you've spent the last week fiddling
 with. If an upgrade really has to be performed in such a brute-force way,
 this is equal with total removal of \LILO, followed by a new installation.
 Therefore, the procedures described in the sections \ref{deinst} and
 \ref{liloupd} have to be performed. If you've forgotten to make a backup
-copy of \path{/etc/lilo.conf} before the destructive upgrade, you might
+copy of \path{/System/Settings/lilo.conf} before the destructive upgrade, you might
 also have to go through section \ref{install} again.
 
 
@@ -3015,12 +3015,12 @@
 partition table.
 
 \LILO\ automatically makes backup copies when it overwrites boot sectors.
-They are named \path{/boot/boot.\meta{nnnn}}, with \meta{nnnn}
-corresponding to the device number, e.g. \raw{0300} is \path{/dev/hda},
-\raw{0800} is \path{/dev/sda}, etc. Those backups can be used to restore
+They are named \path{/System/Boot/boot.\meta{nnnn}}, with \meta{nnnn}
+corresponding to the device number, e.g. \raw{0300} is \path{/System/Devices/hda},
+\raw{0800} is \path{/System/Devices/sda}, etc. Those backups can be used to restore
 the old MBR if no easier method is available. The commands are \\
-\raw{dd if=/boot/boot.0300 of=/dev/hda bs=446 count=1} or \\
-\raw{dd if=/boot/boot.0800 of=/dev/sda bs=446 count=1} \\
+\raw{dd if=/System/Boot/boot.0300 of=/System/Devices/hda bs=446 count=1} or \\
+\raw{dd if=/System/Boot/boot.0800 of=/System/Devices/sda bs=446 count=1} \\
 respectively.
 
 \emphasize{WARNING:} Some Linux distributions install \path{boot.\meta{nnnn}}
@@ -3037,17 +3037,17 @@
 their install procedures. It is therefore possible that \LILO\ will stop
 to work after such an installation and Linux has to be booted from floppy
 disk. The original state can be restored by either re-running
-\path{/sbin/lilo } (if \LILO\ is installed as the MBR) or by making
+\path{/System/AdminTools/lilo } (if \LILO\ is installed as the MBR) or by making
 \LILO's partition active (if it's installed on a primary partition).
 
 It is generally a good idea to install \LILO\ after the other operating
 systems have been installed. E.g. OS/2 is said to cause trouble when
 attempting to add it to an existing Linux system. (However, booting
-from floppy and running \path{/sbin/lilo} should get around most
+from floppy and running \path{/System/AdminTools/lilo} should get around most
 interferences.)
 
 Typically, the new operating system then has to be added to \LILO's
-configuration (and \path{/sbin/lilo} has to be re-run) in order to boot
+configuration (and \path{/System/AdminTools/lilo} has to be re-run) in order to boot
 it.
 
 See also section \ref{othpro} for a list of known problems with some
@@ -3063,7 +3063,7 @@
 
 \subsection{Map installer warnings and errors}
 
-Most messages of the map installer (\path{/sbin/lilo}) should be
+Most messages of the map installer (\path{/System/AdminTools/lilo}) should be
 self-explanatory. Some messages that indicate common errors are
 listed below. They are grouped
 into fatal errors and warnings (non-fatal errors).
@@ -3118,13 +3118,13 @@
     a partition on a different disk than the one in whose section its
     entry appears.
   \item[\raw{\meta{device\_name} is not a whole disk device}]~\\
-    Only the geometry of whole disks (e.g. \path{/dev/hda}, \path{/dev/sdb},
+    Only the geometry of whole disks (e.g. \path{/System/Devices/hda}, \path{/System/Devices/sdb},
     etc.) can be redefined when using \craw{disk} sections.
   \item[\raw{DISKTAB and DISK are mutually exclusive}]~\\
     You cannot use a \path{disktab} file and disk geometry definitions in the
-    configuration file at the same time. Maybe \path{/etc/disktab} was
+    configuration file at the same time. Maybe \path{/System/Settings/disktab} was
     accidentally used, because that's the default for backward-compatibility.
-    You should delete \path{/etc/disktab} after completing the transition to
+    You should delete \path{/System/Settings/disktab} after completing the transition to
     \craw{disk} sections.
   \item[\raw{Duplicate entry in partition table}]~\\
     A partition table entry appears twice. The partition table has to be
@@ -3140,7 +3140,7 @@
     boot sector. You might have confused the device name.\footnote{Because
     different partition programs may display the partitions in a different
     order, it is possible that what you think is your first partition isn't
-    \path{/dev/hda1}, etc. A good method to verify the content of a partition
+    \path{/System/Devices/hda1}, etc. A good method to verify the content of a partition
     is to try to mount it.}
   \item[\raw{geo\_comp\_addr: Cylinder \meta{number} beyond end of media %
     (\meta{number})}]~\\
@@ -3185,7 +3185,7 @@
     they can't be reasonably used together.
   \item[\raw{Map \meta{path} is not a regular file.}]~\\
     This is probably the result of an attempt to omit writing a map file, e.g.
-    with \raw{-m /dev/null}. The \raw{-t} option should be used to accomplish
+    with \raw{-m /System/Devices/null}. The \raw{-t} option should be used to accomplish
     this.
   \item[\raw{Must specify SECTORS and HEADS together}]~\\
     It is assumed that disks with a ``strange'' number of sectors will also
@@ -3332,17 +3332,17 @@
     geometry mismatch (e.g. bad disk parameters, see section \ref{diskgeo}).
   \item[\raw{LI}] The first stage boot loader was able to load the second
     stage boot loader, but has failed to execute it. This can either be
-    caused by a geometry mismatch or by moving \path{/boot/boot.b} without
+    caused by a geometry mismatch or by moving \path{/System/Boot/boot.b} without
     running the map installer.
   \item[\raw{LIL}] The second stage boot loader has been started, but it
     can't load the descriptor table from the map file. This is typically
     caused by a media failure or by a geometry mismatch.
   \item[\raw{LIL?}] The second stage boot loader has been loaded at an
     incorrect address. This is typically caused by a subtle geometry
-    mismatch or by moving \path{/boot/boot.b} without running the map
+    mismatch or by moving \path{/System/Boot/boot.b} without running the map
     installer.
   \item[\raw{LIL-}] The descriptor table is corrupt. This can either be caused
-    by a geometry mismatch or by moving \path{/boot/map} without running
+    by a geometry mismatch or by moving \path{/System/Boot/map} without running
     the map installer.
   \item[\raw{LILO}] All parts of \LILO\ have been successfully loaded.
 \end{description}
@@ -3424,7 +3424,7 @@
 
 Generally, invalid geometry and attempts to use more than two disks without a
 very modern BIOS may yield misleading error codes. Please check carefully
-if \path{/sbin/lilo} doesn't emit any warnings. Then try using the
+if \path{/System/AdminTools/lilo} doesn't emit any warnings. Then try using the
 \craw{linear} or \craw{lba32} option (see section \ref{cfgglo}).
 
 
@@ -3474,11 +3474,11 @@
     \ref{ptman} for how this can be accomplished.
   \item Future Domain TMC-1680 adapters with the BIOS versions 3.4 and 3.5
     assign BIOS device numbers in the wrong order, e.g. on a two-disk system,
-    \path{/dev/sda} becomes \raw{0x81} and \path{/dev/sdb} becomes
+    \path{/System/Devices/sda} becomes \raw{0x81} and \path{/System/Devices/sdb} becomes
     \raw{0x80}. This can be fixed with the following \craw{disk} section:\\
-    \verb"disk=/dev/sda bios=0x81 disk=/dev/sdb bios=0x80"\\
+    \verb"disk=/System/Devices/sda bios=0x81 disk=/System/Devices/sdb bios=0x80"\\
     Note that this is only valid for a two-disk system. In three-disk
-    systems, \path{/dev/sdc} would become \raw{0x80}, etc. Also, single-disk
+    systems, \path{/System/Devices/sdc} would become \raw{0x80}, etc. Also, single-disk
     systems don't have this problem (and the ``fix'' would break them).
   \item Some BIOSes don't properly recognize disks with an unusual partition
     table (e.g. without any partition marked active) and refuse to boot from
diff -urN lilo-22.7.2/dos/Makefile lilo-22.7.2-STEP/dos/Makefile
--- lilo-22.7.2/dos/Makefile	2005-09-10 09:10:44.000000000 +1200
+++ lilo-22.7.2-STEP/dos/Makefile	2006-07-12 16:22:05.700629000 +1200
@@ -37,7 +37,7 @@
 
 check:
 	@echo $(CFLAGS)
-	@if [ -x /usr/bin/bcc -o -x /usr/local/bin/bcc ]; then echo Okay; \
+	@if [ -x /System/Tools/bcc -o -x /usr/local/System/Tools/bcc ]; then echo Okay; \
 	else echo; echo "You don't seem to have the 'bcc' compiler from the 'dev86' package."; \
 		echo; exit 1; fi
 
diff -urN lilo-22.7.2/dos/README lilo-22.7.2-STEP/dos/README
--- lilo-22.7.2/dos/README	2005-01-23 10:12:06.000000000 +1300
+++ lilo-22.7.2-STEP/dos/README	2006-07-12 16:22:05.396610000 +1200
@@ -13,7 +13,7 @@
 2.  The sector map file is 'C:\BOOT\MAP' if no other name is explicitly
 specified by "map=" in the configuration file, or '-m <mapfile>' on the
 command line.  This file must be the same file as specified in the 
-'/etc/lilo.conf' file, except that under Linux, Linux file system naming
+'/System/Settings/lilo.conf' file, except that under Linux, Linux file system naming
 applies; whereas under DOS/Windows, DOS file system naming applies.
 
 3.  The sector map file MUST be placed on a filesystem that can be read/
diff -urN lilo-22.7.2/geometry.c lilo-22.7.2-STEP/geometry.c
--- lilo-22.7.2/geometry.c	2005-10-20 15:15:21.000000000 +1300
+++ lilo-22.7.2-STEP/geometry.c	2006-07-12 16:21:58.220161500 +1200
@@ -245,8 +245,8 @@
   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   /*  Cx   */
   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
-  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 15, 63,  0	   /*  /dev/md_dXX at 254  */
-								   /* and /dev/dm-0 at 253 */
+  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 15, 63,  0	   /*  /System/Devices/md_dXX at 254  */
+								   /* and /System/Devices/dm-0 at 253 */
 /*								   
   0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
 */
@@ -401,7 +401,7 @@
 {
 /*
  * In version 12 to 18, LILO only relied on scan_last_dev (or last_dev). This
- * obviously didn't work if entries in /dev were missing. Versions 18 and 19
+ * obviously didn't work if entries in /System/Devices were missing. Versions 18 and 19
  * added the probe loop, which seems to be okay, but which may probe for
  * invalid minor numbers. The IDE driver objects to that. Since last_dev is
  * only used to count IDE drives anyway, we try now only the first two devices
@@ -430,7 +430,7 @@
     static dev_t last_dev = 0;
 
     if (lbm->lv_dev != last_dev) {
-	char lvm_char[] = "/dev/lvm";
+	char lvm_char[] = "/System/Devices/lvm";
 	unsigned short iop;
 
 	if (lvmfd != -1)
@@ -467,7 +467,7 @@
     static dev_t evms_last_dev = 0;
 
     if (ebm->dev != evms_last_dev) {
-        char evms_blk[] = "/dev/evms/block_device";
+        char evms_blk[] = "/System/Devices/evms/block_device";
         struct evms_version_t evms_ver;
 
         /* Open the EVMS device */
@@ -848,10 +848,10 @@
 	md_disk_info_t md_disk_info;
 	int raid_limit;
 
-	sprintf(mdxxx, "/dev/md%d", MINOR(device));
+	sprintf(mdxxx, "/System/Devices/md%d", MINOR(device));
 	if ((md_fd=open(mdxxx,O_NOACCESS)) < 0)
 	{
-	    sprintf(mdxxx, "/dev/md/%d", MINOR(device));
+	    sprintf(mdxxx, "/System/Devices/md/%d", MINOR(device));
 	    if ((md_fd=open(mdxxx,O_NOACCESS)) < 0)
 		die("Unable to open %s", mdxxx);
 	}
@@ -914,7 +914,7 @@
 	if (verbose>=5) printf("geo_get(2):  device=%04X, all=%d\n", device, all);
 #endif
 
-/* if using hard disk, scan the devices in /proc/partitions */
+/* if using hard disk, scan the devices in /System/Processes/partitions */
     if (has_partitions(device) && all)   pf_hard_disk_scan();
 
 
diff -urN lilo-22.7.2/INCOMPAT lilo-22.7.2-STEP/INCOMPAT
--- lilo-22.7.2/INCOMPAT	2001-06-04 10:54:18.000000000 +1200
+++ lilo-22.7.2-STEP/INCOMPAT	2006-07-12 16:21:54.699941500 +1200
@@ -4,7 +4,7 @@
 Boot loaders
 ------------
 
-Starting with version 22, a third boot loader, '/boot/boot-bmp.b' is now
+Starting with version 22, a third boot loader, '/System/Boot/boot-bmp.b' is now
 available.  This loader supports booting from a bitmapped screen, defined in
 a bitmap file referenced from the config file.  This boot loader requires a
 VGA adapter which supports video mode 0x12: 16-color, 640x480 pixels.  It
@@ -52,11 +52,11 @@
 Boot loaders
 ------------
 
-Starting with version 21.5, the default boot loader is '/boot/boot-menu.b',
-referenced as '/boot/boot.b' through a symbolic link.  This boot loader
+Starting with version 21.5, the default boot loader is '/System/Boot/boot-menu.b',
+referenced as '/System/Boot/boot.b' through a symbolic link.  This boot loader
 allows booting from a text-based menu using the keyboard arrow keys to make
 the kernel/other selection.  For strict compatibility with earlier
-teletype-text based boot loaders, '/boot/boot-text.b' is still available,
+teletype-text based boot loaders, '/System/Boot/boot-text.b' is still available,
 although probably unneeded.
 
 Change Rules
@@ -93,7 +93,7 @@
 follows:
 
    other = foo
-     loader = /boot/any_b.b
+     loader = /System/Boot/any_b.b
 
 becomes
 
@@ -106,7 +106,7 @@
 and
 
    other = foo
-     loader = /boot/any_d.b
+     loader = /System/Boot/any_d.b
 
 becomes
 
@@ -119,12 +119,12 @@
 The use of os2_d.b changes as follows:
 
    other = foo
-     loader = /boot/os2_d.b
+     loader = /System/Boot/os2_d.b
 
 becomes
 
    other = foo
-     loader = /boot/os2_d.b
+     loader = /System/Boot/os2_d.b
      map-drive = 0x80
        to = 0x81
      map-drive = 0x81
@@ -165,14 +165,14 @@
 An essentially useless feature of LILO is to be able to boot a kernel
 from a device without file system, e.g.
 
-  image = /dev/fd0
+  image = /System/Devices/fd0
     range = 1+512
 
 Support for this will be removed in a future version of LILO. Also, new
 functions such as kernels > 512kB are not supported for kernels booted
 from a device.
 
-Note that booting of non-Linux systems (other = /dev/...) will in no
+Note that booting of non-Linux systems (other = /System/Devices/...) will in no
 way be affected by this feature removal.
 
 
@@ -229,7 +229,7 @@
 contain other information at that place. This can be discovered by running
 the following command:
 
-# /sbin/lilo -t -v -v | grep Setup
+# /System/AdminTools/lilo -t -v -v | grep Setup
 
 If very unusual numbers (e.g. below four or significantly bigger than five)
 are shown, you may have such a kernel.
@@ -241,17 +241,17 @@
 Incompatibilities between LILO >= 0.13 and earlier versions
 ===========================================================
 
-Possible conflict with /etc/disktab from Shoelace
+Possible conflict with /System/Settings/disktab from Shoelace
 -------------------------------------------------
 
 When using the new path names, installation of LILO may fail with
-    Invalid line in /etc/disktab:
+    Invalid line in /System/Settings/disktab:
     "w0|wini|Generic hard disk:\"
-if you have an old /etc/disktab file from Shoelace (a different boot loader
+if you have an old /System/Settings/disktab file from Shoelace (a different boot loader
 that is quite obsolete nowadays). Remove or rename that file before running
-/sbin/lilo (or QuickInst).
+/System/AdminTools/lilo (or QuickInst).
 
-Note: you may have an /etc/disktab file even if you've never used Shoelace,
+Note: you may have an /System/Settings/disktab file even if you've never used Shoelace,
 because even current versions of SLS still install that file.
 
 
@@ -260,30 +260,30 @@
 
 (Compound) unstripped kernels are no longer supported by LILO, because
 current kernels are expected to be compressed. This change also obsoletes
-/etc/lilo/install (see below).
+/System/Settings/lilo/install (see below).
 
 A new concept to support compressed kernels carrying symbol information may
 be devised later.
 
 
-Removal of /etc/lilo/install
+Removal of /System/Settings/lilo/install
 ----------------------------
 
 Early versions of LILO expected to find all parameters on the command line.
 In order to simplify repeated re-installations of LILO, the invocation of
-LILO with all its parameters was stored in /etc/lilo/install.
+LILO with all its parameters was stored in /System/Settings/lilo/install.
 
 Because this was messy and introduced syntactical limitations,
-/etc/lilo/config was introduced after a while and support for command-line
-options was drastically reduced later. /etc/lilo/install now typically just
-invoked /etc/lilo/lilo with no options or with -C /etc/lilo/config, which
+/System/Settings/lilo/config was introduced after a while and support for command-line
+options was drastically reduced later. /System/Settings/lilo/install now typically just
+invoked /System/Settings/lilo/lilo with no options or with -C /System/Settings/lilo/config, which
 became the default. Only when using compound unstripped kernels, one had to
-put additional instructions to build the kernel file into /etc/lilo/install.
+put additional instructions to build the kernel file into /System/Settings/lilo/install.
 
-Now, that unstripped kernels are gone too (see above), /etc/lilo/install is
+Now, that unstripped kernels are gone too (see above), /System/Settings/lilo/install is
 superfluous. Because the kernel Makefile still invokes LILO by calling
-/etc/lilo/install, /etc/lilo/install should be a symbolic link to /sbin/lilo
-or /etc/lilo/lilo until everybody has switched to the new directory
+/System/Settings/lilo/install, /System/Settings/lilo/install should be a symbolic link to /System/AdminTools/lilo
+or /System/Settings/lilo/lilo until everybody has switched to the new directory
 structure.
 
 
@@ -299,17 +299,17 @@
 
   Old location			New location
   ------------------------	-----------------
-  /etc/lilo/config.defines	/etc/lilo.defines
-  /etc/lilo/config		/etc/lilo.conf
-  /etc/lilo/disktab		/etc/disktab
-  /etc/lilo/lilo		/sbin/lilo
-  /etc/lilo/boot.NNNN		/boot/boot.NNNN
-  /etc/lilo/part.NNNN		/boot/part.NNNN
-  /etc/lilo/map			/boot/map
-  /etc/lilo/*.b			/boot/*.b
+  /System/Settings/lilo/config.defines	/System/Settings/lilo.defines
+  /System/Settings/lilo/config		/System/Settings/lilo.conf
+  /System/Settings/lilo/disktab		/System/Settings/disktab
+  /System/Settings/lilo/lilo		/System/AdminTools/lilo
+  /System/Settings/lilo/boot.NNNN		/System/Boot/boot.NNNN
+  /System/Settings/lilo/part.NNNN		/System/Boot/part.NNNN
+  /System/Settings/lilo/map			/System/Boot/map
+  /System/Settings/lilo/*.b			/System/Boot/*.b
 
-/etc/lilo/install should be a symbolic link to /sbin/lilo for backwards
-compatibility. If you already have a (very old) /etc/disktab file from
+/System/Settings/lilo/install should be a symbolic link to /System/AdminTools/lilo for backwards
+compatibility. If you already have a (very old) /System/Settings/disktab file from
 Shoelace, you have to delete or replace it. (Note: SLS 1.03 still installs
 that file, so you might have it even if you've never heard of Shoelace.)
 
@@ -338,7 +338,7 @@
 ===========================================================
 
 The configuration variable INSTALL is no longer required. If absent, a
-default of /etc/lilo/boot.b is used. This means that it is no longer
+default of /System/Settings/lilo/boot.b is used. This means that it is no longer
 possible to avoid installing a new boot sector when updating the map
 file. The old behaviour can be restored by setting the compile-time
 option NOINSTDEF.
@@ -375,9 +375,9 @@
 Old-style configuration has been removed
 ----------------------------------------
 
-Old-style configuration (e.g. /etc/lilo/lilo /vmlinux,/dev/hda1) is no
+Old-style configuration (e.g. /System/Settings/lilo/lilo /vmlinux,/System/Devices/hda1) is no
 longer supported. New-style configuration uses a configuration file in
-a far better readable format (/etc/lilo/config). There is also space
+a far better readable format (/System/Settings/lilo/config). There is also space
 for future extensions.
 
 If you're still using old-style configuration, you have to switch to
@@ -388,11 +388,11 @@
 of LILO. In short, you have to run the following commands _before_
 upgrading to LILO 0.10:
 
-# /etc/lilo/install -D >/etc/lilo/config
-# mv install.new /etc/lilo/install
+# /System/Settings/lilo/install -D >/System/Settings/lilo/config
+# mv install.new /System/Settings/lilo/install
 
 If you're using an older version of LILO than 0.7 or if you're not
-using /etc/lilo/install, you should either manually create a
+using /System/Settings/lilo/install, you should either manually create a
 configuration file or use QuickInst to re-install from scratch.
 
 
@@ -414,18 +414,18 @@
 (zipped) kernels. They work fine with all versions of LILO.
 
 
-Suggesting using a link for /etc/lilo/install
+Suggesting using a link for /System/Settings/lilo/install
 ---------------------------------------------
 
 Because not-compound unstripped kernels, which were needing some
-support code in /etc/lilo/install, have been removed, and because the
+support code in /System/Settings/lilo/install, have been removed, and because the
 -C option is no longer necessary to distinguish between old-style and
-new-style configuration, /etc/lilo/install is unnecessary in most
+new-style configuration, /System/Settings/lilo/install is unnecessary in most
 cases.
 
 In order to preserve compatibility with older installations and with
-installations that use code for special actions in /etc/lilo/install,
-a symbolic link should be created from /etc/lilo/install to lilo.
+installations that use code for special actions in /System/Settings/lilo/install,
+a symbolic link should be created from /System/Settings/lilo/install to lilo.
 
 
 Removed configuration option NOAUTO
@@ -479,7 +479,7 @@
 ==========================================================
 
 There are a number of incompatibilities between LILO 0.7 (or newer)
-and earlier versions that cause working /etc/lilo/install scripts to
+and earlier versions that cause working /System/Settings/lilo/install scripts to
 fail or that change earlier behaviour without warning.
 
 
@@ -487,12 +487,12 @@
 ----------------------
 
 The way how the root device is preset differs from LILO >= 0.7 and
-earlier versions if using /etc/lilo/config. If the boot images are
+earlier versions if using /System/Settings/lilo/config. If the boot images are
 listed on the command line, LILO >= 0.7 emulates the old behaviour.
 
 Old behaviour:
   - if the root device was specified after the image descriptor
-    (e.g. foo=/bar,/dev/hda1), that device was used.
+    (e.g. foo=/bar,/System/Devices/hda1), that device was used.
   - if a root device was set in the boot image and no device was
     specified at the command line, the setting from the boot
     image was used. Later changes of the settings (e.g. with rdev
@@ -512,7 +512,7 @@
 Swap device settings
 --------------------
 
-Presetting the swap device (e.g. /linux,/dev/root,/dev/swap) is no
+Presetting the swap device (e.g. /linux,/System/Devices/root,/System/Devices/swap) is no
 longer supported. Linus has already stopped providing that feature
 in recent kernels.
 
@@ -525,7 +525,7 @@
 stored has been occupied by the VGA mode value in 0.98pl6 and
 possibly also in SLS versions of 0.98pl5.
 
-Workaround: Create a /etc/lilo/config file and set the VGA variable
+Workaround: Create a /System/Settings/lilo/config file and set the VGA variable
 	    to zero to disable using a swap device at boot time.
 
 
@@ -533,7 +533,7 @@
 -------------------
 
 Appending BIOS codes to file names (e.g. /foo/bar:0x80) is no longer
-supported. /etc/lilo/disktab can be used for most purposes where
+supported. /System/Settings/lilo/disktab can be used for most purposes where
 BIOS code overrides might have been useful.
 
 
@@ -542,5 +542,5 @@
 
 Older versions of the map installer accepted multiple ocurrences of
 the same flag. LILO 0.7 and later versions are only guaranteed to
-accept repetition of -v. However, variables set in /etc/lilo/config
+accept repetition of -v. However, variables set in /System/Settings/lilo/config
 can be overridden on the command line in LILO 0.8.
diff -urN lilo-22.7.2/keytab-lilo.pl lilo-22.7.2-STEP/keytab-lilo.pl
--- lilo-22.7.2/keytab-lilo.pl	2004-08-21 08:43:59.000000000 +1200
+++ lilo-22.7.2-STEP/keytab-lilo.pl	2006-07-12 16:22:03.048463250 +1200
@@ -1,4 +1,4 @@
-#!/usr/bin/perl
+#!/System/Tools/perl
 $DEFAULT_MAP = "us";
 $DEFAULT_EXT = ".map";
 
diff -urN lilo-22.7.2/lilo.c lilo-22.7.2-STEP/lilo.c
--- lilo-22.7.2/lilo.c	2006-07-06 04:00:55.000000000 +1200
+++ lilo-22.7.2-STEP/lilo.c	2006-07-12 16:21:58.556182500 +1200
@@ -389,8 +389,8 @@
     fprintf(errstd,"%7s%s [ -C config_file ] -I name [ options ]\n","",name);
     fprintf(errstd,"%7s%s [ -C config_file ] [ -s save_file ] "
       "-u | -U [ boot_device ]\n","",name);
-    fprintf(errstd,"%7s%s -A /dev/XXX [ N ]\t\tinquire/activate a partition\n","",name);
-    fprintf(errstd,"%7s%s -M /dev/XXX [ mbr | ext ]\tinstall master boot record\n","",name);
+    fprintf(errstd,"%7s%s -A /System/Devices/XXX [ N ]\t\tinquire/activate a partition\n","",name);
+    fprintf(errstd,"%7s%s -M /System/Devices/XXX [ mbr | ext ]\tinstall master boot record\n","",name);
     fprintf(errstd,"%7s%s -T help \t\t\tlist additional options\n", "", name);
     fprintf(errstd,"%7s%s -X\t\t\t\tinternal compile-time options\n", "", name);
 #endif /* !__MSDOS__ */
@@ -799,8 +799,8 @@
     if (new_root && *new_root) {
 	pp_fd = fopen(PARTITIONS, "r");
 	if (chroot(new_root) < 0) die("chroot %s: %s",new_root,strerror(errno));
-	if (chdir("/dev") < 0)
-	        warn("root at %s has no /dev directory", new_root);
+	if (chdir("/System/Devices") < 0)
+	        warn("root at %s has no /System/Devices directory", new_root);
 	if (chdir("/") < 0) die("chdir /: %s",strerror(errno));
     }
     if (atexit(temp_remove)) die("atexit() failed");
diff -urN lilo-22.7.2/lilo.h lilo-22.7.2-STEP/lilo.h
--- lilo-22.7.2/lilo.h	2006-07-06 04:01:26.000000000 +1200
+++ lilo-22.7.2-STEP/lilo.h	2006-07-12 16:21:55.760007750 +1200
@@ -87,7 +87,7 @@
 #if VERSION_MINOR>50 && DEBUG
 #define PARTITIONS "./devfs_partitions"
 #else
-#define PARTITIONS "/proc/partitions"
+#define PARTITIONS "/System/Processes/partitions"
 #endif
 
 
diff -urN lilo-22.7.2/lilo.lsm lilo-22.7.2-STEP/lilo.lsm
--- lilo-22.7.2/lilo.lsm	2006-07-06 04:08:18.000000000 +1200
+++ lilo-22.7.2-STEP/lilo.lsm	2006-07-12 16:21:55.195972500 +1200
@@ -9,7 +9,7 @@
 Author:		Werner Almesberger <wa@almesberger.net>
 		John Coffman <johninsd@san.rr.com> (beyond v.21)
 Maintained-by:	John Coffman <johninsd@san.rr.com>
-Primary-site:	http://www.ibiblio.org/pub/Linux/system/boot/lilo
+Primary-site:	http://www.ibiblio.org/pub/Linux/system/System/Boot/lilo
 		  2kB lilo-22.7.2.announce.txt
 		433kB lilo-22.7.2.src.tar.gz
 		  1kB lilo-22.7.2.src.tar.gz.sig
diff -urN lilo-22.7.2/Makefile lilo-22.7.2-STEP/Makefile
--- lilo-22.7.2/Makefile	2006-07-06 04:03:14.000000000 +1200
+++ lilo-22.7.2-STEP/Makefile	2006-07-12 21:34:07.034639250 +1200
@@ -1,10 +1,10 @@
 # Configuration variables
 
-# They can also be stored in a file /etc/lilo.defines, e.g.
+# They can also be stored in a file /System/Settings/lilo.defines, e.g.
 # -DIGNORECASE -DONE_SHOT
 
 # The variables configured in this Makefile are ignored if
-# /etc/lilo.defines exists
+# /System/Settings/lilo.defines exists
 
 # * ATARAID	  Detect 'dmraid' drivers (linux/drivers/raid/dm.c).
 #   AUTOAUTO	  Enable automatic generation of change rules for MS partitions;
@@ -40,7 +40,7 @@
 #		  a system without a keyboard; alters default descriptor
 #		  to be booted.  Enable the 'nokbdisable' keyword also.
 #   NOSERIAL	  Don't assemble serial line support in the boot loader.
-#   OLD_DIRSTR    Use old locations of config and boot files: (/etc/lilo)
+#   OLD_DIRSTR    Use old locations of config and boot files: (/System/Settings/lilo)
 # * ONE_SHOT      Disable the command-line and password timeout if any key is
 #		  hit at the boot prompt.
 # * PASS160	  Use 160-bit password hash (Secure Hash Standard, see
@@ -73,31 +73,30 @@
 
 # End of configuration variables
 
-SBIN_DIR=/sbin
-CFG_DIR=/etc
-BOOT_DIR=/boot
-USRSBIN_DIR=/usr/sbin
+SBIN_DIR=/System/Applications/Lilo-22.7.2/bin
+CFG_DIR=/System/Settings
+BOOT_DIR=/System/Boot
+USRSBIN_DIR=/System/Applications/Lilo-22.7.2/bin
 # set the following if you wish LILO.COM to be installed
 DOS_DIR=/dosC/boot
 #
 #MAN_DIR=`if [ -z "$(whereis lilo | grep 'lilo.8')" ]; then \
 #	whereis lilo | sed -e "sX.* /usrX/usrX" -e "sX/man8/lilo.8.*XX" ; \
-#	elif [ -f /usr/bin/manpath ]; then \
+#	elif [ -f /System/Tools/manpath ]; then \
 #  manpath | sed "s/:.*//"; else echo /usr/man; fi`
 #
-MAN_DIR=`if [ -f /usr/bin/manpath ]; then \
-	manpath | sed "s/:.*//"; else echo /usr/man; fi`
+MAN_DIR=/System/Applications/Lilo-22.7.2/man
 BUILTIN=1
 
-PCONFIG=$(KVER) $(LILO) `( if [ -r $$ROOT/etc/lilo.defines ]; then \
-  cat $$ROOT/etc/lilo.defines; else echo $(CONFIG); fi ) | \
+PCONFIG=$(KVER) $(LILO) `( if [ -r $$ROOT/System/Settings/lilo.defines ]; then \
+  cat $$ROOT/System/Settings/lilo.defines; else echo $(CONFIG); fi ) | \
   sed 's/-D/-DLCF_/g'`
 LILO=-DLILO=0x7179bbbd
-KVER=`if [ -f /usr/include/linux/version.h ]; then echo -DHAS_VERSION_H; fi`
+KVER=`if [ -f /System/Library/Headers/include/linux/version.h ]; then echo -DHAS_VERSION_H; fi`
 TMP=_TmP_
 
 
-SHELL=/bin/sh
+SHELL=/System/Tools/sh
 CC=gcc
 CPP=$(CC) -E
 AS86=as86 -0 -a
@@ -155,7 +154,7 @@
 # everything needed to run, just short of installation
 #
 all:	lilo bootsect.b diag1.img # OBSOLETE:  $(BOOTS) edit dparam.com activate
-	if [ -x /usr/bin/bcc -o -x /usr/local/bin/bcc ]; then \
+	if [ -x /System/Tools/bcc -o -x /usr/local/System/Tools/bcc ]; then \
 		make diagnostic; \
 		make dosexe; fi
 
@@ -210,7 +209,7 @@
 	@echo Insert a blank, formatted, floppy into drive 0
 	@echo "Press <Enter> to continue, <^C> to abort ..."
 	@read
-	cat bootsect.b disk.com | dd of=/dev/fd0 bs=512
+	cat bootsect.b disk.com | dd of=/System/Devices/fd0 bs=512
 
 floppy2:	test.img disk.b
 	@echo
@@ -220,7 +219,7 @@
 diagnostic:	test.img diag2.img diag3.img
 dosexe:		test.img lilo.com
 
-#	if [ -x /usr/bin/bcc -o -x /usr/local/bin/bcc ]; then make diagnostic; \
+#	if [ -x /System/Tools/bcc -o -x /usr/local/System/Tools/bcc ]; then make diagnostic; \
 #	else echo "You don't seem to have the 'bcc' compiler from the 'dev86' package."; \
 #		exit 1; fi
 
@@ -228,7 +227,7 @@
 	echo $(MAN_DIR)
 
 #check-config:
-#		$(CPP) check-config.cpp $(PCONFIG) >/dev/null
+#		$(CPP) check-config.cpp $(PCONFIG) >/System/Devices/null
 
 .c.o:
 		$(CC) -c $(CFLAGS) $*.c
@@ -411,8 +410,8 @@
 #
 install:  all
 	if [ ! -d $$ROOT$(SBIN_DIR) ]; then mkdir $$ROOT$(SBIN_DIR); fi
-	if [ ! -d $$ROOT$(CFG_DIR) ]; then mkdir $$ROOT$(CFG_DIR); fi
-	if [ ! -d $$ROOT$(BOOT_DIR) ]; then mkdir $$ROOT$(BOOT_DIR); fi
+	if [ ! -d $(CFG_DIR) ]; then mkdir $(CFG_DIR); fi
+	if [ ! -d $(BOOT_DIR) ]; then mkdir $(BOOT_DIR); fi
 	if [ ! -d $$ROOT$(USRSBIN_DIR) ]; then \
 	  mkdir -p $$ROOT$(USRSBIN_DIR); fi
 	if [ ! -d $$ROOT$(MAN_DIR) ]; then mkdir $$ROOT$(MAN_DIR); fi  
@@ -421,31 +420,31 @@
 	if [ ! -d $$ROOT$(MAN_DIR)/man8 ]; then \
 	  mkdir $$ROOT$(MAN_DIR)/man8; fi  
 	if [ -f diag1.img ]; then \
-	  cp -f diag1.img $$ROOT$(BOOT_DIR); fi
+	  cp -f diag1.img $(BOOT_DIR); fi
 	if [ -f diag2.img ]; then \
-	  cp -f diag2.img $$ROOT$(BOOT_DIR); fi
-	if [ ! -L $$ROOT$(BOOT_DIR)/boot.b -a -f $$ROOT$(BOOT_DIR)/boot.b ]; then \
-	  mv $$ROOT$(BOOT_DIR)/boot.b $$ROOT$(BOOT_DIR)/boot.old; fi
-	if [ -f $$ROOT$(BOOT_DIR)/boot-bmp.b ]; then \
-	  mv $$ROOT$(BOOT_DIR)/boot-bmp.b $$ROOT$(BOOT_DIR)/boot-bmp.old; fi
-	if [ -f $$ROOT$(BOOT_DIR)/boot-menu.b ]; then \
-	  mv $$ROOT$(BOOT_DIR)/boot-menu.b $$ROOT$(BOOT_DIR)/boot-menu.old; fi
-	if [ -f $$ROOT$(BOOT_DIR)/boot-text.b ]; then \
-	  mv $$ROOT$(BOOT_DIR)/boot-text.b $$ROOT$(BOOT_DIR)/boot-text.old; fi
-	if [ -f $$ROOT$(BOOT_DIR)/chain.b ]; then \
-	  mv $$ROOT$(BOOT_DIR)/chain.b $$ROOT$(BOOT_DIR)/chain.old; fi
-	if [ -f $$ROOT$(BOOT_DIR)/os2_d.b ]; then \
-	  mv $$ROOT$(BOOT_DIR)/os2_d.b $$ROOT$(BOOT_DIR)/os2_d.old; fi
-	if [ -f $$ROOT$(BOOT_DIR)/mbr.b ]; then \
-	  mv $$ROOT$(BOOT_DIR)/mbr.b $$ROOT$(BOOT_DIR)/mbr.old; fi
+	  cp -f diag2.img $(BOOT_DIR); fi
+	if [ ! -L $(BOOT_DIR)/boot.b -a -f $(BOOT_DIR)/boot.b ]; then \
+	  mv $(BOOT_DIR)/boot.b $(BOOT_DIR)/boot.old; fi
+	if [ -f $(BOOT_DIR)/boot-bmp.b ]; then \
+	  mv $(BOOT_DIR)/boot-bmp.b $(BOOT_DIR)/boot-bmp.old; fi
+	if [ -f $(BOOT_DIR)/boot-menu.b ]; then \
+	  mv $(BOOT_DIR)/boot-menu.b $(BOOT_DIR)/boot-menu.old; fi
+	if [ -f $(BOOT_DIR)/boot-text.b ]; then \
+	  mv $(BOOT_DIR)/boot-text.b $(BOOT_DIR)/boot-text.old; fi
+	if [ -f $(BOOT_DIR)/chain.b ]; then \
+	  mv $(BOOT_DIR)/chain.b $(BOOT_DIR)/chain.old; fi
+	if [ -f $(BOOT_DIR)/os2_d.b ]; then \
+	  mv $(BOOT_DIR)/os2_d.b $(BOOT_DIR)/os2_d.old; fi
+	if [ -f $(BOOT_DIR)/mbr.b ]; then \
+	  mv $(BOOT_DIR)/mbr.b $(BOOT_DIR)/mbr.old; fi
 	if [ -f os2_d.b  -a  $(BUILTIN) = 0 ]; then \
-	  cp os2_d.b $$ROOT$(BOOT_DIR); fi
+	  cp os2_d.b $(BOOT_DIR); fi
 	if [ $(BUILTIN) = 0 ]; then \
-	  cp boot-text.b boot-menu.b boot-bmp.b chain.b mbr.b $$ROOT$(BOOT_DIR); fi
-	if [ ! -L $$ROOT$(BOOT_DIR)/boot.b  -a  $(BUILTIN) = 0 ]; then \
-	  ln -s boot-menu.b $$ROOT$(BOOT_DIR)/boot.b; fi
+	  cp boot-text.b boot-menu.b boot-bmp.b chain.b mbr.b $(BOOT_DIR); fi
+	if [ ! -L $(BOOT_DIR)/boot.b  -a  $(BUILTIN) = 0 ]; then \
+	  ln -s boot-menu.b $(BOOT_DIR)/boot.b; fi
 	if [ $(BUILTIN) = 1 ]; then \
-	  rm -f $$ROOT$(BOOT_DIR)/boot.b; fi
+	  rm -f $(BOOT_DIR)/boot.b; fi
 	cp mkrescue $$ROOT$(SBIN_DIR)
 	cp lilo $$ROOT$(SBIN_DIR)
 	strip $$ROOT$(SBIN_DIR)/lilo
@@ -455,8 +454,8 @@
 	cp manPages/lilo.conf.5 $$ROOT$(MAN_DIR)/man5
 	if [ -d $$ROOT$(DOS_DIR) -a -f lilo.com ]; then \
 	  cp lilo.com $$ROOT$(DOS_DIR); fi
-	@if [ -e $$ROOT/etc/lilo/install ]; then echo; \
-	  echo -n "$$ROOT/etc/lilo/install is obsolete. LILO is now ";\
+	@if [ -e /System/Settings/lilo/install ]; then echo; \
+	  echo -n "/System/Settings/lilo/install is obsolete. LILO is now ";\
 	  echo "re-installed "; \
 	  echo "by just invoking $(SBIN_DIR)/lilo"; echo; fi
 	@echo "$(SBIN_DIR)/lilo must now be run to complete the update."
diff -urN lilo-22.7.2/manPages/lilo.8 lilo-22.7.2-STEP/manPages/lilo.8
--- lilo-22.7.2/manPages/lilo.8	2005-10-08 07:10:38.000000000 +1300
+++ lilo-22.7.2-STEP/manPages/lilo.8	2006-07-12 16:22:05.124593000 +1200
@@ -36,40 +36,40 @@
 .SH SYNOPSIS
 Main function:
 .LP
-.B " /sbin/lilo"
+.B " /System/AdminTools/lilo"
 \- install boot loader
 .LP
 Auxiliary uses:
 .LP
-.B " /sbin/lilo -A"
+.B " /System/AdminTools/lilo -A"
 \- activate/show active partition
 .br
-.B " /sbin/lilo -E"
+.B " /System/AdminTools/lilo -E"
 \- edit header or update a bitmap file
 .br
-.B " /sbin/lilo -I"
+.B " /System/AdminTools/lilo -I"
 \- inquire path name of current kernel
 .br
-.B " /sbin/lilo -M "
+.B " /System/AdminTools/lilo -M "
 \- write a Master Boot Loader on a device
 .br
-.B " /sbin/lilo -q"
+.B " /System/AdminTools/lilo -q"
 \- query map
 .br
-.B " /sbin/lilo -R"
+.B " /System/AdminTools/lilo -R"
 \- set default command line for next reboot
 .br
-.B " /sbin/lilo -T"
+.B " /System/AdminTools/lilo -T"
 \- tell more about specified topic
 .br
-.B " /sbin/lilo {-u|-U}"
+.B " /System/AdminTools/lilo {-u|-U}"
 \- uninstall LILO boot loader
 .SH DESCRIPTION
 .LP
 .B lilo
 installs a boot loader that will be activated the next time you boot your
 system. The default configuration file
-.I "/etc/lilo.conf"
+.I "/System/Settings/lilo.conf"
 (see 'man lilo.conf') will contain most options, but many, including
 those which override the
 configuration file, may be specified on the command line.
@@ -78,7 +78,7 @@
 .BI "\-\^A " "master-device [ N ]"
 Used with a single argument, inquire of active partition on device
 .IR master-device ;
-e.g., \fI/dev/hda\fP.  With N==0, deactivate all partitions on the device.  With
+e.g., \fI/System/Devices/hda\fP.  With N==0, deactivate all partitions on the device.  With
 N in the range [1..n], activate the specified partition and deactivate all
 others.  Normally, only primary partitions [1..4] may be activated, but if
 the Extended Master Boot Loader is present on the Master Boot Record
@@ -90,7 +90,7 @@
 .TP
 .BI "\-\^b " bootdev
 Specify the boot device; i.e., where the boot loader will be installed.
-"-b /dev/hda" specifies the Master Boot Record; "-b /dev/sdb5" specifies
+"-b /System/Devices/hda" specifies the Master Boot Record; "-b /System/Devices/sdb5" specifies
 the first extended partition on the second SCSI disk.
 .TP
 .BI "\-\^B " bitmap-file
@@ -105,7 +105,7 @@
 .B lilo
 Specify an alternate pathname for the configuration file.
 This option overrides the use of the default configuration file,
-.IR "/etc/lilo.conf" .
+.IR "/System/Settings/lilo.conf" .
 .TP
 .BI "\-\^d " delay
 Specifies the delay time in tenths of a second (20 = 2 sec) before
@@ -137,7 +137,7 @@
 .TP
 .BI "\-\^f " disk-tab
 Specify disk geometry parameter file. (The default is
-.IR /etc/disktab .)
+.IR /System/Settings/disktab .)
 .TP
 .BI "\-\^F"
 Override boot sector check for filesystems (e.g., swap, XFS, ...) which might be
@@ -155,7 +155,7 @@
 .TP
 .BI "\-\^i " boot-loader
 Specify a file to be used as the new boot loader. (The default is
-.IR /boot/boot.b .)
+.IR /System/Boot/boot.b .)
 .TP
 .BI "\-I " "label [D|a|i|k|r|R]"
 .B label
@@ -222,7 +222,7 @@
 
 .I "-P <global-option>"
 allows the passing of any global option which may appear in the global
-section (top) of the configuration file (/etc/lilo.conf).  For instance,
+section (top) of the configuration file (/System/Settings/lilo.conf).  For instance,
 .I -P nowarn
 will pass the "nowarn" option, just as though "nowarn" appeared in the
 configuration file (same as the "-w" switch).  Similarly,
@@ -238,7 +238,7 @@
 List the currently mapped files.
 .B lilo
 maintains a file, by default
-.IR "/boot/map" ,
+.IR "/System/Boot/map" ,
 containing the name and location of the kernel(s) to boot.
 This option will list the names therein.  Use with \fB-v\fP for
 more detailed information about the installed boot loader.
@@ -246,11 +246,11 @@
 .BI "\-\^r " root-directory
 Before doing anything else, do a \fIchroot\fP to the indicated
 directory. The new root directory must contain a
-.I /dev
+.I /System/Devices
 directory, and may need a
 .I /boot
 directory. It may also need an
-.IR /etc/lilo.conf " file."
+.IR /System/Settings/lilo.conf " file."
 .TP
 .BI "\-\^R " "command line"
 This option sets the default command for the boot loader the next
@@ -263,12 +263,12 @@
 When
 .B lilo
 writes a new boot sector, it preserves the former contents of the sector
-in a file, named by default \fI/boot/boot.NNNN\fP,
+in a file, named by default \fI/System/Boot/boot.NNNN\fP,
 where NNNN is the hexadecimal representation of the major and minor
 device numbers of the drive/partition. This option specifies the backup
 save file in one of three ways: a save directory (default is '/boot') using
 the default filename 'boot.NNNN' in the specified directory; a pathname template
-to which '.NNNN' is appended (default would be '/boot/boot');
+to which '.NNNN' is appended (default would be '/System/Boot/boot');
 or the full pathname of the file, which must include the correct '.NNNN'
 suffix. When used with the
 \fB-u\fP option, the full file pathname must be specified.
@@ -303,7 +303,7 @@
            e.g., geom=0x80
    geom  - list drive geometry for all drives
    table=<drive> list the primary partition table;
-           e.g., table=/dev/sda
+           e.g., table=/System/Devices/sda
    video - list graphic modes available to boot
            loader
 .fi
@@ -347,8 +347,8 @@
 When used with the -M switch, clears the Volume-ID.  Usually used
 in the following sequence to generate a new Volume-ID:
 .nf
-     lilo -z -M /dev/hda
-     lilo -M /dev/hda
+     lilo -z -M /System/Devices/hda
+     lilo -M /System/Devices/hda
 .fi
 .br
 .TP
diff -urN lilo-22.7.2/manPages/lilo.conf.5 lilo-22.7.2-STEP/manPages/lilo.conf.5
--- lilo-22.7.2/manPages/lilo.conf.5	2005-11-28 17:43:18.000000000 +1300
+++ lilo-22.7.2-STEP/manPages/lilo.conf.5	2006-07-12 16:22:05.392609750 +1200
@@ -22,7 +22,7 @@
 .SH DESCRIPTION
 .LP
 This file, by default
-.IR /etc/lilo.conf ,
+.IR /System/Settings/lilo.conf ,
 is read by the boot loader installer 'lilo' (see lilo(8)).
 .LP
 It might look as follows:
@@ -31,42 +31,42 @@
 # lilo.conf
 #
 #  global options:
-boot=/dev/hda
+boot=/System/Devices/hda
 prompt
 timeout=150
 lba32
 compact
 vga=normal
-root=/dev/hda1
+root=/System/Devices/hda1
 read-only
 menu-title=" John's Computer "
 #
 #  bootable kernel images:
-image=/boot/zImage-1.5.99
+image=/System/Boot/zImage-1.5.99
      label=try
-image=/boot/zImage-1.0.9
+image=/System/Boot/zImage-1.0.9
      label=1.0.9
 image=/tamu/vmlinuz
      label=tamu
      initrd=initramdisk.img
-     root=/dev/hdb2
+     root=/System/Devices/hdb2
      vga=ask
 #
 #  other operating systems:
-other=/dev/hda3
+other=/System/Devices/hda3
      label=dos
      boot-as=0x80    # must be C:
-other=/dev/hdb1
+other=/System/Devices/hdb1
      label=Win98
      boot-as=0x80    # must be C:
-other=/dev/hdb5
+other=/System/Devices/hdb5
      label=os2
      loader=os2_d
      table=E:   # os2 sees as E:
 .fi
 .LP
 This configuration file specifies that lilo uses the Master
-Boot Record on /dev/hda. (For a discussion of the various ways
+Boot Record on /System/Devices/hda. (For a discussion of the various ways
 to use lilo, and the interaction with other operating systems,
 see user.tex from the lilo documentation.)
 .LP
@@ -80,7 +80,7 @@
 The title of this menu is overridden with the menu
 title specification in this configuration file.
 If you enter nothing,
-then the default kernel image, the first mentioned, (/boot/zImage-1.5.99)
+then the default kernel image, the first mentioned, (/System/Boot/zImage-1.5.99)
 will be booted after a timeout of 15 seconds (150 deciseconds).
 There may be at least 16 images mentioned in lilo.conf. (The exact number depends
 upon compilation options.)
@@ -106,7 +106,7 @@
 multiple backups may be created.  The '.NNNN' suffix is the hexadecimal
 representation of the major and minor device numbers of the device or
 partition. If this option is not specified, the default name of boot sector
-backups is '/boot/boot.NNNN'. If a backup already exists, it will be
+backups is '/System/Boot/boot.NNNN'. If a backup already exists, it will be
 preserved, rather than overwritten.  C.f., \fBforce-backup=\fP below.
 .TP
 .BI "bios-passes-dl=" <option>
@@ -185,7 +185,7 @@
 the boot sector. If this keyword is omitted, the boot sector is read
 from (and possibly written to) the device that is currently mounted as root.
 A raid installation is initiated by specifying a RAID1 device as the boot
-device; e.g., "boot=/dev/md0".  Note that LILO version 22.0 and later
+device; e.g., "boot=/System/Devices/md0".  Note that LILO version 22.0 and later
 operate differently from earlier versions with respect to the actual
 location of the boot records.
 .TP
@@ -252,11 +252,11 @@
 For example,
 .sp
 .nf
-       disk=/dev/sda
+       disk=/System/Devices/sda
             bios=0x80
-       disk=/dev/hda
+       disk=/System/Devices/hda
             bios=0x81
-       disk=/dev/sdb
+       disk=/System/Devices/sdb
             inaccessible
 .fi
 .sp
@@ -277,7 +277,7 @@
 Other options include the specification of disk geometry; e.g.,
 .sp
 .nf
-       disk=/dev/fd0
+       disk=/System/Devices/fd0
             sectors=18
             heads=2
             cylinders=80
@@ -291,13 +291,13 @@
 (22.5.8) Developers who have implemented a disk driver for a new block storage
 device will have to indicate to LILO the maximum number of partitions
 on the device.  This is in addition to making all of the necessary
-entries for the device in the "/dev" directory (with 'mknod').  The
+entries for the device in the "/System/Devices" directory (with 'mknod').  The
 maximum number of partitions must be one of 63 (like an IDE disk), 31 (uncommon), 15
 (like SCSI disks -- most common value), or 7 (like one array controller).
 An example specifictaion would be:
 .sp
 .nf
-     disk=/dev/userd0
+     disk=/System/Devices/userd0
           max-partitions=15
 .fi
 .sp
@@ -307,12 +307,12 @@
 viz.,
 .sp
 .nf
-       disk=/dev/loop0
+       disk=/System/Devices/loop0
             bios=0x80			# use this BIOS code
             max-partitions=7		# declare partitionable
-            paritition=/dev/loop1
+            paritition=/System/Devices/loop1
                  start=63		# offset from sector 0
-            paritition=/dev/loop2
+            paritition=/System/Devices/loop2
                  start=102400		# offset from sector 0
 .fi
 .sp
@@ -320,7 +320,7 @@
 .BI "disktab=" <disktab-file>
 Specifies the name of the disk parameter table.
 The map installer looks for
-.I /etc/disktab
+.I /System/Settings/disktab
 if `disktab' is omitted. The use of disktabs is discouraged.
 .TP
 .BI "el-torito-bootable-CD"
@@ -406,7 +406,7 @@
 (geometric) addresses. Linear addresses are translated at run time to
 geometric addresses, and are limited to cylinders <= 1023. When using
 `linear' with large disks,
-.I /sbin/lilo
+.I /System/AdminTools/lilo
 may generate references to inaccessible disk cylinders. 'lba32' avoids
 many of these pitfalls with its use of packet addressing, but requires a
 recent BIOS (post-1998).  The 'linear' option is considered obsolete,
@@ -422,7 +422,7 @@
 .TP
 .BI "map=" <map-file>
 Specifies the location of the map file. If `map' is omitted, the file
-.I /boot/map
+.I /System/Boot/map
 is used.
 
 On machines with a pre-1998 BIOS, the EDD bios extensions which are required
@@ -529,7 +529,7 @@
 This option only has meaning for RAID1 installations.
 The <option> may be specified as \fInone\fP, \fIauto\fP, \fImbr\fP,
 \fImbr-only\fP,
-or a comma-separated list of devices; e.g., "/dev/hda,/dev/hdc6".  Starting
+or a comma-separated list of devices; e.g., "/System/Devices/hda,/System/Devices/hdc6".  Starting
 with LILO version 22.0, the boot record is normally written to the first
 sector of the RAID1 partition.  On PARALLEL raid sets, no other boot records
 are needed.  The
@@ -566,7 +566,7 @@
 .fi
 .sp
 <port>:  the number of the serial port, zero-based. 0 corresponds to
-COM1 alias /dev/ttyS0, etc. All four ports can be used (if present).
+COM1 alias /System/Devices/ttyS0, etc. All four ports can be used (if present).
 .sp
 <bps>:  the baud rate of the serial port. The following baud rates are 
 supported: 110, 150, 300, 600, 1200, 2400(default), 4800, 9600, plus the 
@@ -604,7 +604,7 @@
 With the use of
 this option, BIOS codes of disks MUST be correctly specified at install
 time; either guessed correctly by LILO (which often fails on
-mixed IDE/SCSI systems), or explicitly specified with 'disk=/dev/XXX
+mixed IDE/SCSI systems), or explicitly specified with 'disk=/System/Devices/XXX
 bios=0xYY' statements.  The use of this option precludes
 any activity which may switch around the BIOS codes assigned to particular
 disk devices, as noted above.
@@ -751,7 +751,7 @@
 .sp
 (22.6) The root filesystem may also be specified by a
 .B LABEL=
-directive, as in '/etc/fstab'.  In this case, the argument to
+directive, as in '/System/Settings/fstab'.  In this case, the argument to
 .I root=
 must be enclosed in quotation marks, to avoid a syntax error on the second
 equal sign; viz., 
@@ -772,7 +772,7 @@
 an operator.  The kernel command line parser is very much simpler, and
 must not see any quotation marks.  Simply stated, only use the quotation
 marks within
-.IR /etc/lilo.conf .
+.IR /System/Settings/lilo.conf .
 .TP
 .BI "vga=" <mode>
 This specifies the VGA text mode that should be selected when 
@@ -803,7 +803,7 @@
 .LP
 Used to load systems other than Linux. The `other = <device>' specifies
 the boot sector of an alternate system contained on a device or disk
-partition; e.g., DOS on, say, `/dev/hda2', or a floppy on `/dev/fd0'.
+partition; e.g., DOS on, say, `/System/Devices/hda2', or a floppy on `/System/Devices/fd0'.
 In the case of booting another system there are these options:
 .TP
 .BI "loader=" <chain-loader>
@@ -828,7 +828,7 @@
 have other means to determine from which partition they have been booted.
 E.g., MS-DOS usually stores the geometry of the boot disk or partition
 in its boot sector.)
-Note that /sbin/lilo must be re-run if a partition table mapped referenced
+Note that /System/AdminTools/lilo must be re-run if a partition table mapped referenced
 with `table' is modified.
 .TP
 .BI "table=" <drive-letter>
@@ -853,20 +853,20 @@
 For example,
 .IP
 .nf
-   other=/dev/hda2
+   other=/System/Devices/hda2
       label=dos
-      table=/dev/hda
+      table=/System/Devices/hda
       change
         automatic
-        partition=/dev/hda1
+        partition=/System/Devices/hda1
            set=DOS12_hidden
            deactivate
-        partition=/dev/hda2
+        partition=/System/Devices/hda2
            set=DOS16_big_normal
            activate
 .fi
 .IP
-specifies that when primary partition /dev/hda2 is booted, automatic
+specifies that when primary partition /System/Devices/hda2 is booted, automatic
 change-rules will be in effect; plus, partition 1, a DOS12 partition, will
 be set hidden, and deactivated.  In addition, partition 2, will be set
 normal, and activated.  Activation sets the boot-flag in the partition
@@ -938,7 +938,7 @@
 sector is on a fixed-format floppy disk device, using UNSAFE avoids the 
 need to put a readable disk into the drive when running the map 
 installer. If the boot sector is on a hard drive, the BIOS device code
-of the drive will have to be specified explicitly with "disk=/dev/XXXX
+of the drive will have to be specified explicitly with "disk=/System/Devices/XXXX
 bios=0x8X inaccessible" in the configuration file.
 `unsafe' and `table' (explicit or implicit) are mutually incompatible. 
 
@@ -1000,7 +1000,7 @@
 the password, it should be specified: \fBpassword=""\fP.
 Passwords entered interactively are not required to be entered again if the
 boot installer is re-run. They are cached, in hashed form, in a companion
-file to the config-file, default name: \fB/etc/lilo.conf.crc\fP. If the 
+file to the config-file, default name: \fB/System/Settings/lilo.conf.crc\fP. If the 
 config-file is updated, a warning message
 will be issued telling you to re-run \fIlilo -p\fP to force re-creation of the
 password cache file.
diff -urN lilo-22.7.2/manPages/mkrescue.8 lilo-22.7.2-STEP/manPages/mkrescue.8
--- lilo-22.7.2/manPages/mkrescue.8	2004-11-17 10:38:56.000000000 +1300
+++ lilo-22.7.2-STEP/manPages/mkrescue.8	2006-07-12 16:22:05.396610000 +1200
@@ -14,14 +14,14 @@
 mkrescue \- make rescue floppy
 .SH SYNOPSIS
 .LP
-.B "/sbin/mkrescue"
+.B "/System/AdminTools/mkrescue"
 \- make a bootable rescue floppy or CD using the default kernel specified
 in \fIlilo.conf\fP.
 .SH DESCRIPTION
 .LP
 .B mkrescue
 takes its specifation for the kernel from the default image specified in
-\fB/etc/lilo.conf\fP.  If the actual default is an \fIother=\fP specification,
+\fB/System/Settings/lilo.conf\fP.  If the actual default is an \fIother=\fP specification,
 then use the first \fIimage=\fP specification.
 Any associated initial ramdisk (initrd=), and \fIappend=\fP
 options will also be used.  The root directory will be taken to be the
@@ -43,7 +43,7 @@
 be hit to proceed from these pauses.
 .TP
 .BI "--device <device>"
-Make the floppy on a device other than /dev/fd0.  The floppy disk will
+Make the floppy on a device other than /System/Devices/fd0.  The floppy disk will
 always be made to boot on BIOS device code 0x00 (A: drive), without
 regard to the drive on which it is created.
 .TP
@@ -118,7 +118,7 @@
 option, to indicate a 16MB hard disk is to be generated for emulation.  This
 allows for very large kernel / initial ramdisk combinations on CD-R.  The
 hard disk image is created using loopback devices
-"/dev/loop0" and "/dev/loop1", which
+"/System/Devices/loop0" and "/System/Devices/loop1", which
 must be free to utilize this size option.
 .TP
 .BI "--version"
diff -urN lilo-22.7.2/mkbdist lilo-22.7.2-STEP/mkbdist
--- lilo-22.7.2/mkbdist	2005-10-02 11:11:08.000000000 +1300
+++ lilo-22.7.2-STEP/mkbdist	2006-07-12 16:22:02.680440250 +1200
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/System/Tools/sh
 #
 MINOR=`grep VERSION_MINOR <version.h | sed -e "s/.*VERSION_MINOR *//" `
 MAJOR=`grep VERSION_MAJOR <version.h | sed -e "s/.*VERSION_MAJOR *//" `
diff -urN lilo-22.7.2/mkrescue lilo-22.7.2-STEP/mkrescue
--- lilo-22.7.2/mkrescue	2005-10-08 07:44:09.000000000 +1300
+++ lilo-22.7.2-STEP/mkrescue	2006-07-12 16:22:03.044463000 +1200
@@ -1,4 +1,4 @@
-#!/bin/bash
+#!/System/Tools/bash
 #
 # mkrescue
 #
@@ -16,7 +16,7 @@
 #	07-Jul-2003	   "		determine loopback dynamically 2.3
 #	29-Aug-2004	   "		allow --root LABEL=lblname  2.4
 #	01-Sep-2004	   "		fix check for LILO version  2.4
-#	03-Oct-2004	   "		get root= from /etc/fstab   2.5
+#	03-Oct-2004	   "		get root= from /System/Settings/fstab   2.5
 #	15-Nov-2004	   "		support --iso --size HD	    3.0
 #	18-Aug-2005	   "		applied temp-file security patch 3.1
 #	25-Sep-2005	   "		log config file on --debug  3.2
@@ -50,7 +50,7 @@
 	    [--root <device>] [--nocompact] [--noformat]
 	    [--iso] [--size 1440|1200|2880|HD]
 
-  --device  is the floppy drive; e.g.,  /dev/fd0
+  --device  is the floppy drive; e.g.,  /System/Devices/fd0
   --fast  specifies creation using a loopback device, which may be faster
   --fs  is the filesystem to make on the device; e.g.,  ext2
   --help  prints this helpfile
@@ -68,7 +68,7 @@
   --version  prints the version number of `basename $0`
 
 Used without any arguments, `basename $0` will use the default kernel in
-/etc/lilo.conf, the companion initrd (if any), and the specified root
+/System/Settings/lilo.conf, the companion initrd (if any), and the specified root
 filesystem to make a bootable rescue floppy.
 
 EOF
@@ -83,14 +83,14 @@
 	lilo=$(pwd)/lilo
 	config=$(pwd)/lilo.conf
 else
-	lilo=/sbin/lilo
-	config=/etc/lilo.conf
+	lilo=/System/AdminTools/lilo
+	config=/System/Settings/lilo.conf
 fi
 
 compact=-c
-device=/dev/fd0
+device=/System/Devices/fd0
 fs=ext2
-tmpbase=${TMPDIR:-/tmp}/mkrescue_$$
+tmpbase=${TMPDIR:-/System/TemporaryFiles}/mkrescue_$$
 mount=$tmpbase/mkrescue-flp
 mfile=$tmpbase/mkrescue-emu
 mtemp=$tmpbase/mkrescue-tmp
@@ -174,8 +174,8 @@
     exit 0
 fi
 
-umount $mount 2>/dev/null
-rm -rf $tmpbase 2>/dev/null
+umount $mount 2>/System/Devices/null
+rm -rf $tmpbase 2>/System/Devices/null
 mkdir $tmpbase || {
     echo "Could not create temporary directory."
     exit 1
@@ -265,7 +265,7 @@
 done
 
 if [ -z $image ]; then
-#	image=`cat /proc/cmdline | sed "s/.*BOOT_IMAGE=//" | sed "s/ .*//"`
+#	image=`cat /System/Processes/cmdline | sed "s/.*BOOT_IMAGE=//" | sed "s/ .*//"`
 	image=`$lilo -C $config -v0 -w -I " " D`
 fi
 
@@ -279,7 +279,7 @@
 if [ -z $root ]; then
 	root=`$lilo -C $config -v0 -w -I $image R`
 	if [ "$root" = "No root specified" ]; then
-		root=`grep </etc/fstab -v "^[ \t]*#" |
+		root=`grep </System/Settings/fstab -v "^[ \t]*#" |
 			grep "[[:space:]]/[[:space:]]" | \
 				sed -e "s/^[ \t]*//" -e "s/[ \t].*//"`
 		if [ -z $root ]; then
@@ -325,11 +325,11 @@
     elif [ $size = HD -o $size = hd ]; then
 	size=$hdsize
     fi
-    if [ $device = "/dev/fd0" ]; then
+    if [ $device = "/System/Devices/fd0" ]; then
 	device=rescue.iso
     fi
 else
-	umount $device 2>/dev/null 1>/dev/null
+	umount $device 2>/System/Devices/null 1>/System/Devices/null
 fi
 
 if [ $size = 0 ]; then
@@ -428,7 +428,7 @@
 
 	rm -rf $mount $mfile
 	mkdir $mount
-	dd bs=1024 count=$size of=$mfile if=/dev/zero
+	dd bs=1024 count=$size of=$mfile if=/System/Devices/zero
 	bsize=$size
 	mpart=$mfile
 	if [ $size = $hdsize ]; then
@@ -446,15 +446,15 @@
 EOF
 	    echo Partitioning HD "file   (this will take a minute)"
 	    fdisk -b 512 -S $sectors -H $heads -C $cylinders \
-		$mfile < $mtemp > /dev/null 2> /dev/null
+		$mfile < $mtemp > /System/Devices/null 2> /System/Devices/null
 	    rm -f $mtemp
 	    echo bsize = $bsize
 #read aline
-	    losetup -d /dev/$loopback 2>/dev/null
-            losetup -d /dev/$looppart 2>/dev/null
-            losetup /dev/$loopback $mfile
-	    losetup -o $(($sectors*512)) /dev/$looppart $mfile
-	    mpart=/dev/$looppart
+	    losetup -d /System/Devices/$loopback 2>/System/Devices/null
+            losetup -d /System/Devices/$looppart 2>/System/Devices/null
+            losetup /System/Devices/$loopback $mfile
+	    losetup -o $(($sectors*512)) /System/Devices/$looppart $mfile
+	    mpart=/System/Devices/$looppart
 	fi
 	echo Making filesystem
 	if [ "$fs" = ext2 ]; then
@@ -466,14 +466,14 @@
 #read aline
 	if [ $size != $hdsize ]; then
 	    mount -t $fs -o rw,loop $mfile $mount
-	    loopback=`mount | grep $mfile | sed -e "sX.*loop=/dev/XX" -e "s/).*//"`
+	    loopback=`mount | grep $mfile | sed -e "sX.*loop=/System/Devices/XX" -e "s/).*//"`
 	else
 	    mount -t $fs -o rw $mpart $mount
 	fi
 	if [ $debug = true ]; then
 		mount
 	fi
-	disk="/dev/$loopback"
+	disk="/System/Devices/$loopback"
 	if [ $debug = true ]; then
 		echo "disk=$disk"
 	fi
@@ -482,11 +482,11 @@
 
 	if [ "$format" = "yes" ]; then
 		echo Formatting $device with $fs filesystem...
-		dd of=$device if=/dev/zero bs=512 count=1
+		dd of=$device if=/System/Devices/zero bs=512 count=1
 		if [ "$fs" = ext2 ]; then
-			mkfs -t $fs -N 24 -b 1024 $device 1>/dev/null 2>/dev/null
+			mkfs -t $fs -N 24 -b 1024 $device 1>/System/Devices/null 2>/System/Devices/null
 		else
-			mkfs -t $fs $device 1>/dev/null 2>/dev/null
+			mkfs -t $fs $device 1>/System/Devices/null 2>/System/Devices/null
 		fi
 		echo done.
 		echo ""
@@ -506,7 +506,7 @@
 install=$install
 boot=$device
 map=map
-backup=/dev/null
+backup=/System/Devices/null
 message=message
 prompt
 timeout=150
@@ -517,7 +517,7 @@
 EOF
 if [ $size = $hdsize ]; then
 	echo "  max-partitions=7" >>$mountconfig
-	echo "  partition=/dev/$looppart  start=$sectors" >>$mountconfig
+	echo "  partition=/System/Devices/$looppart  start=$sectors" >>$mountconfig
 	echo static-bios-codes >>$mountconfig
 	bios=0x81
 else
@@ -618,9 +618,9 @@
 
 
 
-pushd $mount >/dev/null 2>/dev/null
+pushd $mount >/System/Devices/null 2>/System/Devices/null
 if [ "$fast" = fast ]; then
-	bootcmd="-b /dev/$loopback"
+	bootcmd="-b /System/Devices/$loopback"
 fi
 
 echo Running $lilo ...
@@ -638,7 +638,7 @@
 else
 	$lilo -C $mountconfig $compact $bootcmd || fast=error
 fi
-popd >/dev/null 2>/dev/null
+popd >/System/Devices/null 2>/System/Devices/null
 if [ "$fast" = error ]; then
 	echo -n `$lilo -V`
 	echo " failure."
@@ -659,8 +659,8 @@
 	out=$device
 	opt=
 	if [ $size = $hdsize ]; then
-	    losetup -d /dev/$looppart
-	    losetup -d /dev/$loopback
+	    losetup -d /System/Devices/$looppart
+	    losetup -d /System/Devices/$loopback
 	    opt=-hard-disk-boot
 	fi
 	mv $mfile $mount/boot.bin
diff -urN lilo-22.7.2/mksdist lilo-22.7.2-STEP/mksdist
--- lilo-22.7.2/mksdist	2005-10-07 10:56:27.000000000 +1300
+++ lilo-22.7.2-STEP/mksdist	2006-07-12 16:22:02.684440500 +1200
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/System/Tools/sh
 #
 MINOR=`grep VERSION_MINOR <version.h | sed -e "s/.*VERSION_MINOR *//" `
 MAJOR=`grep VERSION_MAJOR <version.h | sed -e "s/.*VERSION_MAJOR *//" `
diff -urN lilo-22.7.2/probe.c lilo-22.7.2-STEP/probe.c
--- lilo-22.7.2/probe.c	2006-07-06 04:02:13.000000000 +1200
+++ lilo-22.7.2-STEP/probe.c	2006-07-12 16:21:59.168220750 +1200
@@ -130,7 +130,7 @@
 { "EBDA",  do_ebda,  NULL,  "Extended BIOS Data Area information" },
 { "geom=", do_geom,  "<bios>", "Geometry CHS data for BIOS code 0x80, etc." },
 { "geom" , do_geom_all, NULL, "Geometry for all BIOS drives" },
-{ "table=", do_table, dev, "Partition table information for /dev/hda, etc."},
+{ "table=", do_table, dev, "Partition table information for /System/Devices/hda, etc."},
 { "video", do_video, NULL,  "Graphic mode information" },
 #if VOLID
 { "vol-ID", do_volid, NULL, "Volume ID check for uniqueness"},
@@ -176,7 +176,7 @@
     
     if (buf_valid>=0) return buf_valid;
     
-    if ((fd=open("/dev/mem", O_RDONLY)) < 0) return buf_valid=1;
+    if ((fd=open("/System/Devices/mem", O_RDONLY)) < 0) return buf_valid=1;
     at = lseek(fd, seek, SEEK_SET);
     if (at != seek) return buf_valid=1;
     get = sizeof(buf.b);
@@ -231,7 +231,7 @@
     i = buf.s5.length;
     *(int*)buf.s5.checksum = crc32((unsigned char*)&buf.s5 + 4, i-4, CRC_POLY1);
     
-    if ((fd=open("/dev/mem", O_WRONLY)) < 0) pdie("purge: can't open /dev/mem");
+    if ((fd=open("/System/Devices/mem", O_WRONLY)) < 0) pdie("purge: can't open /System/Devices/mem");
     if (lseek(fd, seek, SEEK_SET) != seek) pdie("purge: ");
     i = sizeof(buf.b);
     if (write(fd, &buf.b, i) != i) pdie("purge: ");
@@ -1176,7 +1176,7 @@
     printf("\nVolume ID's are%s unique.\n", unique ? " all" : " NOT");
     if (nv)
 	printf("   '-' marks an invalid Volume ID which will be automatically updated\n"
-		"\tthe next time  /sbin/lilo  is executed.\n");
+		"\tthe next time  /System/AdminTools/lilo  is executed.\n");
     if (!unique)
 	printf("   '*' marks a volume ID which is duplicated.  Duplicated ID's must be\n"
 		"\tresolved before installing a new boot loader.  The volume ID may\n"
diff -urN lilo-22.7.2/QuickInst lilo-22.7.2-STEP/QuickInst
--- lilo-22.7.2/QuickInst	2005-08-19 09:34:13.000000000 +1200
+++ lilo-22.7.2-STEP/QuickInst	2006-07-12 16:25:19.852762750 +1200
@@ -1,11 +1,11 @@
-#!/bin/sh
+#!/System/Tools/sh
 <<@
 
 LILO QUICK INSTALLATION	                      Version 22.5 of 15-Dec-2003
 -----------------------                       ---------------------------
 
 This installation script installs LILO and generates the configuration file
-/etc/lilo.conf. It uses safe defaults for most configuration options.
+/System/Settings/lilo.conf. It uses safe defaults for most configuration options.
 Please read the documentation (preferably the more complete LaTeX version,
 doc.tex) before making changes to the configuration generated by QuickInst.
 
@@ -37,12 +37,12 @@
 ------------- End of description. What follows is program code. -------------
 @
 
-CFG_SUFFIX=/etc
+CFG_SUFFIX=/System/Settings
 CFG_DIR=$ROOT$CFG_SUFFIX
 CFG_FILE=$CFG_DIR/lilo.conf
 BOOT_SUFFIX=/boot
 BOOT_DIR=$ROOT$BOOT_SUFFIX
-SBIN_DIR=$ROOT/sbin
+SBIN_DIR=$ROOT/System/AdminTools
 
 locate()
 {
@@ -60,21 +60,21 @@
 
 probe()
 {
-    [ ! -z "`dd if=$1 bs=1 count=1 2>/dev/null | tr '\0' x`" ]
+    [ ! -z "`dd if=$1 bs=1 count=1 2>/System/Devices/null | tr '\0' x`" ]
     return
 }
 
 bootflag()
 {
-    [ "XY" = "`(dd of=/dev/null bs=510 count=1; dd bs=2 count=1 |
-      tr -c '\125\252' . | tr '\125\252' XY) <$1 2>/dev/null`" ]
+    [ "XY" = "`(dd of=/System/Devices/null bs=510 count=1; dd bs=2 count=1 |
+      tr -c '\125\252' . | tr '\125\252' XY) <$1 2>/System/Devices/null`" ]
     return
 }
 
 krnltype()
 {
     if [ "YX" = "`(dd bs=2 count=1 | tr -c '\001\013' . | tr '\001\013' XY) \
-      <$1 2>/dev/null`" ]; then
+      <$1 2>/System/Devices/null`" ]; then
 	echo compound
     else
 	echo image
@@ -109,7 +109,7 @@
 	    echo
 	    continue
 	fi
-	if echo "$line" | grep '^!' >/dev/null; then
+	if echo "$line" | grep '^!' >/System/Devices/null; then
 	    sh -c "`echo \"$line\" | sed 's/^!//'`"
 	else
 	    eval $2="$line"
@@ -122,10 +122,10 @@
 {
     while true; do
 	get "$1" line $2
-	if echo "$line" | egrep -i '^y(|e(|s))$' >/dev/null; then
+	if echo "$line" | egrep -i '^y(|e(|s))$' >/System/Devices/null; then
 	    return 0
 	fi
-	if echo "$line" | egrep -i '^no?$' >/dev/null; then
+	if echo "$line" | egrep -i '^no?$' >/System/Devices/null; then
 	    return 1
 	fi
 	echo "YES or NO, please."
@@ -136,7 +136,7 @@
 askinitrd()
 {
     idef=""
-    for nn in /initrd /boot/initrd $ROOT/initrd $ROOT/boot/initrd; do
+    for nn in /initrd /System/Boot/initrd $ROOT/initrd $ROOT/System/Boot/initrd; do
 	if [ -f $ROOT/$nn ]; then
 	    idef=$nn
 	    break
@@ -164,16 +164,16 @@
 #####################################################
 
 echo
-if [ $ROOT/etc/lilo = `pwd` ]; then
+if [ $ROOT/System/Settings/lilo = `pwd` ]; then
     cat <<EOF
-You can't run QuickInst in /etc/lilo ! Please cd to the directory that
+You can't run QuickInst in /System/Settings/lilo ! Please cd to the directory that
 contains your LILO source files and try again.
 
 EOF
     exit 1
 fi
 
-if id | grep 'uid=0(' >/dev/null; then : ; else
+if id | grep 'uid=0(' >/System/Devices/null; then : ; else
     echo "You probably have to be root to install LILO."
     echo
     if yesno "Try to install LILO anyway ?" no; then : ; else
@@ -231,15 +231,15 @@
     echo
 fi
 
-if [ -f $ROOT/etc/lilo/install -a ! -L $ROOT/etc/lilo/install -a \
+if [ -f $ROOT/System/Settings/lilo/install -a ! -L $ROOT/System/Settings/lilo/install -a \
   "$replace" != "y" ]; then
     cat <<EOF
-/etc/lilo/install is a regular file and not a symbolic link. It should be
-a symbolic link to /sbin/lilo (see INCOMPAT for details).
+/System/Settings/lilo/install is a regular file and not a symbolic link. It should be
+a symbolic link to /System/AdminTools/lilo (see INCOMPAT for details).
 
 EOF
     if yesno "Replace install by a link ?" yes; then
-	ln -sf $SBIN_DIR/lilo $ROOT/etc/lilo/install
+	ln -sf $SBIN_DIR/lilo $ROOT/System/Settings/lilo/install
     fi
     echo
 fi
@@ -320,7 +320,7 @@
     exit 1
 fi
 
-version="`$SBIN_DIR/lilo -V 2>/dev/null | sed 's/LILO version \(0\.\)\?//' | sed 's/\..*//'`"
+version="`$SBIN_DIR/lilo -V 2>/System/Devices/null | sed 's/LILO version \(0\.\)\?//' | sed 's/\..*//'`"
 # echo LILO version $version is installed
 if [ -z "$version" ]; then
     cat <<EOF
@@ -344,8 +344,8 @@
 #EOF
 #fi
 
-if [ -d $ROOT/etc/lilo -a ! -x $ROOT/etc/lilo/install ]; then
-    ln -s $SBIN_DIR/lilo $ROOT/etc/lilo/install
+if [ -d $ROOT/System/Settings/lilo -a ! -x $ROOT/System/Settings/lilo/install ]; then
+    ln -s $SBIN_DIR/lilo $ROOT/System/Settings/lilo/install
 fi
 
 
@@ -376,13 +376,13 @@
     fi
 fi
 
-dev="`find /dev -maxdepth 1 -type b -name '[hs]da' | sed 's,/[hs]da$,,;1q'`"
+dev="`find /System/Devices -maxdepth 1 -type b -name '[hs]da' | sed 's,/[hs]da$,,;1q'`"
 if [ -z "$dev" ]; then
     cat <<EOF
-(Can't locate hda or sda device in /dev or in a subdirectory or it.
- Assuming disk devices live in /dev)
+(Can't locate hda or sda device in /System/Devices or in a subdirectory or it.
+ Assuming disk devices live in /System/Devices)
 EOF
-    dev="/dev"
+    dev="/System/Devices"
 else
     echo "(Disk devices live in $dev)"
 fi
@@ -390,7 +390,7 @@
 
 echo "Gathering configuration data ..."
 
-second=/dev/sdb
+second=/System/Devices/sdb
 
 if [ -L $dev/hda ]; then
     cat <<EOF
@@ -437,7 +437,7 @@
     echo "(/ is mounted on $root)"
 fi
 boot=""
-if echo $root | grep "^${first}[1-4]*\$" >/dev/null; then
+if echo $root | grep "^${first}[1-4]*\$" >/System/Devices/null; then
     boot=$root
 fi
 
@@ -450,12 +450,12 @@
 EOF
 while true; do
     get "Device name" inp $boot
-    if echo "$inp" | grep / >/dev/null; then : ; else
-	inp="/dev/$inp"
+    if echo "$inp" | grep / >/System/Devices/null; then : ; else
+	inp="/System/Devices/$inp"
     fi
     if echo "$inp" | egrep \
       "^${first}\$|^${first}[1-4]\$|^${second}\$|^${second}[1-4]\$" \
-      >/dev/null; then
+      >/System/Devices/null; then
 	if true -o probe "$inp"; then
 	    boot=$inp
 	    break
@@ -477,7 +477,7 @@
 curr_first=$first
 curr_second=$second
 
-if echo "$boot" | grep "$second" >/dev/null; then
+if echo "$boot" | grep "$second" >/System/Devices/null; then
     cat <<EOF
 
 You have decided to put the LILO boot sector on your SECOND disk ($second).
@@ -502,16 +502,16 @@
 EOF
     while true; do
 	get "Your choice" line keep
-	if echo "$line" | egrep -i '^k(|e(|ep?))$' >/dev/null; then
+	if echo "$line" | egrep -i '^k(|e(|ep?))$' >/System/Devices/null; then
 	    break
         fi
-        if echo "$line" | egrep -i '^r(|e(|m(|o(|ve?))))$' >/dev/null; then
+        if echo "$line" | egrep -i '^r(|e(|m(|o(|ve?))))$' >/System/Devices/null; then
             on_second=remove
 	    first=$second
 	    second=
 	    break
         fi
-	if echo "$line" | egrep -i '^s(|w(|ap?))$' >/dev/null; then
+	if echo "$line" | egrep -i '^s(|w(|ap?))$' >/System/Devices/null; then
             on_second=swap
 	    tmp=$first
 	    first=$second
@@ -545,10 +545,10 @@
 EOF
 fi
 
-if echo "$boot" | grep '^$first[1-4]$' >/dev/null; then
-    if [ "`dd if=$first bs=1 count=4 skip=2 2>/dev/null | \
+if echo "$boot" | grep '^$first[1-4]$' >/System/Devices/null; then
+    if [ "`dd if=$first bs=1 count=4 skip=2 2>/System/Devices/null | \
       tr -c 'LIO' '?'`" = "LILO" -o \
-      "`dd if=$first bs=1 count=4 skip=6 2>/dev/null | \
+      "`dd if=$first bs=1 count=4 skip=6 2>/System/Devices/null | \
       tr -c 'LIO' '?'`" = "LILO" ]; then
 
 	cat <<EOF
@@ -564,7 +564,7 @@
 fi
 
 disk=`echo $boot | sed 's/[1-4]$//'`
-oldboot=`$SBIN_DIR/lilo -A $disk 2>/dev/null`
+oldboot=`$SBIN_DIR/lilo -A $disk 2>/System/Devices/null`
 newboot=""
 if [ $boot != "$oldboot" -a ! -z "`echo "$boot" | sed 's|'$dev'/[sh]d.||'`" ];
   then
@@ -593,7 +593,7 @@
 fi
 
 kernel=""
-for n in /vmlinuz /boot/vmlinuz /linux /boot/linux /zImage /boot/zImage; do
+for n in /vmlinuz /System/Boot/vmlinuz /linux /System/Boot/linux /zImage /System/Boot/zImage; do
     if [ -f $ROOT/$n ]; then
 	kernel=$n
 	break
@@ -603,13 +603,13 @@
 cat <<EOF
 
 Please specify the name of the kernel image file you want to boot by default.
-You may list the $ROOT/boot directory with:  !ls $ROOT/boot/vm*
+You may list the $ROOT/boot directory with:  !ls $ROOT/System/Boot/vm*
 
 EOF
 while true; do
     get "Default kernel" inp $kernel
     if [ -f "$ROOT$inp" ]; then
-	if echo "$inp" | grep '^/' >/dev/null; then
+	if echo "$inp" | grep '^/' >/System/Devices/null; then
 	    kernel=$inp
 	    break
 	else
@@ -662,8 +662,8 @@
 echo
 if yesno "Define additional kernels ?" no; then
     default=""
-    for n in $kernel.old /vmlinux.old /boot/vmlinuz.old /linux.old \
-      /boot/linux.old /zImage.old /boot/zImage.old; do
+    for n in $kernel.old /vmlinux.old /System/Boot/vmlinuz.old /linux.old \
+      /System/Boot/linux.old /zImage.old /System/Boot/zImage.old; do
 	if [ -f $ROOT/$n ]; then
 	    default=$n
 	    break
@@ -680,7 +680,7 @@
 	if [ done = "$inp" ]; then
 	    break
 	fi
-	if echo "$inp" | grep '^/' >/dev/null; then
+	if echo "$inp" | grep '^/' >/System/Devices/null; then
 	    echo "`krnltype $inp` = $inp" >>$CFG_FILE.tmp
 	    if [ ! -f $ROOT$inp ]; then
 		echo "File doesn't exist now. - Making entry optional."
@@ -721,11 +721,11 @@
 	if [ done = "$inp" ]; then
 	    break
 	fi
-	if echo "$inp" | grep '^'$dev'/[hs]d[ab][1-4]$' >/dev/null; then
+	if echo "$inp" | grep '^'$dev'/[hs]d[ab][1-4]$' >/System/Devices/null; then
 	    if probe "$inp"; then
 		if bootflag $inp; then
 		    loader=""
-		    if echo "$inp" | egrep "^${second}[1-4]\$" >/dev/null; then
+		    if echo "$inp" | egrep "^${second}[1-4]\$" >/System/Devices/null; then
 			echo "It's on your second disk. Is this ..."
 			if yesno "... OS/2 ?"; then
 			    loader="os2_d.b"
@@ -816,7 +816,7 @@
 EOF
 if yesno "Test LILO installation now ?" yes; then
     echo
-    tmpbase=${TMPDIR:-/tmp}/lilo_quickinstall
+    tmpbase=${TMPDIR:-/System/TemporaryFiles}/lilo_quickinstall
     rm -rf $tmpbase
     mkdir $tmpbase || {
 	echo "Could not create temporary directory."
@@ -834,7 +834,7 @@
     ) | tee $outfile
     if [ -f $errflag ]; then
 	rm $errflag
-	if egrep 'geo_query_dev HDIO_|: Got bad geometry' <$outfile >/dev/null
+	if egrep 'geo_query_dev HDIO_|: Got bad geometry' <$outfile >/System/Devices/null
 	  then
 	    cat <<EOF
 
@@ -854,7 +854,7 @@
 EOF
 	exit
     fi
-    if grep '^Warning: ' <$outfile >/dev/null; then
+    if grep '^Warning: ' <$outfile >/System/Devices/null; then
 	cat <<EOF
 The following warning messages may indicate some potential problems with your
 configuration. The boot sector has not been changed yet.
diff -urN lilo-22.7.2/raid.c lilo-22.7.2-STEP/raid.c
--- lilo-22.7.2/raid.c	2005-10-04 10:33:30.000000000 +1300
+++ lilo-22.7.2-STEP/raid.c	2006-07-12 16:21:59.328230750 +1200
@@ -128,7 +128,7 @@
 	if (!nowarn && boot[0]=='/' && !boot[1])
 	   warn("RAID1 install implied by 'boot=/'\n");
 	   
-/* scan the devices in /proc/partitions */
+/* scan the devices in /System/Processes/partitions */
 	pf_hard_disk_scan();
 
 
@@ -514,7 +514,7 @@
     else {	/*  extra != X_MBR_ONLY   */
         
 #ifdef FLAG_RAID_DEFEAT
-	raid_flags &= ~FLAG_RAID_DEFEAT;    /* change won't affect /dev/mdX */
+	raid_flags &= ~FLAG_RAID_DEFEAT;    /* change won't affect /System/Devices/mdX */
 #endif
 	{
 	  if (test) {
@@ -523,7 +523,7 @@
 	    printf("The map file has *NOT* been updated.\n");
 	  }
 	  else {
-	/* write out the /dev/mdX boot records */	    
+	/* write out the /System/Devices/mdX boot records */	    
 	    bsect_raid_update(boot, 0L, cp, force, 0, FLAG_SAVE);
 	  }
 	    printf("The boot record of  %s  has%s been updated.\n", 
diff -urN lilo-22.7.2/README lilo-22.7.2-STEP/README
--- lilo-22.7.2/README	2005-02-10 12:10:03.000000000 +1300
+++ lilo-22.7.2-STEP/README	2006-07-12 16:21:54.043900500 +1200
@@ -175,12 +175,12 @@
     correspond to what you think it should do. 
   - Make sure you have an emergency boot disk, that you know how to use it, 
     and that it is always kept up to date. 
-  - Run /sbin/lilo _whenever_ the kernel or any part of LILO, including its 
+  - Run /System/AdminTools/lilo _whenever_ the kernel or any part of LILO, including its 
     configuration file, has changed. When in doubt, run it. You can't run 
-    /sbin/lilo too many times. 
+    /System/AdminTools/lilo too many times. 
   - If performing a destructive upgrade and/or erasing your Linux 
     partitions, de-install LILO _before_ that if using it as the MBR. 
-  - Don't trust setup scripts. Always verify the /etc/lilo.conf they create 
+  - Don't trust setup scripts. Always verify the /System/Settings/lilo.conf they create 
     before booting. 
   - If using a big disk, be prepared for inconveniences: you may have to 
     use the LINEAR option. 
@@ -194,14 +194,14 @@
   The map installer  is the program you run under Linux to put all files 
     belonging to LILO at the appropriate places and to record information 
     about the location of data needed at boot time. This program normally 
-    resides in /sbin/lilo. It has to be run to refresh that information 
+    resides in /System/AdminTools/lilo. It has to be run to refresh that information 
     whenever any part of the system that LILO knows about changes, e.g. 
     after installing a new kernel. 
   Various files  contain data LILO needs at boot time, e.g. the boot 
     loader. Those files normally reside in /boot. The most important files 
-    are the boot loader (see below) and the map file (/boot/map), where the 
+    are the boot loader (see below) and the map file (/System/Boot/map), where the 
     map installer records the location of the kernel(s).* Another important 
-    file is the configuration file, which is normally called /etc/lilo.conf 
+    file is the configuration file, which is normally called /System/Settings/lilo.conf 
   The boot loader  is the part of LILO that is loaded by the BIOS and that 
     loads kernels or the boot sectors of other operating systems. It also 
     provides a simple command-line interface to interactively select the 
@@ -220,7 +220,7 @@
     the boot sector, the /boot directory, and the kernels. 
   The boot sector  contains the first part of LILO's boot loader. It loads 
     the much larger second-stage loader. Both loaders are typically stored 
-    in the file /boot/boot.b 
+    in the file /System/Boot/boot.b 
   The kernel  is loaded and started by the boot loader. Kernels typically 
     reside in the root directory or in /boot. 
 
@@ -255,7 +255,7 @@
             |                           |
             +---------------------------+
 
-The entire disk appears as one device (e.g. /dev/fd0) on Linux.
+The entire disk appears as one device (e.g. /System/Devices/fd0) on Linux.
 
 The MS-DOS boot sector has the following structure:
 
@@ -290,42 +290,42 @@
 too.
 
         +--------------------------------------------+
-        | Partition table                  /dev/hda  |
+        | Partition table                  /System/Devices/hda  |
         | +------------------------------------------|
-        | | Partition 1                    /dev/hda1 |
+        | | Partition 1                    /System/Devices/hda1 |
         | |                                          |
         | |------------------------------------------|
-        | | Partition 2                    /dev/hda2 |
+        | | Partition 2                    /System/Devices/hda2 |
         | |                                          |
         +--------------------------------------------+
 
-The entire disk can be accessed as /dev/hda, /dev/hdb, /dev/sda, etc. The 
-primary partitions are /dev/hda1 ... /dev/hda4.
+The entire disk can be accessed as /System/Devices/hda, /System/Devices/hdb, /System/Devices/sda, etc. The 
+primary partitions are /System/Devices/hda1 ... /System/Devices/hda4.
 
         +--------------------------------------------+
-        | Partition table                  /dev/hda  |
+        | Partition table                  /System/Devices/hda  |
         | +------------------------------------------|
-        | | Partition 1                    /dev/hda1 |
+        | | Partition 1                    /System/Devices/hda1 |
         | |                                          |
         | |------------------------------------------|
-        | | Partition 2                    /dev/hda2 |
+        | | Partition 2                    /System/Devices/hda2 |
         | |                                          |
         | |------------------------------------------|
-        | | Extended partition             /dev/hda3 |
+        | | Extended partition             /System/Devices/hda3 |
         | | +----------------------------------------|
         | | | Extended partition table               |
         | | |----------------------------------------|
-        | | | Partition 3                  /dev/hda5 |
+        | | | Partition 3                  /System/Devices/hda5 |
         | | |                                        |
         | | |----------------------------------------|
         | | | Extended partition table               |
         | | |----------------------------------------|
-        | | | Partition 4                  /dev/hda6 |
+        | | | Partition 4                  /System/Devices/hda6 |
         | | |                                        |
         +--------------------------------------------+
 
 This hard disk has two primary partitions and an extended partition that 
-contains two logical partitions. They are accessed as /dev/hda5 ...
+contains two logical partitions. They are accessed as /System/Devices/hda5 ...
 
 Note that the partition tables of logical partitions are not accessible as 
 the first blocks of some devices, while the main partition table, all boot 
@@ -352,12 +352,12 @@
 (I.e. there is room for the partition table.) Therefore, the LILO boot 
 sector can be stored at the following locations:
 
-  - boot sector of a Linux floppy disk. (/dev/fd0, ...) 
-  - MBR of the first hard disk. (/dev/hda, /dev/sda, ...) 
+  - boot sector of a Linux floppy disk. (/System/Devices/fd0, ...) 
+  - MBR of the first hard disk. (/System/Devices/hda, /System/Devices/sda, ...) 
   - boot sector of a primary Linux file system partition on the first hard 
-    disk. (/dev/hda1, ...) 
+    disk. (/System/Devices/hda1, ...) 
   - partition boot sector of an extended partition on the first hard disk. 
-    (/dev/hda1, ...)* 
+    (/System/Devices/hda1, ...)* 
 
   *  Most FDISK-type programs don't believe in booting from an extended 
     partition and refuse to activate it. LILO is accompanied by a simple 
@@ -516,17 +516,17 @@
 
   - boot Linux. 
   - make a backup copy of your MBR on a floppy disk, e.g.
-     dd if=/dev/hda of=/fd/MBR bs=512 count=1 
+     dd if=/System/Devices/hda of=/fd/MBR bs=512 count=1 
   - install LILO with the boot sector on the Linux partition. 
   - install BOOTACTV as the MBR, e.g.
-     dd if=bootactv.bin of=/dev/hda bs=446 count=1 
+     dd if=bootactv.bin of=/System/Devices/hda bs=446 count=1 
   - reboot. 
 
 Deinstallation: 
 
   - boot Linux. 
   - restore the old MBR, e.g.
-     dd if=/MBR of=/dev/hda bs=446 count=1
+     dd if=/MBR of=/System/Devices/hda bs=446 count=1
      or FDISK /MBR under MS-DOS. 
 
 If replacing the MBR appears undesirable and if a second Linux partition 
@@ -536,8 +536,8 @@
 
 Example:
 
-# dd if=/dev/hda of=/dev/hda3 bs=512 count=1
-# dd if=bootactv.bin of=/dev/hda3 bs=446 count=1
+# dd if=/System/Devices/hda of=/System/Devices/hda3 bs=512 count=1
+# dd if=bootactv.bin of=/System/Devices/hda3 bs=446 count=1
 
 _WARNING:_ Whenever the disk is re-partitioned, the merged boot sector on 
 that "spare" Linux partition has to be updated too.
@@ -567,7 +567,7 @@
 
   - boot Linux. 
   - make a backup copy of your MBR on a floppy disk, e.g.
-     dd if=/dev/hda of=/fd/MBR bs=512 count=1 
+     dd if=/System/Devices/hda of=/fd/MBR bs=512 count=1 
   - install LILO with its boot sector as the MBR. 
   - reboot. 
 
@@ -575,7 +575,7 @@
 
   - boot Linux. 
   - restore the old MBR, e.g.
-     dd if=/fd/MBR of=/dev/hda bs=446 count=1 
+     dd if=/fd/MBR of=/System/Devices/hda bs=446 count=1 
 
 If you've installed LILO as the master boot record, you have to explicitly 
 specify the boot sector (configuration variable BOOT=...) when updating the 
@@ -612,13 +612,13 @@
 
   *  LOADLIN is available for anonymous FTP from
      ftp://tsx-11.mit.edu/pub/linux/dos_utils/lodlin<n>.tar.gz
-     ftp://sunsite.unc.edu/pub/Linux/system/boot/dualboot/lodlin<n>.tgz
+     ftp://sunsite.unc.edu/pub/Linux/system/System/Boot/dualboot/lodlin<n>.tgz
      BOOT.SYS is available for anonymous FTP from
      ftp://ftp.funet.fi/pub/Linux/tools/boot142.zip
 
   **  LILO can be found in
      ftp://tsx-11.mit.edu/pub/linux/packages/lilo/lilo-<n>.tar.gz
-     ftp://sunsite.unc.edu/pub/Linux/system/boot/lilo/lilo-<n>.tar.gz
+     ftp://sunsite.unc.edu/pub/Linux/system/System/Boot/lilo/lilo-<n>.tar.gz
      ftp://lrcftp.epfl.ch/pub/linux/local/lilo/lilo-<n>.tar.gz
 
   ***  pfdisk is available for anonymous FTP from
@@ -637,25 +637,25 @@
 remains. The following sections describe various possible cases. See also 
 section "BIOS restrictions".
 
-The configuration file /etc/lilo.conf for the examples could look like 
+The configuration file /System/Settings/lilo.conf for the examples could look like 
 this:
 
-boot = /dev/hda2
+boot = /System/Devices/hda2
 compact
 image = /vmlinuz
 image = /vmlinuz.old
-other = /dev/hda1
-  table = /dev/hda
+other = /System/Devices/hda1
+  table = /System/Devices/hda
   label = msdos
 
 It installs a Linux kernel image (/vmlinuz), an alternate Linux kernel 
-image (/vmlinuz.old) and a chain loader to boot MS-DOS from /dev/hda1. The 
+image (/vmlinuz.old) and a chain loader to boot MS-DOS from /System/Devices/hda1. The 
 option COMPACT on the second line instructs the map installer to optimize 
 loading.
 
-In all examples, the names of the IDE-type hard disk devices (/dev/hda...) 
+In all examples, the names of the IDE-type hard disk devices (/System/Devices/hda...) 
 are used. Everything applies to other disk types (e.g. SCSI disks; 
-/dev/sda...) too.
+/System/Devices/sda...) too.
 
 
 BIOS restrictions
@@ -713,8 +713,8 @@
 
 LILO depends on the BIOS to load the following items: 
 
-  - /boot/boot.b 
-  - /boot/map (created when running /sbin/lilo) 
+  - /System/Boot/boot.b 
+  - /System/Boot/map (created when running /System/AdminTools/lilo) 
   - all kernels 
   - the boot sectors of all other operating systems it boots 
   - the startup message, if one has been defined 
@@ -738,11 +738,11 @@
 original master boot record or by a program like BOOTACTV.
 
             +--------------------------+
-            | MBR            /dev/hda  |
+            | MBR            /System/Devices/hda  |
             | +------------------------|
-            | | MS-DOS       /dev/hda1 |
+            | | MS-DOS       /System/Devices/hda1 |
             | |------------------------|
-        --> | | Linux /      /dev/hda2 |
+        --> | | Linux /      /System/Devices/hda2 |
             +--------------------------+
 
 In this example, the BOOT variable could be omitted, because the boot 
@@ -759,19 +759,19 @@
 boot record or by a program like BOOTACTV.
 
             +--------------------------+
-            | MBR            /dev/hda  |
+            | MBR            /System/Devices/hda  |
             | +------------------------|
-            | | MS-DOS       /dev/hda1 |
+            | | MS-DOS       /System/Devices/hda1 |
             | |------------------------|
-        --> | | Extended     /dev/hda2 |
+        --> | | Extended     /System/Devices/hda2 |
             | | +----------------------|
-            | | | Linux      /dev/hda5 |
+            | | | Linux      /System/Devices/hda5 |
             | | |----------------------|
-            | | | ...        /dev/hda6 |
+            | | | ...        /System/Devices/hda6 |
             +--------------------------+
 
 Because many disk partitioning programs refuse to make an extended 
-partition (in our example /dev/hda2) active, you might have to use 
+partition (in our example /System/Devices/hda2) active, you might have to use 
 activate, which comes with the LILO distribution.
 
 OS/2 BootManager should be able to boot LILO boot sectors from logical 
@@ -787,7 +787,7 @@
 disk is used later in the boot process.
 
 Only the location of the boot sector matters - everything else 
-(/boot/boot.b, /boot/map, the root file system, a swap partition, other 
+(/System/Boot/boot.b, /System/Boot/map, the root file system, a swap partition, other 
 Linux file systems, etc.) can be located anywhere on the second disk, 
 provided that the constraints described in section "BIOS restrictions" are 
 met.
@@ -803,15 +803,15 @@
 
                  FIRST DISK                     SECOND DISK
         +--------------------------+    +--------------------------+
-        | MBR            /dev/hda  |    | MBR            /dev/hdb  |
+        | MBR            /System/Devices/hda  |    | MBR            /System/Devices/hdb  |
         | +------------------------|    | +------------------------|
-        | | MS-DOS       /dev/hda1 |    | | Linux        /dev/hdb1 |
+        | | MS-DOS       /System/Devices/hda1 |    | | Linux        /System/Devices/hdb1 |
         | |------------------------|    | |------------------------|
-    --> | | Extended     /dev/hda2 |    | | ...          /dev/hdb2 |
+    --> | | Extended     /System/Devices/hda2 |    | | ...          /System/Devices/hdb2 |
         | | +----------------------|    | |                        |
-        | | | ...        /dev/hda5 |    | |                        |
+        | | | ...        /System/Devices/hda5 |    | |                        |
         | | |----------------------|    | |                        |
-        | | | ...        /dev/hda6 |    | |                        |
+        | | | ...        /System/Devices/hda6 |    | |                        |
         +--------------------------+    +--------------------------+
 
 The program activate, that accompanies LILO, may have to be used to set the 
@@ -832,19 +832,19 @@
 
                  FIRST DISK                     SECOND DISK
         +--------------------------+    +--------------------------+
-    --> | MBR            /dev/hda  |    | MBR            /dev/hdb  |
+    --> | MBR            /System/Devices/hda  |    | MBR            /System/Devices/hdb  |
         | +------------------------|    | +------------------------|
-        | | MS-DOS       /dev/hda1 |    | | Linux        /dev/hdb1 |
+        | | MS-DOS       /System/Devices/hda1 |    | | Linux        /System/Devices/hdb1 |
         | |------------------------|    | |------------------------|
-        | | ...          /dev/hda2 |    | | ...          /dev/hdb2 |
+        | | ...          /System/Devices/hda2 |    | | ...          /System/Devices/hdb2 |
         +--------------------------+    +--------------------------+
 
 You should back up your old MBR before installing LILO and verify that LILO 
 is able to boot your other operating system(s) before relying on this 
 approach.
 
-The line boot = /dev/hda2 in /etc/lilo.conf would have to be changed to 
-boot = /dev/hda in this example.
+The line boot = /System/Devices/hda2 in /System/Settings/lilo.conf would have to be changed to 
+boot = /System/Devices/hda in this example.
 
 
 More than two disks
@@ -877,10 +877,10 @@
 directory (e.g. /dos/linux) is created, all files from /boot are moved to 
 that directory, /boot is replaced by a symbolic link to it, the kernels are 
 also moved to the new directory, their new location is recorded in 
-/etc/lilo.conf, and finally /sbin/lilo is run.
+/System/Settings/lilo.conf, and finally /System/AdminTools/lilo is run.
 
 From then on, new kernels must always be copied into that directory on the 
-DOS partition before running /sbin/lilo, e.g. when recompiling a kernel, 
+DOS partition before running /System/AdminTools/lilo, e.g. when recompiling a kernel, 
 the standard procedure changes from
 
 # make zlilo
@@ -889,13 +889,13 @@
 
 # make zImage
 # mv /dos/linux/vmlinuz /dos/linux/vmlinuz.old
-# mv arch/i386/boot/zImage /dos/linux/vmlinuz
-# /sbin/lilo
+# mv arch/i386/System/Boot/zImage /dos/linux/vmlinuz
+# /System/AdminTools/lilo
 
 _WARNING:_ De-fragmenting such a DOS partition is likely to make Linux or 
 even the whole system unbootable. Therefore, the DOS partition should 
 either not be de-fragmented, or a Linux boot disk should be prepared (and 
-tested) to bring up Linux and to run /sbin/lilo after the 
+tested) to bring up Linux and to run /System/AdminTools/lilo after the 
 de-fragmentation.*
 
   *  Setting the "system" attribute from DOS on the critical files (e.g. 
@@ -964,7 +964,7 @@
  root=<device>  changes the root device. This overrides settings that may 
 have been made in the boot image and on the LILO command line. <device> is 
 either the hexadecimal device number or the full path name of the device, 
-e.g. /dev/hda3.*
+e.g. /System/Devices/hda3.*
 
   *  The device names are hard-coded in the kernel. Therefore, only the 
     "standard" names are supported and some less common devices may not be 
@@ -988,9 +988,9 @@
 Recent kernels also accept the options  init=<name>  and  noinitrd .  init  
 specifies the name of the init program to execute. Therefore, if single 
 mode cannot be entered because init is mis-configured, one may still be 
-able to reach a shell using init=/bin/sh.  noinitrd  disables automatic 
+able to reach a shell using init=/System/Tools/sh.  noinitrd  disables automatic 
 loading of the initial RAM disk. Instead, its content is then available on 
-/dev/initrd.
+/System/Devices/initrd.
 
  vga=<mode>  alters the VGA mode set at startup. The values  normal ,  
 extended ,  ask  or a decimal number are recognized. (See also "Booting 
@@ -1028,7 +1028,7 @@
 i.e. it isn't automatically converted to upper case.
 
 Note that environment variables passed to init are typically available in 
-system initialization scripts (e.g. /etc/rc.local), but they're not visible 
+system initialization scripts (e.g. /System/Settings/rc.local), but they're not visible 
 from ordinary login sessions, because the login program removes them from 
 the user's environment.
 
@@ -1067,7 +1067,7 @@
 
 LILO always passes the string  BOOT_IMAGE=<name>  to the kernel, where 
 <name> is the name by which the kernel is identified (e.g. the label). This 
-variable can be used in /etc/rc to select a different behaviour, depending 
+variable can be used in /System/Settings/rc to select a different behaviour, depending 
 on the kernel.
 
 When booting automatically, i.e. without human intervention, the word  auto  
@@ -1140,14 +1140,14 @@
 Map installer
 =============
 
-The map installer program /sbin/lilo updates the boot sector and creates 
+The map installer program /System/AdminTools/lilo updates the boot sector and creates 
 the map file. If the map installer detects an error, it terminates 
 immediately and does not touch the boot sector and the map file.
 
 Whenever the map installer updates a boot sector, the original boot sector 
-is copied to /boot/boot.<number>, where <number> is the hexadecimal device 
+is copied to /System/Boot/boot.<number>, where <number> is the hexadecimal device 
 number. If such a file already exists, no backup copy is made. Similarly, a 
-file  /boot/part.<number>  is created if LILO modifies the partition table. 
+file  /System/Boot/part.<number>  is created if LILO modifies the partition table. 
 (See "General per-image options".)
 
 
@@ -1163,11 +1163,11 @@
 The currently mapped files are listed. With  -v , also many parameters are 
 shown.
 
-  /sbin/lilo [ -C <config_file> ] -q [ -m <map_file> ] [ -v ... ]  
+  /System/AdminTools/lilo [ -C <config_file> ] -q [ -m <map_file> ] [ -v ... ]  
 
    -C <config_file>    
      Specifies the configuration file that is used by the map installer 
-    (see section "Configuration"). If  -C  is omitted, /etc/lilo.conf is 
+    (see section "Configuration"). If  -C  is omitted, /System/Settings/lilo.conf is 
     used. 
    -m <map_file>    
      Specifies an alternate map file. See also sections "Options 
@@ -1183,9 +1183,9 @@
 - - - - - - - - - -
 
 A new map is created for the images described in the configuration file 
-/etc/lilo.conf and they are registered in the boot sector.
+/System/Settings/lilo.conf and they are registered in the boot sector.
 
-  /sbin/lilo [ -C <config_file> ] [ -b <boot_device> ] [ -c ] [ -l ] [ -i 
+  /System/AdminTools/lilo [ -C <config_file> ] [ -b <boot_device> ] [ -c ] [ -l ] [ -i 
     <boot_sector> ] [ -f <disk_tab> ] [ -m <map_file> ] [ -d <delay> ] [ -v 
     ... ] [ -t ] [ -s <save_file> | -S <save_file> ] [ -P fix | -P ignore ] 
     [ -r <root_dir> ]  
@@ -1248,7 +1248,7 @@
     configuration variables" and "Global options". 
 
   *  E.g. if your root partition is mounted on /mnt, you can update the map 
-    by simply running  ROOT=/mnt /mnt/sbin/lilo 
+    by simply running  ROOT=/mnt /mnt/System/AdminTools/lilo 
 
 
 Change default command line
@@ -1257,7 +1257,7 @@
 Changes LILO's default command line. See also section "Boot image 
 selection".
 
-  /sbin/lilo [ -C <config_file> ] [ -m <map_file> ] -R [ <word> ... ]  
+  /System/AdminTools/lilo [ -C <config_file> ] [ -m <map_file> ] -R [ <word> ... ]  
 
    -C <config_file>    
      Specifies an alternate configuration file. See also section "Show 
@@ -1276,9 +1276,9 @@
     returns a non-zero exit code. 
 
   *   -R  is typically used in reboot scripts, e.g.
-     #!/bin/sh
+     #!/System/Tools/sh
      cd /
-     /sbin/lilo -R "$*" && reboot
+     /System/AdminTools/lilo -R "$*" && reboot
 
 
 Kernel name translation
@@ -1286,7 +1286,7 @@
 
 Determines the path of the kernel.
 
-  /sbin/lilo [ -C <config_file> ] -I <name> [ <options> ]  
+  /System/AdminTools/lilo [ -C <config_file> ] -I <name> [ <options> ]  
 
    -C <config_file>    
      Specifies an alternate configuration file. See also section "Show 
@@ -1309,7 +1309,7 @@
 /boot) have not been touched since the first installation. See also section 
 "LILO de-installation".
 
-  /sbin/lilo [ -C <config_file> ] [ -s <save_file> ] -u | -U [ 
+  /System/AdminTools/lilo [ -C <config_file> ] [ -s <save_file> ] -u | -U [ 
     <boot_device> ]  
 
    -C <config_file>    
@@ -1333,7 +1333,7 @@
 Print version number
 - - - - - - - - - -
 
-  /sbin/lilo -V  
+  /System/AdminTools/lilo -V  
 
    -V    
      Print the version number and exit. 
@@ -1365,7 +1365,7 @@
 Configuration
 -------------
 
-The configuration information is stored in the file /etc/lilo.conf and 
+The configuration information is stored in the file /System/Settings/lilo.conf and 
 consists of variable assignments.
 
 
@@ -1418,15 +1418,15 @@
 Global options
 - - - - - - -
 
-/etc/lilo.conf begins with a possibly empty global options section. Many 
+/System/Settings/lilo.conf begins with a possibly empty global options section. Many 
 global options can also be set from the command line, but storing permanent 
 options in the configuration file is more convenient.
 
 The following global options are recognized:
 
   BACKUP=<backup_file>  Copy the original boot sector to <backup_file> 
-    (which may also be a device, e.g. /dev/null) instead of 
-    /boot/boot.<number> 
+    (which may also be a device, e.g. /System/Devices/null) instead of 
+    /System/Boot/boot.<number> 
   BOOT=<boot_device>  Sets the name of the device (e.g. a hard disk 
     partition) that contains the boot sector. If BOOT is omitted, the boot 
     sector is read from (and possibly written to) the device that is 
@@ -1470,7 +1470,7 @@
     the boot sector even on partitions that appear to be unsuitable for 
     that. 
   INSTALL=<boot_sector>  Install the specified file as the new boot sector. 
-    If INSTALL is omitted, /boot/boot.b is used as the default. 
+    If INSTALL is omitted, /System/Boot/boot.b is used as the default. 
   KEYTABLE=<table_file>  Re-map the keyboard as specified in this file. See 
     section "Keyboard translation" for details. 
   LBA32  Generate 32-bit Logical Block Addresses instead of 
@@ -1486,12 +1486,12 @@
     depend on disk geometry. Note that boot disks may not be portable if 
     LINEAR is used, because the BIOS service to determine the disk geometry 
     does not work reliably for floppy disks. When using LINEAR with large 
-    disks, /sbin/lilo may generate references to inaccessible disk areas 
+    disks, /System/AdminTools/lilo may generate references to inaccessible disk areas 
     (see section "BIOS restrictions"), because 3D sector addresses are not 
     known before boot time. LINEAR may conflict with COMPACT, see section 
     "Other problems". 
   MAP=<map_file>  Specifies the location of the map file. If MAP is 
-    omitted, a file /boot/map is used. 
+    omitted, a file /System/Boot/map is used. 
   MESSAGE=<message_file>  Specifies a file containing a message that is 
     displayed before the boot prompt. No message is displayed while waiting 
     for a modifier key ([Shift], etc.) after printing "LILO ". In the 
@@ -1516,7 +1516,7 @@
     specified. 
 
       <port>  the number of the serial port, zero-based. 0 corresponds to 
-        COM1 alias /dev/ttyS0, etc. All four ports can be used (if 
+        COM1 alias /System/Devices/ttyS0, etc. All four ports can be used (if 
         present). 
       <bps>  the baud rate of the serial port. The following baud rates are 
         supported: 110, 300, 1200, 2400, 4800, 9600, 19200, and 38400 bps. 
@@ -1622,7 +1622,7 @@
   label = linux
   alias = 1
   restricted
-other = /dev/hda1
+other = /System/Devices/hda1
   label = dos
   alias = 2
 
@@ -1687,10 +1687,10 @@
 
 image = /vmlinuz
   label = lin-hd
-  root = /dev/hda2
+  root = /System/Devices/hda2
 image = /vmlinuz
   label = lin-fd
-  root = /dev/fd0
+  root = /System/Devices/fd0
 
 
 Boot image types
@@ -1736,7 +1736,7 @@
 
 Example:
 
-image = /dev/fd0
+image = /System/Devices/fd0
   range = 1+512
 
 All kernel options can also be used when booting the kernel from a device.
@@ -1771,7 +1771,7 @@
     find their partitions by examining the partition table. See section 
     "Partition type changes" for details. 
   LOADER=<chain_loader>  Specifies the chain loader that should be used. If 
-    it is omitted, /boot/chain.b is used. 
+    it is omitted, /System/Boot/chain.b is used. 
   MAP-DRIVE=<bios_device_code>  Instructs chain.b to installs a resident 
     driver that re-maps the floppy or hard disk drives. This way, one can 
     boot any operating system from a hard disk different from the first 
@@ -1795,7 +1795,7 @@
     if this variable is omitted. (Some operating systems have other means 
     to determine from which partition they have been booted. E.g. MS-DOS 
     usually stores the geometry of the boot disk or partition in its boot 
-    sector.) Note that /sbin/lilo must be re-run if a partition table 
+    sector.) Note that /System/AdminTools/lilo must be re-run if a partition table 
     mapped referenced with TABLE is modified. 
   UNSAFE  Do not access the boot sector at map creation time. This disables 
     some sanity checks, including a partition table check. If the boot 
@@ -1807,13 +1807,13 @@
 
 Examples:
 
-other = /dev/hda2
+other = /System/Devices/hda2
   label = dos
-  table = /dev/hda
+  table = /System/Devices/hda
 
-other = /dev/hdb2
+other = /System/Devices/hdb2
   label = os2
-  loader = /boot/os2_d.b
+  loader = /System/Boot/os2_d.b
   map-drive = 0x80
     to = 0x81
   map-drive = 0x81
@@ -1916,23 +1916,23 @@
 
 Examples:
 
-disk = /dev/sda
+disk = /System/Devices/sda
   bios = 0x80
   sectors = 32
   heads = 64
   cylinders = 632
-  partition = /dev/sda1
+  partition = /System/Devices/sda1
     start = 2048
-  partition = /dev/sda2
+  partition = /System/Devices/sda2
     start = 204800
-  partition = /dev/sda3
+  partition = /System/Devices/sda3
     start = 500000
-  partition = /dev/sda4
+  partition = /System/Devices/sda4
     start = 900000
 
-disk = /dev/sda
+disk = /System/Devices/sda
   bios = 0x80
-disk = /dev/hda
+disk = /System/Devices/hda
   bios = 0x81
 
 
@@ -1979,12 +1979,12 @@
 
 Example:
 
-other = /dev/sda4
+other = /System/Devices/sda4
   label = sco
   change
-    partition = /dev/sda4
+    partition = /System/Devices/sda4
       activate
-    partition = /dev/sda3
+    partition = /System/Devices/sda3
       deactivate
 
 
@@ -2034,12 +2034,12 @@
 
 Example:
 
-other = /dev/sda3
+other = /System/Devices/sda3
   label = dos
   change
-    partition = /dev/sda2
+    partition = /System/Devices/sda2
       set = dos16_big_normal
-    partition = /dev/sda3
+    partition = /System/Devices/sda3
       activate
       set = DOS16_big_normal
 
@@ -2105,12 +2105,12 @@
 
 keytab-lilo.pl writes the resulting translation table as a binary string to 
 standard output. Such tables can be stored anywhere with any name, but the 
-suggested naming convention is /boot/<kbd>.ktl ("Keyboard Table for Lilo"), 
+suggested naming convention is /System/Boot/<kbd>.ktl ("Keyboard Table for Lilo"), 
 where <kbd> is the name of the keyboard layout.
 
 Example:
 
-keytab-lilo.pl de >/boot/de.ktl
+keytab-lilo.pl de >/System/Boot/de.ktl
 
 
 Using keyboard translation tables
@@ -2122,7 +2122,7 @@
 
 Example:
 
-keytable = /boot/de.klt
+keytable = /System/Boot/de.klt
 
 
 Installation and updates
@@ -2143,7 +2143,7 @@
 usually has to be configured by running  make config  before LILO can be 
 compiled.
 
-/bin/sh has to be a real Bourne shell. bash is sufficiently compatible, but 
+/System/Tools/sh has to be a real Bourne shell. bash is sufficiently compatible, but 
 some ksh clones may cause problems.
 
 A file named INCOMPAT is included in the distribution. It describes 
@@ -2226,7 +2226,7 @@
      Chain loader to load OS/2 from the second hard disk.  make install  
     puts this file into /boot 
   lilo/lilo   
-     LILO (map) installer.  make install  puts this file into /sbin 
+     LILO (map) installer.  make install  puts this file into /System/AdminTools 
   lilo/activate   
      Simple boot partition setter. 
   lilo/dparam.com   
@@ -2242,7 +2242,7 @@
   - configure the Makefile (see section "Build-time configuration") 
   - run  make  to compile and assemble all parts. 
   - run  make install  to copy all LILO files to the directories where 
-    they're installed. /sbin should now contain the file lilo, /usr/sbin 
+    they're installed. /System/AdminTools should now contain the file lilo, /System/AdminTools 
     should contain keytab-lilo.pl, and /boot should contain boot.b, 
     chain.b, and os2_d.b. 
 
@@ -2254,9 +2254,9 @@
 non-standard system, the next step is to test LILO with the boot sector on 
 a floppy disk:
 
-  - insert a blank (but low-level formatted) floppy disk into /dev/fd0. 
+  - insert a blank (but low-level formatted) floppy disk into /System/Devices/fd0. 
   - run  echo image=<kernel_image>  |
-      /sbin/lilo -C - -b /dev/fd0 -v -v -v 
+      /System/AdminTools/lilo -C - -b /System/Devices/fd0 -v -v -v 
      If you've already installed LILO on your system, you might not want to 
     overwrite your old map file. Use the  -m  option to specify an 
     alternate map file name. 
@@ -2264,7 +2264,7 @@
     then continue loading the kernel from the hard disk. 
 
 Now, you have to decide, which boot concept you want to use. Let's assume 
-you have a Linux partition on /dev/hda2 and you want to install your LILO 
+you have a Linux partition on /System/Devices/hda2 and you want to install your LILO 
 boot sector there. The DOS-MBR loads the LILO boot sector.
 
   - get a working boot disk, e.g. an install or recovery disk. Verify that 
@@ -2274,8 +2274,8 @@
     (e.g. it's the MBR or if it contains a boot loader you might want to 
     use if you encounter problems with LILO), you should mount your boot 
     disk and make a backup copy of your boot sector to a file on that 
-    floppy, e.g. dd if=/dev/hda of=/fd/boot_sector bs=512 count=1 
-  - create the configuration file /etc/lilo.conf, e.g.
+    floppy, e.g. dd if=/System/Devices/hda of=/fd/boot_sector bs=512 count=1 
+  - create the configuration file /System/Settings/lilo.conf, e.g.
      <global settings>
      <image specification>
        <per-image options>
@@ -2284,10 +2284,10 @@
     unexpected behaviour when using the  -r  option. 
   - now, you can check what LILO would do if you were about to install it 
     on your hard disk:
-     /sbin/lilo -v -v -v -t 
+     /System/AdminTools/lilo -v -v -v -t 
   - if you need some additional boot utility (i.e. BOOTACTV), you should 
     install that now 
-  - run /sbin/lilo to install LILO on your hard disk 
+  - run /System/AdminTools/lilo to install LILO on your hard disk 
   - if you have to change the active partition, use fdisk or activate to do 
     that 
   - reboot 
@@ -2298,7 +2298,7 @@
 
 Certain build-time parameters can be configured. They can either be edited 
 in the top-level Makefile or they can be stored in a file 
-/etc/lilo.defines. Settings in the Makefile are ignored if that file 
+/System/Settings/lilo.defines. Settings in the Makefile are ignored if that file 
 exists.
 
 The following items can be configured: 
@@ -2340,7 +2340,7 @@
    USE_TMPDIR   Use the directory indicated in the  TMPDIR  environment 
     variable when creating temporary device files. If  TMPDIR  is not set 
     or if LILO is compiled without  USE_TMPDIR , temporary device files are 
-    created in /tmp.* This option is disabled by default. 
+    created in /System/TemporaryFiles.* This option is disabled by default. 
    VARSETUP   Enables the use of variable-size setup segments. This option 
     is enabled by default and is only provided to fall back to fixed-size 
     setup segments in the unlikely case of problems when using prehistoric 
@@ -2355,7 +2355,7 @@
     that the operating environment is not completely set up, so  TMPDIR  
     may point to an invalid location.
 
-/etc/lilo.defines should be used if one wishes to make permanent 
+/System/Settings/lilo.defines should be used if one wishes to make permanent 
 configuration changes. The usual installation procedures don't touch that 
 file. Example:
 
@@ -2381,22 +2381,22 @@
 
   - a file system has to be created on the file system 
   - the kernel and boot.b have to be copied to the floppy disk 
-  - /sbin/lilo has to be run to create the map file 
+  - /System/AdminTools/lilo has to be run to create the map file 
 
 This can be as easy as
 
-/sbin/mke2fs /dev/fd0
+/System/AdminTools/mke2fs /System/Devices/fd0
 [ -d /fd ] || mkdir /fd
-mount /dev/fd0 /fd
-cp /boot/boot.b /fd
+mount /System/Devices/fd0 /fd
+cp /System/Boot/boot.b /fd
 cp /zImage /fd
 echo image=/fd/zImage label=linux |
-  /sbin/lilo -C - -b /dev/fd0 -i /fd/boot.b -c -m /fd/map
+  /System/AdminTools/lilo -C - -b /System/Devices/fd0 -i /fd/boot.b -c -m /fd/map
 umount /fd
 
-The command line of /sbin/lilo is a little tricky.  -C -  takes the 
+The command line of /System/AdminTools/lilo is a little tricky.  -C -  takes the 
 configuration from standard input (naturally, one could also write the 
-configuration into a file),  -b /dev/fd0  specifies that the boot sector is 
+configuration into a file),  -b /System/Devices/fd0  specifies that the boot sector is 
 written to the floppy disk,  -i /fd/boot.b  takes the first and second 
 stage loaders from the floppy,  -c  speeds up the load process, and  -m 
 /fd/map  puts the map file on the floppy too.
@@ -2406,7 +2406,7 @@
 -------
 
 LILO is affected by updates of kernels, the whole system and (trivially) of 
-LILO itself. Typically, only /sbin/lilo has to be run after any of those 
+LILO itself. Typically, only /System/AdminTools/lilo has to be run after any of those 
 updates and everything will be well again (at least as far as LILO is 
 concerned).
 
@@ -2428,21 +2428,21 @@
 
 Because the locations of boot.b, chain.b, etc. have changed and because the 
 map file format may be different too, you have to update the boot sector 
-and the map file. Run /sbin/lilo to do this.
+and the map file. Run /System/AdminTools/lilo to do this.
 
 
 Kernel update
 - - - - - - -
 
 Whenever any of the kernel files that are accessed by LILO is moved or 
-overwritten, the map has to be re-built.* Run /sbin/lilo to do this.
+overwritten, the map has to be re-built.* Run /System/AdminTools/lilo to do this.
 
   *  It is advisable to keep a second, stable, kernel image that can be 
     booted if you forget to update the map after a change to your usual 
     kernel image.
 
 The kernel has a make target "zlilo" that copies the kernel to /vmlinuz and 
-runs /sbin/lilo.
+runs /System/AdminTools/lilo.
 
 
 System upgrade
@@ -2455,19 +2455,19 @@
 update"). Also, if kernels are removed or added, it may be necessary to 
 update the configuration file.
 
-If LILO is updated by this system upgrade, /sbin/lilo should be run before 
+If LILO is updated by this system upgrade, /System/AdminTools/lilo should be run before 
 booting the upgraded system. It is generally a good idea not to rely on the 
 upgrade procedure to perform this essential step automatically.
 
 However, system upgrades which involve removal and re-creation of entire 
 partitions (e.g. /, /usr, etc.) are different. First, they should be 
 avoided, because they bear a high risk of losing other critical files, e.g. 
-the /etc/XF86Config you've spent the last week fiddling with. If an upgrade 
+the /System/Settings/XF86Config you've spent the last week fiddling with. If an upgrade 
 really has to be performed in such a brute-force way, this is equal with 
 total removal of LILO, followed by a new installation. Therefore, the 
 procedures described in the sections "LILO de-installation" and "LILO 
 update" have to be performed. If you've forgotten to make a backup copy of 
-/etc/lilo.conf before the destructive upgrade, you might also have to go 
+/System/Settings/lilo.conf before the destructive upgrade, you might also have to go 
 through section "Normal first-time installation" again.
 
 
@@ -2501,12 +2501,12 @@
 This only alters the boot loader code, not the partition table.
 
 LILO automatically makes backup copies when it overwrites boot sectors. 
-They are named /boot/boot.<nnnn>, with <nnnn> corresponding to the device 
-number, e.g.  0300  is /dev/hda,  0800  is /dev/sda, etc. Those backups can 
+They are named /System/Boot/boot.<nnnn>, with <nnnn> corresponding to the device 
+number, e.g.  0300  is /System/Devices/hda,  0800  is /System/Devices/sda, etc. Those backups can 
 be used to restore the old MBR if no easier method is available. The 
 commands are
-  dd if=/boot/boot.0300 of=/dev/hda bs=446 count=1  or
-  dd if=/boot/boot.0800 of=/dev/sda bs=446 count=1 
+  dd if=/System/Boot/boot.0300 of=/System/Devices/hda bs=446 count=1  or
+  dd if=/System/Boot/boot.0800 of=/System/Devices/sda bs=446 count=1 
  respectively.
 
 _WARNING:_ Some Linux distributions install boot.<nnnn> files from the 
@@ -2521,17 +2521,17 @@
 Some other operating systems (e.g. MS-DOS 6.0) appear to modify the MBR in 
 their install procedures. It is therefore possible that LILO will stop to 
 work after such an installation and Linux has to be booted from floppy 
-disk. The original state can be restored by either re-running /sbin/lilo 
+disk. The original state can be restored by either re-running /System/AdminTools/lilo 
 (if LILO is installed as the MBR) or by making LILO's partition active (if 
 it's installed on a primary partition).
 
 It is generally a good idea to install LILO after the other operating 
 systems have been installed. E.g. OS/2 is said to cause trouble when 
 attempting to add it to an existing Linux system. (However, booting from 
-floppy and running /sbin/lilo should get around most interferences.)
+floppy and running /System/AdminTools/lilo should get around most interferences.)
 
 Typically, the new operating system then has to be added to LILO's 
-configuration (and /sbin/lilo has to be re-run) in order to boot it.
+configuration (and /System/AdminTools/lilo has to be re-run) in order to boot it.
 
 See also section "Other problems" for a list of known problems with some 
 other operating systems.
@@ -2547,7 +2547,7 @@
 Map installer warnings and errors
 ---------------------------------
 
-Most messages of the map installer (/sbin/lilo) should be self-explanatory. 
+Most messages of the map installer (/System/AdminTools/lilo) should be self-explanatory. 
 Some messages that indicate common errors are listed below. They are 
 grouped into fatal errors and warnings (non-fatal errors).
 
@@ -2596,13 +2596,13 @@
     partition on a different disk than the one in whose section its entry 
     appears. 
    <device_name> is not a whole disk device    
-     Only the geometry of whole disks (e.g. /dev/hda, /dev/sdb, etc.) can 
+     Only the geometry of whole disks (e.g. /System/Devices/hda, /System/Devices/sdb, etc.) can 
     be redefined when using DISK sections. 
    DISKTAB and DISK are mutually exclusive    
      You cannot use a disktab file and disk geometry definitions in the 
-    configuration file at the same time. Maybe /etc/disktab was 
+    configuration file at the same time. Maybe /System/Settings/disktab was 
     accidentally used, because that's the default for 
-    backward-compatibility. You should delete /etc/disktab after completing 
+    backward-compatibility. You should delete /System/Settings/disktab after completing 
     the transition to DISK sections. 
    Duplicate entry in partition table    
      A partition table entry appears twice. The partition table has to be 
@@ -2652,7 +2652,7 @@
     can't be reasonably used together. 
    Map <path> is not a regular file.    
      This is probably the result of an attempt to omit writing a map file, 
-    e.g. with  -m /dev/null . The  -t  option should be used to accomplish 
+    e.g. with  -m /System/Devices/null . The  -t  option should be used to accomplish 
     this. 
    Must specify SECTORS and HEADS together    
      It is assumed that disks with a "strange" number of sectors will also 
@@ -2713,7 +2713,7 @@
 
   *  Because different partition programs may display the partitions in a 
     different order, it is possible that what you think is your first 
-    partition isn't /dev/hda1, etc. A good method to verify the content of 
+    partition isn't /System/Devices/hda1, etc. A good method to verify the content of 
     a partition is to try to mount it.
 
   **  The expected version number may be different from the version number 
@@ -2801,16 +2801,16 @@
     mismatch (e.g. bad disk parameters, see section "Disk geometry"). 
    LI   The first stage boot loader was able to load the second stage boot 
     loader, but has failed to execute it. This can either be caused by a 
-    geometry mismatch or by moving /boot/boot.b without running the map 
+    geometry mismatch or by moving /System/Boot/boot.b without running the map 
     installer. 
    LIL   The second stage boot loader has been started, but it can't load 
     the descriptor table from the map file. This is typically caused by a 
     media failure or by a geometry mismatch. 
    LIL?   The second stage boot loader has been loaded at an incorrect 
     address. This is typically caused by a subtle geometry mismatch or by 
-    moving /boot/boot.b without running the map installer. 
+    moving /System/Boot/boot.b without running the map installer. 
    LIL-   The descriptor table is corrupt. This can either be caused by a 
-    geometry mismatch or by moving /boot/map without running the map 
+    geometry mismatch or by moving /System/Boot/map without running the map 
     installer. 
    LILO   All parts of LILO have been successfully loaded. 
 
@@ -2882,7 +2882,7 @@
 
 Generally, invalid geometry and attempts to use more than two disks without 
 a very modern BIOS may yield misleading error codes. Please check carefully 
-if /sbin/lilo doesn't emit any warnings. Then try using the LINEAR or LBA32 
+if /System/AdminTools/lilo doesn't emit any warnings. Then try using the LINEAR or LBA32 
 option (see section "Global options").
 
 
@@ -2928,11 +2928,11 @@
     "Partition table manipulation" for how this can be accomplished. 
   - Future Domain TMC-1680 adapters with the BIOS versions 3.4 and 3.5 
     assign BIOS device numbers in the wrong order, e.g. on a two-disk 
-    system, /dev/sda becomes  0x81  and /dev/sdb becomes  0x80 . This can 
+    system, /System/Devices/sda becomes  0x81  and /System/Devices/sdb becomes  0x80 . This can 
     be fixed with the following DISK section:
-     disk=/dev/sda bios=0x81 disk=/dev/sdb bios=0x80
+     disk=/System/Devices/sda bios=0x81 disk=/System/Devices/sdb bios=0x80
      Note that this is only valid for a two-disk system. In three-disk 
-    systems, /dev/sdc would become  0x80 , etc. Also, single-disk systems 
+    systems, /System/Devices/sdc would become  0x80 , etc. Also, single-disk systems 
     don't have this problem (and the "fix" would break them). 
   - Some BIOSes don't properly recognize disks with an unusual partition 
     table (e.g. without any partition marked active) and refuse to boot 
diff -urN lilo-22.7.2/README.bitmaps lilo-22.7.2-STEP/README.bitmaps
--- lilo-22.7.2/README.bitmaps	2003-08-11 06:28:52.000000000 +1200
+++ lilo-22.7.2-STEP/README.bitmaps	2006-07-12 16:21:54.155907500 +1200
@@ -6,13 +6,13 @@
 ==============================
 
 LILO 22.3 no longer requires placement parameters in the configuration
-file (/etc/lilo.conf).  Instead, text menu size, placement, and colors
+file (/System/Settings/lilo.conf).  Instead, text menu size, placement, and colors
 may be edited into the bitmap file header using "lilo -E file.bmp".  The
 parameters may also be saved from the bitmap file header to a companion
 configuration file, "file.dat", as an option to the edit command. Param-
 eters may be transferred from the companion '.dat' file to the bitmap
 file header using the command "lilo -E file.dat".  LILO 22.3 still rec-
-ognizes bitmap file formating commands in '/etc/lilo.conf'.
+ognizes bitmap file formating commands in '/System/Settings/lilo.conf'.
 
 This change allows bitmap graphics to be exchanged among users without the
 tedious need to exchange the color/positioning information separately.
@@ -89,7 +89,7 @@
 	bmp-timer  =		#specifies the position and color attributes
 				#of the timeout timer
 
-	install = /boot/boot-bmp.b	#specify the boot loader with bitmap
+	install = /System/Boot/boot-bmp.b	#specify the boot loader with bitmap
 					#graphics capability
 
 'bitmap=' specifies the graphic file to be used as a background screen.  It
@@ -272,7 +272,7 @@
 USAGE COMMAND
 =============
 
-With version 22.3, '/sbin/lilo' becomes, in addition to the boot installer,
+With version 22.3, '/System/AdminTools/lilo' becomes, in addition to the boot installer,
 the bitmap file header editor.  A single switch, '-E' is added to accomplish
 this new task.  It has two uses:
 
diff -urN lilo-22.7.2/README.common.problems lilo-22.7.2-STEP/README.common.problems
--- lilo-22.7.2/README.common.problems	2001-05-26 16:19:40.000000000 +1200
+++ lilo-22.7.2-STEP/README.common.problems	2006-07-12 16:21:54.191909750 +1200
@@ -34,7 +34,7 @@
 =======================================
 This means the first-stage loader gained control; it thought it success-
 fully loaded the second-stage loader; but it never got there.  This most
-often occurs when the second-stage loader, '/boot/boot.b', is not load-
+often occurs when the second-stage loader, '/System/Boot/boot.b', is not load-
 able using the BIOS.
 
 First, have you tried specifying 'lba32' in your 'lilo.conf' file?  On
diff -urN lilo-22.7.2/README.disk lilo-22.7.2-STEP/README.disk
--- lilo-22.7.2/README.disk	2001-01-04 18:04:37.000000000 +1300
+++ lilo-22.7.2-STEP/README.disk	2006-07-12 16:21:54.223911750 +1200
@@ -8,7 +8,7 @@
 Creating the floppy
 ===================
 Change into the LILO source code directory.  Insert a formatted floppy
-disk into the A: drive (/dev/fd0).  Type the command "make floppy". 
+disk into the A: drive (/System/Devices/fd0).  Type the command "make floppy". 
 After the files have assembled, the bootable floppy disk will be created.
 
 Running the diagnostic
diff -urN lilo-22.7.2/README.nokeyboard lilo-22.7.2-STEP/README.nokeyboard
--- lilo-22.7.2/README.nokeyboard	2005-11-27 10:16:57.000000000 +1300
+++ lilo-22.7.2-STEP/README.nokeyboard	2006-07-12 16:21:54.255913750 +1200
@@ -31,7 +31,7 @@
 =====
 
 After LILO has been reconfigured, two new keywords are available for use
-in the configuration file (e.g., /etc/lilo.conf).  The global option:
+in the configuration file (e.g., /System/Settings/lilo.conf).  The global option:
 
 nokbdefault = <descriptor>
 
@@ -46,25 +46,25 @@
 descriptors may be marked unbootable on an individual basis; viz.,
 
 	...
-	boot = /dev/hda
+	boot = /System/Devices/hda
 	default = linux
 	nokbdefault = linux-nokbd
 	read-only
 	...
-	image=/boot/vmlinuz
+	image=/System/Boot/vmlinuz
 		label=linux		# default descriptor
-		root=/dev/hda1
-		initrd=/boot/initrd
+		root=/System/Devices/hda1
+		initrd=/System/Boot/initrd
 		append=" ... standard options ..."
-	image=/boot/vmlinuz2
+	image=/System/Boot/vmlinuz2
 		label=linux-nokbd
-		root=/dev/hda1
-		initrd=/boot/initrd2
+		root=/System/Devices/hda1
+		initrd=/System/Boot/initrd2
 		append=" ... no keyboard options, e.g, console=ttS0..."
-	other=/dev/hda2
+	other=/System/Devices/hda2
 		label=DOS
 		nokbdisable
-		table=/dev/hda
+		table=/System/Devices/hda
 
 In the example above, "linux", the first descriptor, is the default boot
 selection (which may be overridden at the system console at boot time).
@@ -107,7 +107,7 @@
 
 At this point you have added support for the configuration file 
 "nokbdefault=" global option, and the "nokbdisable" local option.  Now
-edit "/etc/lilo.conf", the default configuration file, and re-install
+edit "/System/Settings/lilo.conf", the default configuration file, and re-install
 the boot loader by running:
 
 	> lilo -t		# test installation
diff -urN lilo-22.7.2/README.pseudo lilo-22.7.2-STEP/README.pseudo
--- lilo-22.7.2/README.pseudo	2002-06-04 16:45:41.000000000 +1200
+++ lilo-22.7.2-STEP/README.pseudo	2006-07-12 16:21:54.259914000 +1200
@@ -22,7 +22,7 @@
 
 "foo.img" is the bootable pseudo-kernel.
 
-In the configuration file, usually '/etc/lilo.conf', the following lines
+In the configuration file, usually '/System/Settings/lilo.conf', the following lines
 must be added:
 
 	image = foo.img
@@ -46,17 +46,17 @@
 	cd diagnose
 	make test4.com
 	cd ..
-	cat pseudo.b diagnose/test4.com >/boot/test4.img
+	cat pseudo.b diagnose/test4.com >/System/Boot/test4.img
 
-Then append the following lines to '/etc/lilo.conf':
+Then append the following lines to '/System/Settings/lilo.conf':
 
-	image = /boot/test4.img
+	image = /System/Boot/test4.img
 	  root = current
           label = diagnostic
 
 Now, install the boot loader with the new menu item:
 
-	/sbin/lilo
+	/System/AdminTools/lilo
 
 The last item on the boot menu should be "diagnostic", which will run
 "test4.com" from the LILO boot prompt.
diff -urN lilo-22.7.2/README.raid1 lilo-22.7.2-STEP/README.raid1
--- lilo-22.7.2/README.raid1	2004-09-08 15:42:46.000000000 +1200
+++ lilo-22.7.2-STEP/README.raid1	2006-07-12 16:21:54.423924250 +1200
@@ -32,10 +32,10 @@
 A RAID installation of the LILO boot loader is initiated by
 specifying that the boot record is to be placed in the boot area of
 a RAID partition.  This is accomplished by the 'boot=' line in the
-LILO configuration file, '/etc/lilo.conf'.  For instance, a system
-running with '/dev/md1' mounted as root ('/'), would use the line:
+LILO configuration file, '/System/Settings/lilo.conf'.  For instance, a system
+running with '/System/Devices/md1' mounted as root ('/'), would use the line:
 
-   boot = /dev/md1
+   boot = /System/Devices/md1
 
 to initiate a RAID installation.  As directed, the boot record is
 written to the RAID partition.  Unfortunately, in the event of
@@ -105,15 +105,15 @@
 Non-RAID LILO installations write accessible boot records when they
 write to primary partitions, such as:
 
-   boot = /dev/hda1
+   boot = /System/Devices/hda1
 
 or,
 
-   boot = /dev/sdb3
+   boot = /System/Devices/sdb3
 
 Boot records are written to the MBR by specifying the drive; viz.,
 
-   boot = /dev/hdb
+   boot = /System/Devices/hdb
 
 writes to the MBR of the slave drive on the primary IDE controller.
 
@@ -123,7 +123,7 @@
 loaders which search the partition table for a partition marked
 "active".  They may be booted from a boot manager, such as the LILO
 boot menu, and are booted as 'other=' entries in the configuration
-file, '/etc/lilo.conf'.
+file, '/System/Settings/lilo.conf'.
 
 
 SKEWED CASE
@@ -133,7 +133,7 @@
 are not likely to be primary, and their distinguishing characteristic
 is that files on the filsystem within the partition lie at different
 absolute sector addresses:  kernel files, initrd files, and the LILO
-map file, in particular.  Thus any boot record written to '/dev/mdX',
+map file, in particular.  Thus any boot record written to '/System/Devices/mdX',
 the RAID partition, will have sector addresses which cannot be
 guaranteed accurate for all drives.  Worst case is that they are
 accurate for only one drive.  Hence, this boot will work for one
@@ -155,21 +155,21 @@
 partition.  In this case, 'raid-extra-boot=' should be specified,
 literally, as "none"; viz.,
 
-   boot = /dev/md1
+   boot = /System/Devices/md1
    raid-extra-boot = none
 
 With this specification, LILO will write the boot record to
-'/dev/md0' only.  If the RAID disk on the lowest BIOS device code
+'/System/Devices/md0' only.  If the RAID disk on the lowest BIOS device code
 fails, the array may not be bootable, except from a floppy disk.
 
 Without the specification "none", the default LILO action in the case
 of a skewed installation is:
 
-   boot = /dev/md1
+   boot = /System/Devices/md1
    raid-extra-boot = auto
 
 This requests LILO to place recovery boot records on the MBRs of any
-drives for which the the '/dev/md1' boot record is not valid, because
+drives for which the the '/System/Devices/md1' boot record is not valid, because
 of partition skew.  Even with "auto" specified, or implied by having
 no 'raid-extra-boot=' line, LILO will never write a boot record to
 the MBR of BIOS device 0x80.  This MBR is considered so critical,
@@ -189,10 +189,10 @@
 If boot records are desired on all MBRs of all disks with partitions
 in the raid set, then the following specification is used:
 
-   boot = /dev/md1		# OR,   -b /dev/md1
+   boot = /System/Devices/md1		# OR,   -b /System/Devices/md1
    raid-extra-boot = mbr	# OR,   -x mbr
 
-If there are three disks with partitions that are part of the /dev/md1
+If there are three disks with partitions that are part of the /System/Devices/md1
 raid set, then the Master Boot Records of all three will receive
 additional boot records. With this specification, the MBR of BIOS
 device 0x80 will be overwritten. 
@@ -202,45 +202,45 @@
 
 The keyword 'raid-extra-boot=' may also be used to specify exactly
 where you want LILO to write the auxiliary boot records.  Consider
-the following RAID installation:  disk 0:  /dev/hdc6; disk 1: 
-/dev/sda1.  The installation is "skewed".  Disks /dev/hda and
-/dev/hdb exist, and occupy BIOS device codes 0x80 and 0x81,
-respectively.  /dev/hdc is BIOS device code 0x82, and /dev/sda is
+the following RAID installation:  disk 0:  /System/Devices/hdc6; disk 1: 
+/System/Devices/sda1.  The installation is "skewed".  Disks /System/Devices/hda and
+/System/Devices/hdb exist, and occupy BIOS device codes 0x80 and 0x81,
+respectively.  /System/Devices/hdc is BIOS device code 0x82, and /System/Devices/sda is
 BIOS device code 0x83.  If the configuration file looks something
 like:
 
-   boot = /dev/md1
+   boot = /System/Devices/md1
    #  the following line is not needed, but may be used to
    #  force the device code which the RAID set will boot as
-   #disk=/dev/md1 bios=0x82
+   #disk=/System/Devices/md1 bios=0x82
    #  disks hda and hdb are on the expected bios codes 80 & 81
    #
-   disk=/dev/hdc bios=0x82
-   disk=/dev/sda bios=0x83
+   disk=/System/Devices/hdc bios=0x82
+   disk=/System/Devices/sda bios=0x83
    #
-   image = /boot/vmlinuz
+   image = /System/Boot/vmlinuz
       label = linux
-      root = /dev/md1
+      root = /System/Devices/md1
       read-only
-   other = /dev/hda
+   other = /System/Devices/hda
       label = MBR
 
 then LILO will write the boot record to boot from 0x82, the lowest
 device code of any disk in the RAID set.  An additional boot record
-will be written to the MBR of '/dev/hdc'.  Disk '/dev/sda' is
-bootable should '/dev/hdc' fail under the following circumstance: 
-'/dev/hdc' is removed, freeing BIOS device code 0x82.  '/dev/sda' now
+will be written to the MBR of '/System/Devices/hdc'.  Disk '/System/Devices/sda' is
+bootable should '/System/Devices/hdc' fail under the following circumstance: 
+'/System/Devices/hdc' is removed, freeing BIOS device code 0x82.  '/System/Devices/sda' now
 installs on the lowest code, 0x82, and will boot as long as partition
 1 is marked active.
 
 The same effect could be achieved with the configuration file having
 the extra line:
 
-  raid-extra-boot = /dev/hdc
+  raid-extra-boot = /System/Devices/hdc
 
 Further, the use of extra boot records could be extended as follows:
 
-  raid-extra-boot = "/dev/hdc,/dev/sda"
+  raid-extra-boot = "/System/Devices/hdc,/System/Devices/sda"
 
 Now both disks in the RAID set have usable boot records on the MBRs. 
 There is no need to worry about "active" partitions in a recovery
@@ -256,9 +256,9 @@
    raid-extra-boot = mbr-only
 
 Use of "mbr-only" defeats writing the boot record to the RAID
-partition, '/dev/md1' in the examples above, defeats the protection
+partition, '/System/Devices/md1' in the examples above, defeats the protection
 against writing to the MBR of BIOS device 0x80 (which is usually
-'/dev/hda' or '/dev/sda'), and writes to all MBRs of the drives in
+'/System/Devices/hda' or '/System/Devices/sda'), and writes to all MBRs of the drives in
 the RAID set.  Except for not writing to the boot record of the 
 raid partition, this option is otherwise the same as the "raid-
 extra-boot=mbr" specification discussed above.
@@ -271,11 +271,11 @@
 MASTER BOOT RECORDS and ACTIVE PRIMARY PARTITIONS
 =================================================
 
-The active partition, /dev/sda1 in the case above is booted by a
-"Master Boot Record" written to /dev/sda.   LILO may be requested
+The active partition, /System/Devices/sda1 in the case above is booted by a
+"Master Boot Record" written to /System/Devices/sda.   LILO may be requested
 to write such a Master record with the command:
 
-   lilo -M /dev/sda     # write master boot record
+   lilo -M /System/Devices/sda     # write master boot record
 
 The Master Boot Record performs the same function as the DOS utility
 'fdisk /mbr', except that the DOS code is only used for the C: drive. 
@@ -287,13 +287,13 @@
 
 The active partition may be set with the -A flag; viz.,
 
-   lilo -A /dev/sda 1   # note the space!!!
+   lilo -A /System/Devices/sda 1   # note the space!!!
 
 or checked; viz.,
 
-   lilo -A /dev/sda     # check active partition
+   lilo -A /System/Devices/sda     # check active partition
 
-(response:  /dev/sda1)
+(response:  /System/Devices/sda1)
 
 
 REMINDERS
@@ -362,10 +362,10 @@
 This message will most often appear when 'raid-extra-boot=' was
 specified as "none"; or, if specified as (or defaulted to), "auto",
 the extra boot record it could not write was to the MBR of BIOS
-device 0x80, usually '/dev/hda' or '/dev/sda'.  This could happen
+device 0x80, usually '/System/Devices/hda' or '/System/Devices/sda'.  This could happen
 with a skewed installation, where the RAID set partition on BIOS
 device code 0x80 is not a primary partition.  If it were a primary
-partition, then the RAID partition boot record written to '/dev/md?'
+partition, then the RAID partition boot record written to '/System/Devices/md?'
 would be used, and there would be no necessity to write to the MBR of
 BIOS disk 0x80.
 
@@ -426,10 +426,10 @@
 
 will produce a warning message telling you that the following is needed:
 
-   lilo -M /dev/sda	# install new MBR
-   lilo -A /dev/sda 3	# activate the correct partition (# 3)
-   lilo -M /dev/sdb	# install new MBR
-   lilo -A /dev/sdb 2   # activate the correct partition (# 2)
+   lilo -M /System/Devices/sda	# install new MBR
+   lilo -A /System/Devices/sda 3	# activate the correct partition (# 3)
+   lilo -M /System/Devices/sdb	# install new MBR
+   lilo -A /System/Devices/sdb 2   # activate the correct partition (# 2)
 
 If the partitions of the PARALLEL installation are not all primary, the
 warning message will not be issued, and non-primary partitions will not
diff -urN lilo-22.7.2/README.volumeID lilo-22.7.2-STEP/README.volumeID
--- lilo-22.7.2/README.volumeID	2003-05-21 12:04:06.000000000 +1200
+++ lilo-22.7.2-STEP/README.volumeID	2006-07-12 16:21:54.527930750 +1200
@@ -12,24 +12,24 @@
 assignment is made by the BIOS, and is quite simple on single hard disk
 systems:  the hard disk receives BIOS device code 0x80.  However, even two
 disk systems can confuse LILO if the disks are attached non-sequentially:
-viz., if the disks are /dev/hda and /dev/hdb, they are assigned device codes
-0x80 and 0x81, respectively; however, if the disks are /dev/hda and /dev/hdc
-(perhaps, /dev/hdb is an IDE CDROM), LILO will mistakenly think that the
-second disk is 0x82.  Just because /dev/hdb is not mentioned in the
-configuration file (/etc/lilo.conf), does not mean that it does not exist. 
+viz., if the disks are /System/Devices/hda and /System/Devices/hdb, they are assigned device codes
+0x80 and 0x81, respectively; however, if the disks are /System/Devices/hda and /System/Devices/hdc
+(perhaps, /System/Devices/hdb is an IDE CDROM), LILO will mistakenly think that the
+second disk is 0x82.  Just because /System/Devices/hdb is not mentioned in the
+configuration file (/System/Settings/lilo.conf), does not mean that it does not exist. 
 But on a two-disk system, attaching the second disk to the second IDE
 controller has performance advantages.  The solution was to explicitly tell
 LILO, in the configuration file, that the second disk was attached as
-/dev/hdc:  viz.,
+/System/Devices/hdc:  viz.,
 
-   disk = /dev/hda   bios = 0x80
-   disk = /dev/hdc   bios = 0x81
+   disk = /System/Devices/hda   bios = 0x80
+   disk = /System/Devices/hdc   bios = 0x81
 
 
 The above assignment can be determined automatically in most cases, if the
 system was booted with a recent version of LILO that supports the "BIOS data
 check".  This scheme makes the results of certain key BIOS calls available
-to the Boot Installer (/sbin/lilo), even though it cannot execute BIOS calls
+to the Boot Installer (/System/AdminTools/lilo), even though it cannot execute BIOS calls
 directly (far too dangerous).  However, if one used a rescue disk created
 with another boot loader, the BIOS data check information is not available,
 and the necessity of the two lines above becomes necessary for the initial
@@ -150,12 +150,12 @@
 disk.  Thus, it will refuse to install a boot loader as long as this
 condition persists.  Unassigned ID's are automatically overwritten, and a
 backup copy of the sector is created, so the fix is to write an "unassigned"
-value to one of the duplicated fields.  Say /dev/hda and /dev/hdb have
+value to one of the duplicated fields.  Say /System/Devices/hda and /System/Devices/hdb have
 duplicate Volume ID's.  Choose the disk with the higher BIOS device code,
 since it will not be a Windows NT or 2000 disk, and set the Volume ID to
 zero; viz.,
 
-	lilo -z -M /dev/hdb
+	lilo -z -M /System/Devices/hdb
 
 The disk will receive a new Master Boot Record (which boots the first active
 partition), and the Volume ID will be set to zero.  A subsequent
@@ -163,8 +163,8 @@
 
 	lilo -v
 
-Should no longer complain about duplicated Volume ID's on /dev/hda and
-/dev/hdb.  /dev/hdb will at this time receive a newly generated Volume ID,
+Should no longer complain about duplicated Volume ID's on /System/Devices/hda and
+/System/Devices/hdb.  /System/Devices/hdb will at this time receive a newly generated Volume ID,
 which will be checked for uniqueness against all other disks in the system.
 
 CAUTION:  NEVER CHANGE THE VOLUME ID OF A WINDOWS 2000 BOOT DISK.
@@ -189,7 +189,7 @@
 boot), based upon the BIOS data check information.  If you did not boot with
 LILO the last time, then the information as of the last boot will not be
 available.  Any conflicts will be noted, along with the corrective action
-LILO will take the next time a boot loader is installed (/sbin/lilo
+LILO will take the next time a boot loader is installed (/System/AdminTools/lilo
 command).  This is the preferred check of the state of Volume ID's on the
 disks.
 
diff -urN lilo-22.7.2/sample/lilo.raid.conf lilo-22.7.2-STEP/sample/lilo.raid.conf
--- lilo-22.7.2/sample/lilo.raid.conf	2003-07-13 06:37:09.000000000 +1200
+++ lilo-22.7.2-STEP/sample/lilo.raid.conf	2006-07-12 16:22:03.380484000 +1200
@@ -9,7 +9,7 @@
 # it will be possible to boot by disabling the IDE controller in BIOS,
 # which will cause (sdb) to become device 0x80, and boot appropriately.
 
-boot = /dev/md1
+boot = /System/Devices/md1
 
 #
 # Auxiliary boot records will be installed automatically.  Since
@@ -23,11 +23,11 @@
 # from what one might expect, so we make the BIOS device
 # code assignment by the BIOS explict:
 
-disk=/dev/hda
+disk=/System/Devices/hda
    bios=0x80
-disk=/dev/sda
+disk=/System/Devices/sda
    bios=0x82
-disk=/dev/sdb
+disk=/System/Devices/sdb
    bios=0x81
 
 #
@@ -40,7 +40,7 @@
 #
 # Use the MENU interface, specifying the title and color scheme
 #
-#install = /boot/boot-menu.b	# versions before 22.3
+#install = /System/Boot/boot-menu.b	# versions before 22.3
 
 install = menu			# syntax since 22.3 ("text", "menu", "bmp")
 menu-title = " RAID boot on CARMEN "
@@ -56,7 +56,7 @@
 #  Both kernels below use the same root directory, which
 #  is mounted initially "read-only"
 
-root=/dev/md1
+root=/System/Devices/md1
   read-only
 
 
@@ -67,25 +67,25 @@
 #
 #  This is the kernel we usually boot
 
-image=/boot/vmlinuz-2.4.2-2
+image=/System/Boot/vmlinuz-2.4.2-2
 	label=linux 
 	append="reboot=warm"
-	initrd=/boot/initrd-2.4.2-2.img
+	initrd=/System/Boot/initrd-2.4.2-2.img
 
 #
 #  This is an alternate kernel
 
-image=/boot/vmlinuz-2.2.14-5.0
+image=/System/Boot/vmlinuz-2.2.14-5.0
 	label=linux.bak
 	append="reboot=warm"
-	initrd=/boot/initrd-2.2.14-5.0.img
+	initrd=/System/Boot/initrd-2.2.14-5.0.img
 
 #
 #  This system also will run DOS, but we have
 #  to fake DOS into thinking it is booting from
 #  drive C:
 
-other=/dev/sdb2
+other=/System/Devices/sdb2
 	label=dosB2
 	map-drive = 0x80  to = 0x81
 	map-drive = 0x81  to = 0x82
@@ -97,16 +97,16 @@
 #  mounts as drive E:.  Versions of LILO prior to version 22 will 
 #  require a special boot loader, but as of version 22, all
 #  chain loader functions have been combined into the default
-#  chain loader, '/boot/chain.b'.
+#  chain loader, '/System/Boot/chain.b'.
 
-other=/dev/sda5
-#	loader=/boot/os2_d.b
+other=/System/Devices/sda5
+#	loader=/System/Boot/os2_d.b
 	label=os2
 	table=E:
 	change
-	  partition=/dev/hda1
+	  partition=/System/Devices/hda1
 	    set=DOS16_big_hidden
-	  partition=/dev/hda2
+	  partition=/System/Devices/hda2
 	    set=NTFS_hidden
 
 #  Partition change rules are required to force drive E: to 
diff -urN lilo-22.7.2/sample/lilo.sample.conf lilo-22.7.2-STEP/sample/lilo.sample.conf
--- lilo-22.7.2/sample/lilo.sample.conf	2003-07-13 06:56:15.000000000 +1200
+++ lilo-22.7.2-STEP/sample/lilo.sample.conf	2006-07-12 16:22:03.668502000 +1200
@@ -6,7 +6,7 @@
 # The boot record is installed on the second primary partition
 # Which will have to be marked active to get to it.
 
-boot = /dev/hda2
+boot = /System/Devices/hda2
 
 #
 # The map file is placed in the default location, but
@@ -15,7 +15,7 @@
 # lilo CREATES the (sector) map file of direct sector addresses which
 # are independent of any filesystem.
 
-map = /boot/.map
+map = /System/Boot/.map
 
 #
 # LBA32 is needed to address all sectors of the 27Gb disks
@@ -28,7 +28,7 @@
 # by installing this boot loader:
 
 install = menu		# syntax since version 22.3 (see the man pages)
-#install = /boot/boot-menu.b	# outdated syntax, but selection is based on
+#install = /System/Boot/boot-menu.b	# outdated syntax, but selection is based on
 				# the substring "menu", so it still works
 
 #
@@ -63,19 +63,19 @@
 #
 # All other= sections use this chain loader (version 22)
 
-#loader=/boot/chain.b		# outdated; there is now only one chain
+#loader=/System/Boot/chain.b		# outdated; there is now only one chain
 				# loader, so this line is not really needed
 
 # This system is complicated -- leave no doubt about how the
 # BIOS has assigned the device codes:
 
-disk=/dev/hda	bios=0x80
-disk=/dev/hdb	bios=0x81
-disk=/dev/hdc	bios=0x82
-disk=/dev/sda	bios=0x83
-disk=/dev/sdb	inaccessible		# has no device code, so mark it
+disk=/System/Devices/hda	bios=0x80
+disk=/System/Devices/hdb	bios=0x81
+disk=/System/Devices/hdc	bios=0x82
+disk=/System/Devices/sda	bios=0x83
+disk=/System/Devices/sdb	inaccessible		# has no device code, so mark it
 					# off-limits
-disk=/dev/fd0   bios=0x00		# got a 2.88Mb floppy, so specify all
+disk=/System/Devices/fd0   bios=0x00		# got a 2.88Mb floppy, so specify all
 	sectors=36  heads=2  cylinders=80
 
 # Version 22.5.6 and later will likely get the drive assignment correct, so
@@ -88,7 +88,7 @@
 #
 # The first image is the default image
 
-image=/dd/boot/vmlinuz-2.4.2
+image=/dd/System/Boot/vmlinuz-2.4.2
 	label=2.4.2
 	root=current
 	append="reboot=warm"
@@ -96,9 +96,9 @@
 #
 # Yes, we run Windoze, too
 
-other=/dev/hda1
+other=/System/Devices/hda1
 	label=win_2k
-	table=/dev/hda
+	table=/System/Devices/hda
 #	master-boot		# not really needed, since this drive is
 				# already 0x80, but "master-boot" is a good
 				# idea to put on any "other=" that must
@@ -108,17 +108,17 @@
 #
 # This is the backup kernel from RedHat
 
-image=/dd/boot/vmlinuz-2.2.14-5.0
+image=/dd/System/Boot/vmlinuz-2.2.14-5.0
 	label=RH62
-	initrd=/dd/boot/initrd-2.2.14-5.0.img
+	initrd=/dd/System/Boot/initrd-2.2.14-5.0.img
 	append="reboot=warm"
-	root=/dev/hda7
+	root=/System/Devices/hda7
 
 #
 # The D: drive has a Win98 installation
 # Fake booting from drive C: with the map-drive options
 
-other=/dev/hdb1
+other=/System/Devices/hdb1
 	label=win_98
 #	map-drive=0x80 to=0x81		# obsolete, but still allowed
 #	map-drive=0x81 to=0x80		#
@@ -127,21 +127,21 @@
 #
 # This is an experimental, small kernel
 
-image=/dd/boot/zImage-2.2.14
+image=/dd/System/Boot/zImage-2.2.14
 	label=zI-2.2.14
-	root=/dev/hda7
+	root=/System/Devices/hda7
 
 #
 # And a route back to the Master Boot Record, if wanted
 
-other=/dev/hda			# route back to the master LILO boot menu
+other=/System/Devices/hda			# route back to the master LILO boot menu
 	label=MBR		# on the Master Boot Record
 	master-boot		# guarantee that it boots as 0x80
 
 #
 # Allow us to boot the floppy drive from the main LILO boot menu
 
-other=/dev/fd0			# no "label=", so it appears as "fd0"
+other=/System/Devices/fd0			# no "label=", so it appears as "fd0"
 	master-boot		# it boots as the master floppy (0x00)
 	unsafe			# and it may not be inserted, so do not 
 				# try to read the boot sector during LILO
